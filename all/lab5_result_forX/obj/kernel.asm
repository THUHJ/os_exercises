
bin/kernel:     file format elf32-i386


Disassembly of section .text:

c0100000 <kern_entry>:
.text
.globl kern_entry
kern_entry:
    # reload temperate gdt (second time) to remap all physical memory
    # virtual_addr 0~4G=linear_addr&physical_addr -KERNBASE~4G-KERNBASE 
    lgdt REALLOC(__gdtdesc)
c0100000:	0f 01 15 18 e0 12 00 	lgdtl  0x12e018
    movl $KERNEL_DS, %eax
c0100007:	b8 10 00 00 00       	mov    $0x10,%eax
    movw %ax, %ds
c010000c:	8e d8                	mov    %eax,%ds
    movw %ax, %es
c010000e:	8e c0                	mov    %eax,%es
    movw %ax, %ss
c0100010:	8e d0                	mov    %eax,%ss

    ljmp $KERNEL_CS, $relocated
c0100012:	ea 19 00 10 c0 08 00 	ljmp   $0x8,$0xc0100019

c0100019 <relocated>:

relocated:

    # set ebp, esp
    movl $0x0, %ebp
c0100019:	bd 00 00 00 00       	mov    $0x0,%ebp
    # the kernel stack region is from bootstack -- bootstacktop,
    # the kernel stack size is KSTACKSIZE (8KB)defined in memlayout.h
    movl $bootstacktop, %esp
c010001e:	bc 00 e0 12 c0       	mov    $0xc012e000,%esp
    # now kernel stack is ready , call the first C function
    call kern_init
c0100023:	e8 02 00 00 00       	call   c010002a <kern_init>

c0100028 <spin>:

# should never get here
spin:
    jmp spin
c0100028:	eb fe                	jmp    c0100028 <spin>

c010002a <kern_init>:
int kern_init(void) __attribute__((noreturn));

static void lab1_switch_test(void);

int
kern_init(void) {
c010002a:	55                   	push   %ebp
c010002b:	89 e5                	mov    %esp,%ebp
c010002d:	83 ec 28             	sub    $0x28,%esp
    extern char edata[], end[];
    memset(edata, 0, end - edata);
c0100030:	ba b8 30 1a c0       	mov    $0xc01a30b8,%edx
c0100035:	b8 2a ff 19 c0       	mov    $0xc019ff2a,%eax
c010003a:	29 c2                	sub    %eax,%edx
c010003c:	89 d0                	mov    %edx,%eax
c010003e:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100042:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0100049:	00 
c010004a:	c7 04 24 2a ff 19 c0 	movl   $0xc019ff2a,(%esp)
c0100051:	e8 f1 d2 00 00       	call   c010d347 <memset>

    cons_init();                // init the console
c0100056:	e8 03 2b 00 00       	call   c0102b5e <cons_init>

    const char *message = "(THU.CST) os is loading ...";
c010005b:	c7 45 f4 e0 d4 10 c0 	movl   $0xc010d4e0,-0xc(%ebp)
    cprintf("%s\n\n", message);
c0100062:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100065:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100069:	c7 04 24 fc d4 10 c0 	movl   $0xc010d4fc,(%esp)
c0100070:	e8 61 17 00 00       	call   c01017d6 <cprintf>

    print_kerninfo();
c0100075:	e8 88 1d 00 00       	call   c0101e02 <print_kerninfo>

    grade_backtrace();
c010007a:	e8 9d 00 00 00       	call   c010011c <grade_backtrace>

    pmm_init();                 // init physical memory management
c010007f:	e8 86 6b 00 00       	call   c0106c0a <pmm_init>

    pic_init();                 // init interrupt controller
c0100084:	e8 b3 34 00 00       	call   c010353c <pic_init>
    idt_init();                 // init interrupt descriptor table
c0100089:	e8 2b 36 00 00       	call   c01036b9 <idt_init>

    vmm_init();                 // init virtual memory management
c010008e:	e8 97 9a 00 00       	call   c0109b2a <vmm_init>
    proc_init();                // init process table
c0100093:	e8 06 c2 00 00       	call   c010c29e <proc_init>
    
    ide_init();                 // init ide devices
c0100098:	e8 f2 2b 00 00       	call   c0102c8f <ide_init>
    swap_init();                // init swap
c010009d:	e8 20 82 00 00       	call   c01082c2 <swap_init>

    clock_init();               // init clock interrupt
c01000a2:	e8 6d 22 00 00       	call   c0102314 <clock_init>
    intr_enable();              // enable irq interrupt
c01000a7:	e8 fe 33 00 00       	call   c01034aa <intr_enable>

    //LAB1: CAHLLENGE 1 If you try to do it, uncomment lab1_switch_test()
    // user/kernel mode switch test
    //lab1_switch_test();
    
    cpu_idle();                 // run idle process
c01000ac:	e8 18 c4 00 00       	call   c010c4c9 <cpu_idle>

c01000b1 <grade_backtrace2>:
}

void __attribute__((noinline))
grade_backtrace2(int arg0, int arg1, int arg2, int arg3) {
c01000b1:	55                   	push   %ebp
c01000b2:	89 e5                	mov    %esp,%ebp
c01000b4:	83 ec 18             	sub    $0x18,%esp
    mon_backtrace(0, NULL, NULL);
c01000b7:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01000be:	00 
c01000bf:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01000c6:	00 
c01000c7:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c01000ce:	e8 73 21 00 00       	call   c0102246 <mon_backtrace>
}
c01000d3:	c9                   	leave  
c01000d4:	c3                   	ret    

c01000d5 <grade_backtrace1>:

void __attribute__((noinline))
grade_backtrace1(int arg0, int arg1) {
c01000d5:	55                   	push   %ebp
c01000d6:	89 e5                	mov    %esp,%ebp
c01000d8:	53                   	push   %ebx
c01000d9:	83 ec 14             	sub    $0x14,%esp
    grade_backtrace2(arg0, (int)&arg0, arg1, (int)&arg1);
c01000dc:	8d 5d 0c             	lea    0xc(%ebp),%ebx
c01000df:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c01000e2:	8d 55 08             	lea    0x8(%ebp),%edx
c01000e5:	8b 45 08             	mov    0x8(%ebp),%eax
c01000e8:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c01000ec:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c01000f0:	89 54 24 04          	mov    %edx,0x4(%esp)
c01000f4:	89 04 24             	mov    %eax,(%esp)
c01000f7:	e8 b5 ff ff ff       	call   c01000b1 <grade_backtrace2>
}
c01000fc:	83 c4 14             	add    $0x14,%esp
c01000ff:	5b                   	pop    %ebx
c0100100:	5d                   	pop    %ebp
c0100101:	c3                   	ret    

c0100102 <grade_backtrace0>:

void __attribute__((noinline))
grade_backtrace0(int arg0, int arg1, int arg2) {
c0100102:	55                   	push   %ebp
c0100103:	89 e5                	mov    %esp,%ebp
c0100105:	83 ec 18             	sub    $0x18,%esp
    grade_backtrace1(arg0, arg2);
c0100108:	8b 45 10             	mov    0x10(%ebp),%eax
c010010b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010010f:	8b 45 08             	mov    0x8(%ebp),%eax
c0100112:	89 04 24             	mov    %eax,(%esp)
c0100115:	e8 bb ff ff ff       	call   c01000d5 <grade_backtrace1>
}
c010011a:	c9                   	leave  
c010011b:	c3                   	ret    

c010011c <grade_backtrace>:

void
grade_backtrace(void) {
c010011c:	55                   	push   %ebp
c010011d:	89 e5                	mov    %esp,%ebp
c010011f:	83 ec 18             	sub    $0x18,%esp
    grade_backtrace0(0, (int)kern_init, 0xffff0000);
c0100122:	b8 2a 00 10 c0       	mov    $0xc010002a,%eax
c0100127:	c7 44 24 08 00 00 ff 	movl   $0xffff0000,0x8(%esp)
c010012e:	ff 
c010012f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100133:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c010013a:	e8 c3 ff ff ff       	call   c0100102 <grade_backtrace0>
}
c010013f:	c9                   	leave  
c0100140:	c3                   	ret    

c0100141 <lab1_print_cur_status>:

static void
lab1_print_cur_status(void) {
c0100141:	55                   	push   %ebp
c0100142:	89 e5                	mov    %esp,%ebp
c0100144:	83 ec 28             	sub    $0x28,%esp
    static int round = 0;
    uint16_t reg1, reg2, reg3, reg4;
    asm volatile (
c0100147:	8c 4d f6             	mov    %cs,-0xa(%ebp)
c010014a:	8c 5d f4             	mov    %ds,-0xc(%ebp)
c010014d:	8c 45 f2             	mov    %es,-0xe(%ebp)
c0100150:	8c 55 f0             	mov    %ss,-0x10(%ebp)
            "mov %%cs, %0;"
            "mov %%ds, %1;"
            "mov %%es, %2;"
            "mov %%ss, %3;"
            : "=m"(reg1), "=m"(reg2), "=m"(reg3), "=m"(reg4));
    cprintf("%d: @ring %d\n", round, reg1 & 3);
c0100153:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0100157:	0f b7 c0             	movzwl %ax,%eax
c010015a:	83 e0 03             	and    $0x3,%eax
c010015d:	89 c2                	mov    %eax,%edx
c010015f:	a1 40 ff 19 c0       	mov    0xc019ff40,%eax
c0100164:	89 54 24 08          	mov    %edx,0x8(%esp)
c0100168:	89 44 24 04          	mov    %eax,0x4(%esp)
c010016c:	c7 04 24 01 d5 10 c0 	movl   $0xc010d501,(%esp)
c0100173:	e8 5e 16 00 00       	call   c01017d6 <cprintf>
    cprintf("%d:  cs = %x\n", round, reg1);
c0100178:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c010017c:	0f b7 d0             	movzwl %ax,%edx
c010017f:	a1 40 ff 19 c0       	mov    0xc019ff40,%eax
c0100184:	89 54 24 08          	mov    %edx,0x8(%esp)
c0100188:	89 44 24 04          	mov    %eax,0x4(%esp)
c010018c:	c7 04 24 0f d5 10 c0 	movl   $0xc010d50f,(%esp)
c0100193:	e8 3e 16 00 00       	call   c01017d6 <cprintf>
    cprintf("%d:  ds = %x\n", round, reg2);
c0100198:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
c010019c:	0f b7 d0             	movzwl %ax,%edx
c010019f:	a1 40 ff 19 c0       	mov    0xc019ff40,%eax
c01001a4:	89 54 24 08          	mov    %edx,0x8(%esp)
c01001a8:	89 44 24 04          	mov    %eax,0x4(%esp)
c01001ac:	c7 04 24 1d d5 10 c0 	movl   $0xc010d51d,(%esp)
c01001b3:	e8 1e 16 00 00       	call   c01017d6 <cprintf>
    cprintf("%d:  es = %x\n", round, reg3);
c01001b8:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c01001bc:	0f b7 d0             	movzwl %ax,%edx
c01001bf:	a1 40 ff 19 c0       	mov    0xc019ff40,%eax
c01001c4:	89 54 24 08          	mov    %edx,0x8(%esp)
c01001c8:	89 44 24 04          	mov    %eax,0x4(%esp)
c01001cc:	c7 04 24 2b d5 10 c0 	movl   $0xc010d52b,(%esp)
c01001d3:	e8 fe 15 00 00       	call   c01017d6 <cprintf>
    cprintf("%d:  ss = %x\n", round, reg4);
c01001d8:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c01001dc:	0f b7 d0             	movzwl %ax,%edx
c01001df:	a1 40 ff 19 c0       	mov    0xc019ff40,%eax
c01001e4:	89 54 24 08          	mov    %edx,0x8(%esp)
c01001e8:	89 44 24 04          	mov    %eax,0x4(%esp)
c01001ec:	c7 04 24 39 d5 10 c0 	movl   $0xc010d539,(%esp)
c01001f3:	e8 de 15 00 00       	call   c01017d6 <cprintf>
    round ++;
c01001f8:	a1 40 ff 19 c0       	mov    0xc019ff40,%eax
c01001fd:	83 c0 01             	add    $0x1,%eax
c0100200:	a3 40 ff 19 c0       	mov    %eax,0xc019ff40
}
c0100205:	c9                   	leave  
c0100206:	c3                   	ret    

c0100207 <lab1_switch_to_user>:

static void
lab1_switch_to_user(void) {
c0100207:	55                   	push   %ebp
c0100208:	89 e5                	mov    %esp,%ebp
    //LAB1 CHALLENGE 1 : TODO
}
c010020a:	5d                   	pop    %ebp
c010020b:	c3                   	ret    

c010020c <lab1_switch_to_kernel>:

static void
lab1_switch_to_kernel(void) {
c010020c:	55                   	push   %ebp
c010020d:	89 e5                	mov    %esp,%ebp
    //LAB1 CHALLENGE 1 :  TODO
}
c010020f:	5d                   	pop    %ebp
c0100210:	c3                   	ret    

c0100211 <lab1_switch_test>:

static void
lab1_switch_test(void) {
c0100211:	55                   	push   %ebp
c0100212:	89 e5                	mov    %esp,%ebp
c0100214:	83 ec 18             	sub    $0x18,%esp
    lab1_print_cur_status();
c0100217:	e8 25 ff ff ff       	call   c0100141 <lab1_print_cur_status>
    cprintf("+++ switch to  user  mode +++\n");
c010021c:	c7 04 24 48 d5 10 c0 	movl   $0xc010d548,(%esp)
c0100223:	e8 ae 15 00 00       	call   c01017d6 <cprintf>
    lab1_switch_to_user();
c0100228:	e8 da ff ff ff       	call   c0100207 <lab1_switch_to_user>
    lab1_print_cur_status();
c010022d:	e8 0f ff ff ff       	call   c0100141 <lab1_print_cur_status>
    cprintf("+++ switch to kernel mode +++\n");
c0100232:	c7 04 24 68 d5 10 c0 	movl   $0xc010d568,(%esp)
c0100239:	e8 98 15 00 00       	call   c01017d6 <cprintf>
    lab1_switch_to_kernel();
c010023e:	e8 c9 ff ff ff       	call   c010020c <lab1_switch_to_kernel>
    lab1_print_cur_status();
c0100243:	e8 f9 fe ff ff       	call   c0100141 <lab1_print_cur_status>
}
c0100248:	c9                   	leave  
c0100249:	c3                   	ret    

c010024a <rb_node_create>:
#include <rb_tree.h>
#include <assert.h>

/* rb_node_create - create a new rb_node */
static inline rb_node *
rb_node_create(void) {
c010024a:	55                   	push   %ebp
c010024b:	89 e5                	mov    %esp,%ebp
c010024d:	83 ec 18             	sub    $0x18,%esp
    return kmalloc(sizeof(rb_node));
c0100250:	c7 04 24 10 00 00 00 	movl   $0x10,(%esp)
c0100257:	e8 96 5e 00 00       	call   c01060f2 <kmalloc>
}
c010025c:	c9                   	leave  
c010025d:	c3                   	ret    

c010025e <rb_tree_empty>:

/* rb_tree_empty - tests if tree is empty */
static inline bool
rb_tree_empty(rb_tree *tree) {
c010025e:	55                   	push   %ebp
c010025f:	89 e5                	mov    %esp,%ebp
c0100261:	83 ec 10             	sub    $0x10,%esp
    rb_node *nil = tree->nil, *root = tree->root;
c0100264:	8b 45 08             	mov    0x8(%ebp),%eax
c0100267:	8b 40 04             	mov    0x4(%eax),%eax
c010026a:	89 45 fc             	mov    %eax,-0x4(%ebp)
c010026d:	8b 45 08             	mov    0x8(%ebp),%eax
c0100270:	8b 40 08             	mov    0x8(%eax),%eax
c0100273:	89 45 f8             	mov    %eax,-0x8(%ebp)
    return root->left == nil;
c0100276:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0100279:	8b 40 08             	mov    0x8(%eax),%eax
c010027c:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c010027f:	0f 94 c0             	sete   %al
c0100282:	0f b6 c0             	movzbl %al,%eax
}
c0100285:	c9                   	leave  
c0100286:	c3                   	ret    

c0100287 <rb_tree_create>:
 * Note that, root->left should always point to the node that is the root
 * of the tree. And nil points to a 'NULL' node which should always be
 * black and may have arbitrary children and parent node.
 * */
rb_tree *
rb_tree_create(int (*compare)(rb_node *node1, rb_node *node2)) {
c0100287:	55                   	push   %ebp
c0100288:	89 e5                	mov    %esp,%ebp
c010028a:	83 ec 28             	sub    $0x28,%esp
    assert(compare != NULL);
c010028d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0100291:	75 24                	jne    c01002b7 <rb_tree_create+0x30>
c0100293:	c7 44 24 0c 88 d5 10 	movl   $0xc010d588,0xc(%esp)
c010029a:	c0 
c010029b:	c7 44 24 08 98 d5 10 	movl   $0xc010d598,0x8(%esp)
c01002a2:	c0 
c01002a3:	c7 44 24 04 1f 00 00 	movl   $0x1f,0x4(%esp)
c01002aa:	00 
c01002ab:	c7 04 24 ad d5 10 c0 	movl   $0xc010d5ad,(%esp)
c01002b2:	e8 a1 1f 00 00       	call   c0102258 <__panic>

    rb_tree *tree;
    rb_node *nil, *root;

    if ((tree = kmalloc(sizeof(rb_tree))) == NULL) {
c01002b7:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
c01002be:	e8 2f 5e 00 00       	call   c01060f2 <kmalloc>
c01002c3:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01002c6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01002ca:	75 05                	jne    c01002d1 <rb_tree_create+0x4a>
        goto bad_tree;
c01002cc:	e9 ad 00 00 00       	jmp    c010037e <rb_tree_create+0xf7>
    }

    tree->compare = compare;
c01002d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01002d4:	8b 55 08             	mov    0x8(%ebp),%edx
c01002d7:	89 10                	mov    %edx,(%eax)

    if ((nil = rb_node_create()) == NULL) {
c01002d9:	e8 6c ff ff ff       	call   c010024a <rb_node_create>
c01002de:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01002e1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01002e5:	75 05                	jne    c01002ec <rb_tree_create+0x65>
        goto bad_node_cleanup_tree;
c01002e7:	e9 87 00 00 00       	jmp    c0100373 <rb_tree_create+0xec>
    }

    nil->parent = nil->left = nil->right = nil;
c01002ec:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01002ef:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01002f2:	89 50 0c             	mov    %edx,0xc(%eax)
c01002f5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01002f8:	8b 50 0c             	mov    0xc(%eax),%edx
c01002fb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01002fe:	89 50 08             	mov    %edx,0x8(%eax)
c0100301:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100304:	8b 50 08             	mov    0x8(%eax),%edx
c0100307:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010030a:	89 50 04             	mov    %edx,0x4(%eax)
    nil->red = 0;
c010030d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100310:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    tree->nil = nil;
c0100316:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100319:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010031c:	89 50 04             	mov    %edx,0x4(%eax)

    if ((root = rb_node_create()) == NULL) {
c010031f:	e8 26 ff ff ff       	call   c010024a <rb_node_create>
c0100324:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0100327:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010032b:	75 0e                	jne    c010033b <rb_tree_create+0xb4>
        goto bad_node_cleanup_nil;
c010032d:	90                   	nop
    root->red = 0;
    tree->root = root;
    return tree;

bad_node_cleanup_nil:
    kfree(nil);
c010032e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100331:	89 04 24             	mov    %eax,(%esp)
c0100334:	e8 d4 5d 00 00       	call   c010610d <kfree>
c0100339:	eb 38                	jmp    c0100373 <rb_tree_create+0xec>

    if ((root = rb_node_create()) == NULL) {
        goto bad_node_cleanup_nil;
    }

    root->parent = root->left = root->right = nil;
c010033b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010033e:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100341:	89 50 0c             	mov    %edx,0xc(%eax)
c0100344:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100347:	8b 50 0c             	mov    0xc(%eax),%edx
c010034a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010034d:	89 50 08             	mov    %edx,0x8(%eax)
c0100350:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100353:	8b 50 08             	mov    0x8(%eax),%edx
c0100356:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100359:	89 50 04             	mov    %edx,0x4(%eax)
    root->red = 0;
c010035c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010035f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    tree->root = root;
c0100365:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100368:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010036b:	89 50 08             	mov    %edx,0x8(%eax)
    return tree;
c010036e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100371:	eb 10                	jmp    c0100383 <rb_tree_create+0xfc>

bad_node_cleanup_nil:
    kfree(nil);
bad_node_cleanup_tree:
    kfree(tree);
c0100373:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100376:	89 04 24             	mov    %eax,(%esp)
c0100379:	e8 8f 5d 00 00       	call   c010610d <kfree>
bad_tree:
    return NULL;
c010037e:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100383:	c9                   	leave  
c0100384:	c3                   	ret    

c0100385 <rb_left_rotate>:
    y->_left = x;                                               \
    x->parent = y;                                              \
    assert(!(nil->red));                                        \
}

FUNC_ROTATE(rb_left_rotate, left, right);
c0100385:	55                   	push   %ebp
c0100386:	89 e5                	mov    %esp,%ebp
c0100388:	83 ec 28             	sub    $0x28,%esp
c010038b:	8b 45 08             	mov    0x8(%ebp),%eax
c010038e:	8b 40 04             	mov    0x4(%eax),%eax
c0100391:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0100394:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100397:	8b 40 0c             	mov    0xc(%eax),%eax
c010039a:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010039d:	8b 45 08             	mov    0x8(%ebp),%eax
c01003a0:	8b 40 08             	mov    0x8(%eax),%eax
c01003a3:	3b 45 0c             	cmp    0xc(%ebp),%eax
c01003a6:	74 10                	je     c01003b8 <rb_left_rotate+0x33>
c01003a8:	8b 45 0c             	mov    0xc(%ebp),%eax
c01003ab:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01003ae:	74 08                	je     c01003b8 <rb_left_rotate+0x33>
c01003b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01003b3:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01003b6:	75 24                	jne    c01003dc <rb_left_rotate+0x57>
c01003b8:	c7 44 24 0c c4 d5 10 	movl   $0xc010d5c4,0xc(%esp)
c01003bf:	c0 
c01003c0:	c7 44 24 08 98 d5 10 	movl   $0xc010d598,0x8(%esp)
c01003c7:	c0 
c01003c8:	c7 44 24 04 64 00 00 	movl   $0x64,0x4(%esp)
c01003cf:	00 
c01003d0:	c7 04 24 ad d5 10 c0 	movl   $0xc010d5ad,(%esp)
c01003d7:	e8 7c 1e 00 00       	call   c0102258 <__panic>
c01003dc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01003df:	8b 50 08             	mov    0x8(%eax),%edx
c01003e2:	8b 45 0c             	mov    0xc(%ebp),%eax
c01003e5:	89 50 0c             	mov    %edx,0xc(%eax)
c01003e8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01003eb:	8b 40 08             	mov    0x8(%eax),%eax
c01003ee:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01003f1:	74 0c                	je     c01003ff <rb_left_rotate+0x7a>
c01003f3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01003f6:	8b 40 08             	mov    0x8(%eax),%eax
c01003f9:	8b 55 0c             	mov    0xc(%ebp),%edx
c01003fc:	89 50 04             	mov    %edx,0x4(%eax)
c01003ff:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100402:	8b 50 04             	mov    0x4(%eax),%edx
c0100405:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100408:	89 50 04             	mov    %edx,0x4(%eax)
c010040b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010040e:	8b 40 04             	mov    0x4(%eax),%eax
c0100411:	8b 40 08             	mov    0x8(%eax),%eax
c0100414:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0100417:	75 0e                	jne    c0100427 <rb_left_rotate+0xa2>
c0100419:	8b 45 0c             	mov    0xc(%ebp),%eax
c010041c:	8b 40 04             	mov    0x4(%eax),%eax
c010041f:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100422:	89 50 08             	mov    %edx,0x8(%eax)
c0100425:	eb 0c                	jmp    c0100433 <rb_left_rotate+0xae>
c0100427:	8b 45 0c             	mov    0xc(%ebp),%eax
c010042a:	8b 40 04             	mov    0x4(%eax),%eax
c010042d:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100430:	89 50 0c             	mov    %edx,0xc(%eax)
c0100433:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100436:	8b 55 0c             	mov    0xc(%ebp),%edx
c0100439:	89 50 08             	mov    %edx,0x8(%eax)
c010043c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010043f:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100442:	89 50 04             	mov    %edx,0x4(%eax)
c0100445:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100448:	8b 00                	mov    (%eax),%eax
c010044a:	85 c0                	test   %eax,%eax
c010044c:	74 24                	je     c0100472 <rb_left_rotate+0xed>
c010044e:	c7 44 24 0c ec d5 10 	movl   $0xc010d5ec,0xc(%esp)
c0100455:	c0 
c0100456:	c7 44 24 08 98 d5 10 	movl   $0xc010d598,0x8(%esp)
c010045d:	c0 
c010045e:	c7 44 24 04 64 00 00 	movl   $0x64,0x4(%esp)
c0100465:	00 
c0100466:	c7 04 24 ad d5 10 c0 	movl   $0xc010d5ad,(%esp)
c010046d:	e8 e6 1d 00 00       	call   c0102258 <__panic>
c0100472:	c9                   	leave  
c0100473:	c3                   	ret    

c0100474 <rb_right_rotate>:
FUNC_ROTATE(rb_right_rotate, right, left);
c0100474:	55                   	push   %ebp
c0100475:	89 e5                	mov    %esp,%ebp
c0100477:	83 ec 28             	sub    $0x28,%esp
c010047a:	8b 45 08             	mov    0x8(%ebp),%eax
c010047d:	8b 40 04             	mov    0x4(%eax),%eax
c0100480:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0100483:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100486:	8b 40 08             	mov    0x8(%eax),%eax
c0100489:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010048c:	8b 45 08             	mov    0x8(%ebp),%eax
c010048f:	8b 40 08             	mov    0x8(%eax),%eax
c0100492:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0100495:	74 10                	je     c01004a7 <rb_right_rotate+0x33>
c0100497:	8b 45 0c             	mov    0xc(%ebp),%eax
c010049a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c010049d:	74 08                	je     c01004a7 <rb_right_rotate+0x33>
c010049f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01004a2:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01004a5:	75 24                	jne    c01004cb <rb_right_rotate+0x57>
c01004a7:	c7 44 24 0c c4 d5 10 	movl   $0xc010d5c4,0xc(%esp)
c01004ae:	c0 
c01004af:	c7 44 24 08 98 d5 10 	movl   $0xc010d598,0x8(%esp)
c01004b6:	c0 
c01004b7:	c7 44 24 04 65 00 00 	movl   $0x65,0x4(%esp)
c01004be:	00 
c01004bf:	c7 04 24 ad d5 10 c0 	movl   $0xc010d5ad,(%esp)
c01004c6:	e8 8d 1d 00 00       	call   c0102258 <__panic>
c01004cb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01004ce:	8b 50 0c             	mov    0xc(%eax),%edx
c01004d1:	8b 45 0c             	mov    0xc(%ebp),%eax
c01004d4:	89 50 08             	mov    %edx,0x8(%eax)
c01004d7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01004da:	8b 40 0c             	mov    0xc(%eax),%eax
c01004dd:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01004e0:	74 0c                	je     c01004ee <rb_right_rotate+0x7a>
c01004e2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01004e5:	8b 40 0c             	mov    0xc(%eax),%eax
c01004e8:	8b 55 0c             	mov    0xc(%ebp),%edx
c01004eb:	89 50 04             	mov    %edx,0x4(%eax)
c01004ee:	8b 45 0c             	mov    0xc(%ebp),%eax
c01004f1:	8b 50 04             	mov    0x4(%eax),%edx
c01004f4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01004f7:	89 50 04             	mov    %edx,0x4(%eax)
c01004fa:	8b 45 0c             	mov    0xc(%ebp),%eax
c01004fd:	8b 40 04             	mov    0x4(%eax),%eax
c0100500:	8b 40 0c             	mov    0xc(%eax),%eax
c0100503:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0100506:	75 0e                	jne    c0100516 <rb_right_rotate+0xa2>
c0100508:	8b 45 0c             	mov    0xc(%ebp),%eax
c010050b:	8b 40 04             	mov    0x4(%eax),%eax
c010050e:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100511:	89 50 0c             	mov    %edx,0xc(%eax)
c0100514:	eb 0c                	jmp    c0100522 <rb_right_rotate+0xae>
c0100516:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100519:	8b 40 04             	mov    0x4(%eax),%eax
c010051c:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010051f:	89 50 08             	mov    %edx,0x8(%eax)
c0100522:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100525:	8b 55 0c             	mov    0xc(%ebp),%edx
c0100528:	89 50 0c             	mov    %edx,0xc(%eax)
c010052b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010052e:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100531:	89 50 04             	mov    %edx,0x4(%eax)
c0100534:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100537:	8b 00                	mov    (%eax),%eax
c0100539:	85 c0                	test   %eax,%eax
c010053b:	74 24                	je     c0100561 <rb_right_rotate+0xed>
c010053d:	c7 44 24 0c ec d5 10 	movl   $0xc010d5ec,0xc(%esp)
c0100544:	c0 
c0100545:	c7 44 24 08 98 d5 10 	movl   $0xc010d598,0x8(%esp)
c010054c:	c0 
c010054d:	c7 44 24 04 65 00 00 	movl   $0x65,0x4(%esp)
c0100554:	00 
c0100555:	c7 04 24 ad d5 10 c0 	movl   $0xc010d5ad,(%esp)
c010055c:	e8 f7 1c 00 00       	call   c0102258 <__panic>
c0100561:	c9                   	leave  
c0100562:	c3                   	ret    

c0100563 <rb_insert_binary>:
 * rb_insert_binary - insert @node to red-black @tree as if it were
 * a regular binary tree. This function is only intended to be called
 * by function rb_insert.
 * */
static inline void
rb_insert_binary(rb_tree *tree, rb_node *node) {
c0100563:	55                   	push   %ebp
c0100564:	89 e5                	mov    %esp,%ebp
c0100566:	83 ec 38             	sub    $0x38,%esp
    rb_node *x, *y, *z = node, *nil = tree->nil, *root = tree->root;
c0100569:	8b 45 0c             	mov    0xc(%ebp),%eax
c010056c:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010056f:	8b 45 08             	mov    0x8(%ebp),%eax
c0100572:	8b 40 04             	mov    0x4(%eax),%eax
c0100575:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0100578:	8b 45 08             	mov    0x8(%ebp),%eax
c010057b:	8b 40 08             	mov    0x8(%eax),%eax
c010057e:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    z->left = z->right = nil;
c0100581:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100584:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0100587:	89 50 0c             	mov    %edx,0xc(%eax)
c010058a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010058d:	8b 50 0c             	mov    0xc(%eax),%edx
c0100590:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100593:	89 50 08             	mov    %edx,0x8(%eax)
    y = root, x = y->left;
c0100596:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0100599:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010059c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010059f:	8b 40 08             	mov    0x8(%eax),%eax
c01005a2:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (x != nil) {
c01005a5:	eb 2f                	jmp    c01005d6 <rb_insert_binary+0x73>
        y = x;
c01005a7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01005aa:	89 45 f0             	mov    %eax,-0x10(%ebp)
        x = (COMPARE(tree, x, node) > 0) ? x->left : x->right;
c01005ad:	8b 45 08             	mov    0x8(%ebp),%eax
c01005b0:	8b 00                	mov    (%eax),%eax
c01005b2:	8b 55 0c             	mov    0xc(%ebp),%edx
c01005b5:	89 54 24 04          	mov    %edx,0x4(%esp)
c01005b9:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01005bc:	89 14 24             	mov    %edx,(%esp)
c01005bf:	ff d0                	call   *%eax
c01005c1:	85 c0                	test   %eax,%eax
c01005c3:	7e 08                	jle    c01005cd <rb_insert_binary+0x6a>
c01005c5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01005c8:	8b 40 08             	mov    0x8(%eax),%eax
c01005cb:	eb 06                	jmp    c01005d3 <rb_insert_binary+0x70>
c01005cd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01005d0:	8b 40 0c             	mov    0xc(%eax),%eax
c01005d3:	89 45 f4             	mov    %eax,-0xc(%ebp)
rb_insert_binary(rb_tree *tree, rb_node *node) {
    rb_node *x, *y, *z = node, *nil = tree->nil, *root = tree->root;

    z->left = z->right = nil;
    y = root, x = y->left;
    while (x != nil) {
c01005d6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01005d9:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c01005dc:	75 c9                	jne    c01005a7 <rb_insert_binary+0x44>
        y = x;
        x = (COMPARE(tree, x, node) > 0) ? x->left : x->right;
    }
    z->parent = y;
c01005de:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01005e1:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01005e4:	89 50 04             	mov    %edx,0x4(%eax)
    if (y == root || COMPARE(tree, y, z) > 0) {
c01005e7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01005ea:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
c01005ed:	74 18                	je     c0100607 <rb_insert_binary+0xa4>
c01005ef:	8b 45 08             	mov    0x8(%ebp),%eax
c01005f2:	8b 00                	mov    (%eax),%eax
c01005f4:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01005f7:	89 54 24 04          	mov    %edx,0x4(%esp)
c01005fb:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01005fe:	89 14 24             	mov    %edx,(%esp)
c0100601:	ff d0                	call   *%eax
c0100603:	85 c0                	test   %eax,%eax
c0100605:	7e 0b                	jle    c0100612 <rb_insert_binary+0xaf>
        y->left = z;
c0100607:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010060a:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010060d:	89 50 08             	mov    %edx,0x8(%eax)
c0100610:	eb 09                	jmp    c010061b <rb_insert_binary+0xb8>
    }
    else {
        y->right = z;
c0100612:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100615:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0100618:	89 50 0c             	mov    %edx,0xc(%eax)
    }
}
c010061b:	c9                   	leave  
c010061c:	c3                   	ret    

c010061d <rb_insert>:

/* rb_insert - insert a node to red-black tree */
void
rb_insert(rb_tree *tree, rb_node *node) {
c010061d:	55                   	push   %ebp
c010061e:	89 e5                	mov    %esp,%ebp
c0100620:	83 ec 28             	sub    $0x28,%esp
    rb_insert_binary(tree, node);
c0100623:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100626:	89 44 24 04          	mov    %eax,0x4(%esp)
c010062a:	8b 45 08             	mov    0x8(%ebp),%eax
c010062d:	89 04 24             	mov    %eax,(%esp)
c0100630:	e8 2e ff ff ff       	call   c0100563 <rb_insert_binary>
    node->red = 1;
c0100635:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100638:	c7 00 01 00 00 00    	movl   $0x1,(%eax)

    rb_node *x = node, *y;
c010063e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100641:	89 45 f4             	mov    %eax,-0xc(%ebp)
            x->parent->parent->red = 1;                         \
            rb_##_right##_rotate(tree, x->parent->parent);      \
        }                                                       \
    } while (0)

    while (x->parent->red) {
c0100644:	e9 6e 01 00 00       	jmp    c01007b7 <rb_insert+0x19a>
        if (x->parent == x->parent->parent->left) {
c0100649:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010064c:	8b 50 04             	mov    0x4(%eax),%edx
c010064f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100652:	8b 40 04             	mov    0x4(%eax),%eax
c0100655:	8b 40 04             	mov    0x4(%eax),%eax
c0100658:	8b 40 08             	mov    0x8(%eax),%eax
c010065b:	39 c2                	cmp    %eax,%edx
c010065d:	0f 85 ae 00 00 00    	jne    c0100711 <rb_insert+0xf4>
            RB_INSERT_SUB(left, right);
c0100663:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100666:	8b 40 04             	mov    0x4(%eax),%eax
c0100669:	8b 40 04             	mov    0x4(%eax),%eax
c010066c:	8b 40 0c             	mov    0xc(%eax),%eax
c010066f:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0100672:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100675:	8b 00                	mov    (%eax),%eax
c0100677:	85 c0                	test   %eax,%eax
c0100679:	74 35                	je     c01006b0 <rb_insert+0x93>
c010067b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010067e:	8b 40 04             	mov    0x4(%eax),%eax
c0100681:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c0100687:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010068a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c0100690:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100693:	8b 40 04             	mov    0x4(%eax),%eax
c0100696:	8b 40 04             	mov    0x4(%eax),%eax
c0100699:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
c010069f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01006a2:	8b 40 04             	mov    0x4(%eax),%eax
c01006a5:	8b 40 04             	mov    0x4(%eax),%eax
c01006a8:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01006ab:	e9 07 01 00 00       	jmp    c01007b7 <rb_insert+0x19a>
c01006b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01006b3:	8b 40 04             	mov    0x4(%eax),%eax
c01006b6:	8b 40 0c             	mov    0xc(%eax),%eax
c01006b9:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01006bc:	75 1b                	jne    c01006d9 <rb_insert+0xbc>
c01006be:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01006c1:	8b 40 04             	mov    0x4(%eax),%eax
c01006c4:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01006c7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01006ca:	89 44 24 04          	mov    %eax,0x4(%esp)
c01006ce:	8b 45 08             	mov    0x8(%ebp),%eax
c01006d1:	89 04 24             	mov    %eax,(%esp)
c01006d4:	e8 ac fc ff ff       	call   c0100385 <rb_left_rotate>
c01006d9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01006dc:	8b 40 04             	mov    0x4(%eax),%eax
c01006df:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c01006e5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01006e8:	8b 40 04             	mov    0x4(%eax),%eax
c01006eb:	8b 40 04             	mov    0x4(%eax),%eax
c01006ee:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
c01006f4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01006f7:	8b 40 04             	mov    0x4(%eax),%eax
c01006fa:	8b 40 04             	mov    0x4(%eax),%eax
c01006fd:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100701:	8b 45 08             	mov    0x8(%ebp),%eax
c0100704:	89 04 24             	mov    %eax,(%esp)
c0100707:	e8 68 fd ff ff       	call   c0100474 <rb_right_rotate>
c010070c:	e9 a6 00 00 00       	jmp    c01007b7 <rb_insert+0x19a>
        }
        else {
            RB_INSERT_SUB(right, left);
c0100711:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100714:	8b 40 04             	mov    0x4(%eax),%eax
c0100717:	8b 40 04             	mov    0x4(%eax),%eax
c010071a:	8b 40 08             	mov    0x8(%eax),%eax
c010071d:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0100720:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100723:	8b 00                	mov    (%eax),%eax
c0100725:	85 c0                	test   %eax,%eax
c0100727:	74 32                	je     c010075b <rb_insert+0x13e>
c0100729:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010072c:	8b 40 04             	mov    0x4(%eax),%eax
c010072f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c0100735:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100738:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c010073e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100741:	8b 40 04             	mov    0x4(%eax),%eax
c0100744:	8b 40 04             	mov    0x4(%eax),%eax
c0100747:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
c010074d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100750:	8b 40 04             	mov    0x4(%eax),%eax
c0100753:	8b 40 04             	mov    0x4(%eax),%eax
c0100756:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0100759:	eb 5c                	jmp    c01007b7 <rb_insert+0x19a>
c010075b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010075e:	8b 40 04             	mov    0x4(%eax),%eax
c0100761:	8b 40 08             	mov    0x8(%eax),%eax
c0100764:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0100767:	75 1b                	jne    c0100784 <rb_insert+0x167>
c0100769:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010076c:	8b 40 04             	mov    0x4(%eax),%eax
c010076f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0100772:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100775:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100779:	8b 45 08             	mov    0x8(%ebp),%eax
c010077c:	89 04 24             	mov    %eax,(%esp)
c010077f:	e8 f0 fc ff ff       	call   c0100474 <rb_right_rotate>
c0100784:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100787:	8b 40 04             	mov    0x4(%eax),%eax
c010078a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c0100790:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100793:	8b 40 04             	mov    0x4(%eax),%eax
c0100796:	8b 40 04             	mov    0x4(%eax),%eax
c0100799:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
c010079f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01007a2:	8b 40 04             	mov    0x4(%eax),%eax
c01007a5:	8b 40 04             	mov    0x4(%eax),%eax
c01007a8:	89 44 24 04          	mov    %eax,0x4(%esp)
c01007ac:	8b 45 08             	mov    0x8(%ebp),%eax
c01007af:	89 04 24             	mov    %eax,(%esp)
c01007b2:	e8 ce fb ff ff       	call   c0100385 <rb_left_rotate>
            x->parent->parent->red = 1;                         \
            rb_##_right##_rotate(tree, x->parent->parent);      \
        }                                                       \
    } while (0)

    while (x->parent->red) {
c01007b7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01007ba:	8b 40 04             	mov    0x4(%eax),%eax
c01007bd:	8b 00                	mov    (%eax),%eax
c01007bf:	85 c0                	test   %eax,%eax
c01007c1:	0f 85 82 fe ff ff    	jne    c0100649 <rb_insert+0x2c>
        }
        else {
            RB_INSERT_SUB(right, left);
        }
    }
    tree->root->left->red = 0;
c01007c7:	8b 45 08             	mov    0x8(%ebp),%eax
c01007ca:	8b 40 08             	mov    0x8(%eax),%eax
c01007cd:	8b 40 08             	mov    0x8(%eax),%eax
c01007d0:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    assert(!(tree->nil->red) && !(tree->root->red));
c01007d6:	8b 45 08             	mov    0x8(%ebp),%eax
c01007d9:	8b 40 04             	mov    0x4(%eax),%eax
c01007dc:	8b 00                	mov    (%eax),%eax
c01007de:	85 c0                	test   %eax,%eax
c01007e0:	75 0c                	jne    c01007ee <rb_insert+0x1d1>
c01007e2:	8b 45 08             	mov    0x8(%ebp),%eax
c01007e5:	8b 40 08             	mov    0x8(%eax),%eax
c01007e8:	8b 00                	mov    (%eax),%eax
c01007ea:	85 c0                	test   %eax,%eax
c01007ec:	74 24                	je     c0100812 <rb_insert+0x1f5>
c01007ee:	c7 44 24 0c f8 d5 10 	movl   $0xc010d5f8,0xc(%esp)
c01007f5:	c0 
c01007f6:	c7 44 24 08 98 d5 10 	movl   $0xc010d598,0x8(%esp)
c01007fd:	c0 
c01007fe:	c7 44 24 04 a9 00 00 	movl   $0xa9,0x4(%esp)
c0100805:	00 
c0100806:	c7 04 24 ad d5 10 c0 	movl   $0xc010d5ad,(%esp)
c010080d:	e8 46 1a 00 00       	call   c0102258 <__panic>

#undef RB_INSERT_SUB
}
c0100812:	c9                   	leave  
c0100813:	c3                   	ret    

c0100814 <rb_tree_successor>:
 * rb_tree_successor - returns the successor of @node, or nil
 * if no successor exists. Make sure that @node must belong to @tree,
 * and this function should only be called by rb_node_prev.
 * */
static inline rb_node *
rb_tree_successor(rb_tree *tree, rb_node *node) {
c0100814:	55                   	push   %ebp
c0100815:	89 e5                	mov    %esp,%ebp
c0100817:	83 ec 10             	sub    $0x10,%esp
    rb_node *x = node, *y, *nil = tree->nil;
c010081a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010081d:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0100820:	8b 45 08             	mov    0x8(%ebp),%eax
c0100823:	8b 40 04             	mov    0x4(%eax),%eax
c0100826:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if ((y = x->right) != nil) {
c0100829:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010082c:	8b 40 0c             	mov    0xc(%eax),%eax
c010082f:	89 45 f8             	mov    %eax,-0x8(%ebp)
c0100832:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0100835:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0100838:	74 1b                	je     c0100855 <rb_tree_successor+0x41>
        while (y->left != nil) {
c010083a:	eb 09                	jmp    c0100845 <rb_tree_successor+0x31>
            y = y->left;
c010083c:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010083f:	8b 40 08             	mov    0x8(%eax),%eax
c0100842:	89 45 f8             	mov    %eax,-0x8(%ebp)
static inline rb_node *
rb_tree_successor(rb_tree *tree, rb_node *node) {
    rb_node *x = node, *y, *nil = tree->nil;

    if ((y = x->right) != nil) {
        while (y->left != nil) {
c0100845:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0100848:	8b 40 08             	mov    0x8(%eax),%eax
c010084b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c010084e:	75 ec                	jne    c010083c <rb_tree_successor+0x28>
            y = y->left;
        }
        return y;
c0100850:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0100853:	eb 38                	jmp    c010088d <rb_tree_successor+0x79>
    }
    else {
        y = x->parent;
c0100855:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0100858:	8b 40 04             	mov    0x4(%eax),%eax
c010085b:	89 45 f8             	mov    %eax,-0x8(%ebp)
        while (x == y->right) {
c010085e:	eb 0f                	jmp    c010086f <rb_tree_successor+0x5b>
            x = y, y = y->parent;
c0100860:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0100863:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0100866:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0100869:	8b 40 04             	mov    0x4(%eax),%eax
c010086c:	89 45 f8             	mov    %eax,-0x8(%ebp)
        }
        return y;
    }
    else {
        y = x->parent;
        while (x == y->right) {
c010086f:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0100872:	8b 40 0c             	mov    0xc(%eax),%eax
c0100875:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0100878:	74 e6                	je     c0100860 <rb_tree_successor+0x4c>
            x = y, y = y->parent;
        }
        if (y == tree->root) {
c010087a:	8b 45 08             	mov    0x8(%ebp),%eax
c010087d:	8b 40 08             	mov    0x8(%eax),%eax
c0100880:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c0100883:	75 05                	jne    c010088a <rb_tree_successor+0x76>
            return nil;
c0100885:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100888:	eb 03                	jmp    c010088d <rb_tree_successor+0x79>
        }
        return y;
c010088a:	8b 45 f8             	mov    -0x8(%ebp),%eax
    }
}
c010088d:	c9                   	leave  
c010088e:	c3                   	ret    

c010088f <rb_tree_predecessor>:
/* *
 * rb_tree_predecessor - returns the predecessor of @node, or nil
 * if no predecessor exists, likes rb_tree_successor.
 * */
static inline rb_node *
rb_tree_predecessor(rb_tree *tree, rb_node *node) {
c010088f:	55                   	push   %ebp
c0100890:	89 e5                	mov    %esp,%ebp
c0100892:	83 ec 10             	sub    $0x10,%esp
    rb_node *x = node, *y, *nil = tree->nil;
c0100895:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100898:	89 45 fc             	mov    %eax,-0x4(%ebp)
c010089b:	8b 45 08             	mov    0x8(%ebp),%eax
c010089e:	8b 40 04             	mov    0x4(%eax),%eax
c01008a1:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if ((y = x->left) != nil) {
c01008a4:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01008a7:	8b 40 08             	mov    0x8(%eax),%eax
c01008aa:	89 45 f8             	mov    %eax,-0x8(%ebp)
c01008ad:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01008b0:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01008b3:	74 1b                	je     c01008d0 <rb_tree_predecessor+0x41>
        while (y->right != nil) {
c01008b5:	eb 09                	jmp    c01008c0 <rb_tree_predecessor+0x31>
            y = y->right;
c01008b7:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01008ba:	8b 40 0c             	mov    0xc(%eax),%eax
c01008bd:	89 45 f8             	mov    %eax,-0x8(%ebp)
static inline rb_node *
rb_tree_predecessor(rb_tree *tree, rb_node *node) {
    rb_node *x = node, *y, *nil = tree->nil;

    if ((y = x->left) != nil) {
        while (y->right != nil) {
c01008c0:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01008c3:	8b 40 0c             	mov    0xc(%eax),%eax
c01008c6:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01008c9:	75 ec                	jne    c01008b7 <rb_tree_predecessor+0x28>
            y = y->right;
        }
        return y;
c01008cb:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01008ce:	eb 38                	jmp    c0100908 <rb_tree_predecessor+0x79>
    }
    else {
        y = x->parent;
c01008d0:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01008d3:	8b 40 04             	mov    0x4(%eax),%eax
c01008d6:	89 45 f8             	mov    %eax,-0x8(%ebp)
        while (x == y->left) {
c01008d9:	eb 1f                	jmp    c01008fa <rb_tree_predecessor+0x6b>
            if (y == tree->root) {
c01008db:	8b 45 08             	mov    0x8(%ebp),%eax
c01008de:	8b 40 08             	mov    0x8(%eax),%eax
c01008e1:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c01008e4:	75 05                	jne    c01008eb <rb_tree_predecessor+0x5c>
                return nil;
c01008e6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01008e9:	eb 1d                	jmp    c0100908 <rb_tree_predecessor+0x79>
            }
            x = y, y = y->parent;
c01008eb:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01008ee:	89 45 fc             	mov    %eax,-0x4(%ebp)
c01008f1:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01008f4:	8b 40 04             	mov    0x4(%eax),%eax
c01008f7:	89 45 f8             	mov    %eax,-0x8(%ebp)
        }
        return y;
    }
    else {
        y = x->parent;
        while (x == y->left) {
c01008fa:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01008fd:	8b 40 08             	mov    0x8(%eax),%eax
c0100900:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0100903:	74 d6                	je     c01008db <rb_tree_predecessor+0x4c>
            if (y == tree->root) {
                return nil;
            }
            x = y, y = y->parent;
        }
        return y;
c0100905:	8b 45 f8             	mov    -0x8(%ebp),%eax
    }
}
c0100908:	c9                   	leave  
c0100909:	c3                   	ret    

c010090a <rb_search>:
 * rb_search - returns a node with value 'equal' to @key (according to
 * function @compare). If there're multiple nodes with value 'equal' to @key,
 * the functions returns the one highest in the tree.
 * */
rb_node *
rb_search(rb_tree *tree, int (*compare)(rb_node *node, void *key), void *key) {
c010090a:	55                   	push   %ebp
c010090b:	89 e5                	mov    %esp,%ebp
c010090d:	83 ec 28             	sub    $0x28,%esp
    rb_node *nil = tree->nil, *node = tree->root->left;
c0100910:	8b 45 08             	mov    0x8(%ebp),%eax
c0100913:	8b 40 04             	mov    0x4(%eax),%eax
c0100916:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0100919:	8b 45 08             	mov    0x8(%ebp),%eax
c010091c:	8b 40 08             	mov    0x8(%eax),%eax
c010091f:	8b 40 08             	mov    0x8(%eax),%eax
c0100922:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int r;
    while (node != nil && (r = compare(node, key)) != 0) {
c0100925:	eb 17                	jmp    c010093e <rb_search+0x34>
        node = (r > 0) ? node->left : node->right;
c0100927:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010092b:	7e 08                	jle    c0100935 <rb_search+0x2b>
c010092d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100930:	8b 40 08             	mov    0x8(%eax),%eax
c0100933:	eb 06                	jmp    c010093b <rb_search+0x31>
c0100935:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100938:	8b 40 0c             	mov    0xc(%eax),%eax
c010093b:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * */
rb_node *
rb_search(rb_tree *tree, int (*compare)(rb_node *node, void *key), void *key) {
    rb_node *nil = tree->nil, *node = tree->root->left;
    int r;
    while (node != nil && (r = compare(node, key)) != 0) {
c010093e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100941:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0100944:	74 1b                	je     c0100961 <rb_search+0x57>
c0100946:	8b 45 10             	mov    0x10(%ebp),%eax
c0100949:	89 44 24 04          	mov    %eax,0x4(%esp)
c010094d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100950:	89 04 24             	mov    %eax,(%esp)
c0100953:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100956:	ff d0                	call   *%eax
c0100958:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010095b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010095f:	75 c6                	jne    c0100927 <rb_search+0x1d>
        node = (r > 0) ? node->left : node->right;
    }
    return (node != nil) ? node : NULL;
c0100961:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100964:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0100967:	74 05                	je     c010096e <rb_search+0x64>
c0100969:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010096c:	eb 05                	jmp    c0100973 <rb_search+0x69>
c010096e:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100973:	c9                   	leave  
c0100974:	c3                   	ret    

c0100975 <rb_delete_fixup>:
/* *
 * rb_delete_fixup - performs rotations and changes colors to restore
 * red-black properties after a node is deleted.
 * */
static void
rb_delete_fixup(rb_tree *tree, rb_node *node) {
c0100975:	55                   	push   %ebp
c0100976:	89 e5                	mov    %esp,%ebp
c0100978:	83 ec 28             	sub    $0x28,%esp
    rb_node *x = node, *w, *root = tree->root->left;
c010097b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010097e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0100981:	8b 45 08             	mov    0x8(%ebp),%eax
c0100984:	8b 40 08             	mov    0x8(%eax),%eax
c0100987:	8b 40 08             	mov    0x8(%eax),%eax
c010098a:	89 45 ec             	mov    %eax,-0x14(%ebp)
            rb_##_left##_rotate(tree, x->parent);               \
            x = root;                                           \
        }                                                       \
    } while (0)

    while (x != root && !x->red) {
c010098d:	e9 06 02 00 00       	jmp    c0100b98 <rb_delete_fixup+0x223>
        if (x == x->parent->left) {
c0100992:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100995:	8b 40 04             	mov    0x4(%eax),%eax
c0100998:	8b 40 08             	mov    0x8(%eax),%eax
c010099b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c010099e:	0f 85 fe 00 00 00    	jne    c0100aa2 <rb_delete_fixup+0x12d>
            RB_DELETE_FIXUP_SUB(left, right);
c01009a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01009a7:	8b 40 04             	mov    0x4(%eax),%eax
c01009aa:	8b 40 0c             	mov    0xc(%eax),%eax
c01009ad:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01009b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01009b3:	8b 00                	mov    (%eax),%eax
c01009b5:	85 c0                	test   %eax,%eax
c01009b7:	74 36                	je     c01009ef <rb_delete_fixup+0x7a>
c01009b9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01009bc:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c01009c2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01009c5:	8b 40 04             	mov    0x4(%eax),%eax
c01009c8:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
c01009ce:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01009d1:	8b 40 04             	mov    0x4(%eax),%eax
c01009d4:	89 44 24 04          	mov    %eax,0x4(%esp)
c01009d8:	8b 45 08             	mov    0x8(%ebp),%eax
c01009db:	89 04 24             	mov    %eax,(%esp)
c01009de:	e8 a2 f9 ff ff       	call   c0100385 <rb_left_rotate>
c01009e3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01009e6:	8b 40 04             	mov    0x4(%eax),%eax
c01009e9:	8b 40 0c             	mov    0xc(%eax),%eax
c01009ec:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01009ef:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01009f2:	8b 40 08             	mov    0x8(%eax),%eax
c01009f5:	8b 00                	mov    (%eax),%eax
c01009f7:	85 c0                	test   %eax,%eax
c01009f9:	75 23                	jne    c0100a1e <rb_delete_fixup+0xa9>
c01009fb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01009fe:	8b 40 0c             	mov    0xc(%eax),%eax
c0100a01:	8b 00                	mov    (%eax),%eax
c0100a03:	85 c0                	test   %eax,%eax
c0100a05:	75 17                	jne    c0100a1e <rb_delete_fixup+0xa9>
c0100a07:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100a0a:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
c0100a10:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100a13:	8b 40 04             	mov    0x4(%eax),%eax
c0100a16:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0100a19:	e9 7a 01 00 00       	jmp    c0100b98 <rb_delete_fixup+0x223>
c0100a1e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100a21:	8b 40 0c             	mov    0xc(%eax),%eax
c0100a24:	8b 00                	mov    (%eax),%eax
c0100a26:	85 c0                	test   %eax,%eax
c0100a28:	75 33                	jne    c0100a5d <rb_delete_fixup+0xe8>
c0100a2a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100a2d:	8b 40 08             	mov    0x8(%eax),%eax
c0100a30:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c0100a36:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100a39:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
c0100a3f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100a42:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100a46:	8b 45 08             	mov    0x8(%ebp),%eax
c0100a49:	89 04 24             	mov    %eax,(%esp)
c0100a4c:	e8 23 fa ff ff       	call   c0100474 <rb_right_rotate>
c0100a51:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100a54:	8b 40 04             	mov    0x4(%eax),%eax
c0100a57:	8b 40 0c             	mov    0xc(%eax),%eax
c0100a5a:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0100a5d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100a60:	8b 40 04             	mov    0x4(%eax),%eax
c0100a63:	8b 10                	mov    (%eax),%edx
c0100a65:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100a68:	89 10                	mov    %edx,(%eax)
c0100a6a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100a6d:	8b 40 04             	mov    0x4(%eax),%eax
c0100a70:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c0100a76:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100a79:	8b 40 0c             	mov    0xc(%eax),%eax
c0100a7c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c0100a82:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100a85:	8b 40 04             	mov    0x4(%eax),%eax
c0100a88:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100a8c:	8b 45 08             	mov    0x8(%ebp),%eax
c0100a8f:	89 04 24             	mov    %eax,(%esp)
c0100a92:	e8 ee f8 ff ff       	call   c0100385 <rb_left_rotate>
c0100a97:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100a9a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0100a9d:	e9 f6 00 00 00       	jmp    c0100b98 <rb_delete_fixup+0x223>
        }
        else {
            RB_DELETE_FIXUP_SUB(right, left);
c0100aa2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100aa5:	8b 40 04             	mov    0x4(%eax),%eax
c0100aa8:	8b 40 08             	mov    0x8(%eax),%eax
c0100aab:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0100aae:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100ab1:	8b 00                	mov    (%eax),%eax
c0100ab3:	85 c0                	test   %eax,%eax
c0100ab5:	74 36                	je     c0100aed <rb_delete_fixup+0x178>
c0100ab7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100aba:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c0100ac0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100ac3:	8b 40 04             	mov    0x4(%eax),%eax
c0100ac6:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
c0100acc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100acf:	8b 40 04             	mov    0x4(%eax),%eax
c0100ad2:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100ad6:	8b 45 08             	mov    0x8(%ebp),%eax
c0100ad9:	89 04 24             	mov    %eax,(%esp)
c0100adc:	e8 93 f9 ff ff       	call   c0100474 <rb_right_rotate>
c0100ae1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100ae4:	8b 40 04             	mov    0x4(%eax),%eax
c0100ae7:	8b 40 08             	mov    0x8(%eax),%eax
c0100aea:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0100aed:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100af0:	8b 40 0c             	mov    0xc(%eax),%eax
c0100af3:	8b 00                	mov    (%eax),%eax
c0100af5:	85 c0                	test   %eax,%eax
c0100af7:	75 20                	jne    c0100b19 <rb_delete_fixup+0x1a4>
c0100af9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100afc:	8b 40 08             	mov    0x8(%eax),%eax
c0100aff:	8b 00                	mov    (%eax),%eax
c0100b01:	85 c0                	test   %eax,%eax
c0100b03:	75 14                	jne    c0100b19 <rb_delete_fixup+0x1a4>
c0100b05:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100b08:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
c0100b0e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100b11:	8b 40 04             	mov    0x4(%eax),%eax
c0100b14:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0100b17:	eb 7f                	jmp    c0100b98 <rb_delete_fixup+0x223>
c0100b19:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100b1c:	8b 40 08             	mov    0x8(%eax),%eax
c0100b1f:	8b 00                	mov    (%eax),%eax
c0100b21:	85 c0                	test   %eax,%eax
c0100b23:	75 33                	jne    c0100b58 <rb_delete_fixup+0x1e3>
c0100b25:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100b28:	8b 40 0c             	mov    0xc(%eax),%eax
c0100b2b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c0100b31:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100b34:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
c0100b3a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100b3d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100b41:	8b 45 08             	mov    0x8(%ebp),%eax
c0100b44:	89 04 24             	mov    %eax,(%esp)
c0100b47:	e8 39 f8 ff ff       	call   c0100385 <rb_left_rotate>
c0100b4c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100b4f:	8b 40 04             	mov    0x4(%eax),%eax
c0100b52:	8b 40 08             	mov    0x8(%eax),%eax
c0100b55:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0100b58:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100b5b:	8b 40 04             	mov    0x4(%eax),%eax
c0100b5e:	8b 10                	mov    (%eax),%edx
c0100b60:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100b63:	89 10                	mov    %edx,(%eax)
c0100b65:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100b68:	8b 40 04             	mov    0x4(%eax),%eax
c0100b6b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c0100b71:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100b74:	8b 40 08             	mov    0x8(%eax),%eax
c0100b77:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c0100b7d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100b80:	8b 40 04             	mov    0x4(%eax),%eax
c0100b83:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100b87:	8b 45 08             	mov    0x8(%ebp),%eax
c0100b8a:	89 04 24             	mov    %eax,(%esp)
c0100b8d:	e8 e2 f8 ff ff       	call   c0100474 <rb_right_rotate>
c0100b92:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100b95:	89 45 f4             	mov    %eax,-0xc(%ebp)
            rb_##_left##_rotate(tree, x->parent);               \
            x = root;                                           \
        }                                                       \
    } while (0)

    while (x != root && !x->red) {
c0100b98:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100b9b:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0100b9e:	74 0d                	je     c0100bad <rb_delete_fixup+0x238>
c0100ba0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100ba3:	8b 00                	mov    (%eax),%eax
c0100ba5:	85 c0                	test   %eax,%eax
c0100ba7:	0f 84 e5 fd ff ff    	je     c0100992 <rb_delete_fixup+0x1d>
        }
        else {
            RB_DELETE_FIXUP_SUB(right, left);
        }
    }
    x->red = 0;
c0100bad:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100bb0:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

#undef RB_DELETE_FIXUP_SUB
}
c0100bb6:	c9                   	leave  
c0100bb7:	c3                   	ret    

c0100bb8 <rb_delete>:
/* *
 * rb_delete - deletes @node from @tree, and calls rb_delete_fixup to
 * restore red-black properties.
 * */
void
rb_delete(rb_tree *tree, rb_node *node) {
c0100bb8:	55                   	push   %ebp
c0100bb9:	89 e5                	mov    %esp,%ebp
c0100bbb:	83 ec 38             	sub    $0x38,%esp
    rb_node *x, *y, *z = node;
c0100bbe:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100bc1:	89 45 f4             	mov    %eax,-0xc(%ebp)
    rb_node *nil = tree->nil, *root = tree->root;
c0100bc4:	8b 45 08             	mov    0x8(%ebp),%eax
c0100bc7:	8b 40 04             	mov    0x4(%eax),%eax
c0100bca:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0100bcd:	8b 45 08             	mov    0x8(%ebp),%eax
c0100bd0:	8b 40 08             	mov    0x8(%eax),%eax
c0100bd3:	89 45 ec             	mov    %eax,-0x14(%ebp)

    y = (z->left == nil || z->right == nil) ? z : rb_tree_successor(tree, z);
c0100bd6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100bd9:	8b 40 08             	mov    0x8(%eax),%eax
c0100bdc:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0100bdf:	74 1f                	je     c0100c00 <rb_delete+0x48>
c0100be1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100be4:	8b 40 0c             	mov    0xc(%eax),%eax
c0100be7:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0100bea:	74 14                	je     c0100c00 <rb_delete+0x48>
c0100bec:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100bef:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100bf3:	8b 45 08             	mov    0x8(%ebp),%eax
c0100bf6:	89 04 24             	mov    %eax,(%esp)
c0100bf9:	e8 16 fc ff ff       	call   c0100814 <rb_tree_successor>
c0100bfe:	eb 03                	jmp    c0100c03 <rb_delete+0x4b>
c0100c00:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100c03:	89 45 e8             	mov    %eax,-0x18(%ebp)
    x = (y->left != nil) ? y->left : y->right;
c0100c06:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100c09:	8b 40 08             	mov    0x8(%eax),%eax
c0100c0c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0100c0f:	74 08                	je     c0100c19 <rb_delete+0x61>
c0100c11:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100c14:	8b 40 08             	mov    0x8(%eax),%eax
c0100c17:	eb 06                	jmp    c0100c1f <rb_delete+0x67>
c0100c19:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100c1c:	8b 40 0c             	mov    0xc(%eax),%eax
c0100c1f:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    assert(y != root && y != nil);
c0100c22:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100c25:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0100c28:	74 08                	je     c0100c32 <rb_delete+0x7a>
c0100c2a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100c2d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0100c30:	75 24                	jne    c0100c56 <rb_delete+0x9e>
c0100c32:	c7 44 24 0c 20 d6 10 	movl   $0xc010d620,0xc(%esp)
c0100c39:	c0 
c0100c3a:	c7 44 24 08 98 d5 10 	movl   $0xc010d598,0x8(%esp)
c0100c41:	c0 
c0100c42:	c7 44 24 04 2f 01 00 	movl   $0x12f,0x4(%esp)
c0100c49:	00 
c0100c4a:	c7 04 24 ad d5 10 c0 	movl   $0xc010d5ad,(%esp)
c0100c51:	e8 02 16 00 00       	call   c0102258 <__panic>

    x->parent = y->parent;
c0100c56:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100c59:	8b 50 04             	mov    0x4(%eax),%edx
c0100c5c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0100c5f:	89 50 04             	mov    %edx,0x4(%eax)
    if (y == y->parent->left) {
c0100c62:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100c65:	8b 40 04             	mov    0x4(%eax),%eax
c0100c68:	8b 40 08             	mov    0x8(%eax),%eax
c0100c6b:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c0100c6e:	75 0e                	jne    c0100c7e <rb_delete+0xc6>
        y->parent->left = x;
c0100c70:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100c73:	8b 40 04             	mov    0x4(%eax),%eax
c0100c76:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0100c79:	89 50 08             	mov    %edx,0x8(%eax)
c0100c7c:	eb 0c                	jmp    c0100c8a <rb_delete+0xd2>
    }
    else {
        y->parent->right = x;
c0100c7e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100c81:	8b 40 04             	mov    0x4(%eax),%eax
c0100c84:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0100c87:	89 50 0c             	mov    %edx,0xc(%eax)
    }

    bool need_fixup = !(y->red);
c0100c8a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100c8d:	8b 00                	mov    (%eax),%eax
c0100c8f:	85 c0                	test   %eax,%eax
c0100c91:	0f 94 c0             	sete   %al
c0100c94:	0f b6 c0             	movzbl %al,%eax
c0100c97:	89 45 e0             	mov    %eax,-0x20(%ebp)

    if (y != z) {
c0100c9a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100c9d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0100ca0:	74 5c                	je     c0100cfe <rb_delete+0x146>
        if (z == z->parent->left) {
c0100ca2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100ca5:	8b 40 04             	mov    0x4(%eax),%eax
c0100ca8:	8b 40 08             	mov    0x8(%eax),%eax
c0100cab:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0100cae:	75 0e                	jne    c0100cbe <rb_delete+0x106>
            z->parent->left = y;
c0100cb0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100cb3:	8b 40 04             	mov    0x4(%eax),%eax
c0100cb6:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0100cb9:	89 50 08             	mov    %edx,0x8(%eax)
c0100cbc:	eb 0c                	jmp    c0100cca <rb_delete+0x112>
        }
        else {
            z->parent->right = y;
c0100cbe:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100cc1:	8b 40 04             	mov    0x4(%eax),%eax
c0100cc4:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0100cc7:	89 50 0c             	mov    %edx,0xc(%eax)
        }
        z->left->parent = z->right->parent = y;
c0100cca:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100ccd:	8b 50 08             	mov    0x8(%eax),%edx
c0100cd0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100cd3:	8b 40 0c             	mov    0xc(%eax),%eax
c0100cd6:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c0100cd9:	89 48 04             	mov    %ecx,0x4(%eax)
c0100cdc:	8b 40 04             	mov    0x4(%eax),%eax
c0100cdf:	89 42 04             	mov    %eax,0x4(%edx)
        *y = *z;
c0100ce2:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100ce5:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100ce8:	8b 0a                	mov    (%edx),%ecx
c0100cea:	89 08                	mov    %ecx,(%eax)
c0100cec:	8b 4a 04             	mov    0x4(%edx),%ecx
c0100cef:	89 48 04             	mov    %ecx,0x4(%eax)
c0100cf2:	8b 4a 08             	mov    0x8(%edx),%ecx
c0100cf5:	89 48 08             	mov    %ecx,0x8(%eax)
c0100cf8:	8b 52 0c             	mov    0xc(%edx),%edx
c0100cfb:	89 50 0c             	mov    %edx,0xc(%eax)
    }
    if (need_fixup) {
c0100cfe:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0100d02:	74 12                	je     c0100d16 <rb_delete+0x15e>
        rb_delete_fixup(tree, x);
c0100d04:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0100d07:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100d0b:	8b 45 08             	mov    0x8(%ebp),%eax
c0100d0e:	89 04 24             	mov    %eax,(%esp)
c0100d11:	e8 5f fc ff ff       	call   c0100975 <rb_delete_fixup>
    }
}
c0100d16:	c9                   	leave  
c0100d17:	c3                   	ret    

c0100d18 <rb_tree_destroy>:

/* rb_tree_destroy - destroy a tree and free memory */
void
rb_tree_destroy(rb_tree *tree) {
c0100d18:	55                   	push   %ebp
c0100d19:	89 e5                	mov    %esp,%ebp
c0100d1b:	83 ec 18             	sub    $0x18,%esp
    kfree(tree->root);
c0100d1e:	8b 45 08             	mov    0x8(%ebp),%eax
c0100d21:	8b 40 08             	mov    0x8(%eax),%eax
c0100d24:	89 04 24             	mov    %eax,(%esp)
c0100d27:	e8 e1 53 00 00       	call   c010610d <kfree>
    kfree(tree->nil);
c0100d2c:	8b 45 08             	mov    0x8(%ebp),%eax
c0100d2f:	8b 40 04             	mov    0x4(%eax),%eax
c0100d32:	89 04 24             	mov    %eax,(%esp)
c0100d35:	e8 d3 53 00 00       	call   c010610d <kfree>
    kfree(tree);
c0100d3a:	8b 45 08             	mov    0x8(%ebp),%eax
c0100d3d:	89 04 24             	mov    %eax,(%esp)
c0100d40:	e8 c8 53 00 00       	call   c010610d <kfree>
}
c0100d45:	c9                   	leave  
c0100d46:	c3                   	ret    

c0100d47 <rb_node_prev>:
/* *
 * rb_node_prev - returns the predecessor node of @node in @tree,
 * or 'NULL' if no predecessor exists.
 * */
rb_node *
rb_node_prev(rb_tree *tree, rb_node *node) {
c0100d47:	55                   	push   %ebp
c0100d48:	89 e5                	mov    %esp,%ebp
c0100d4a:	83 ec 18             	sub    $0x18,%esp
    rb_node *prev = rb_tree_predecessor(tree, node);
c0100d4d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100d50:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100d54:	8b 45 08             	mov    0x8(%ebp),%eax
c0100d57:	89 04 24             	mov    %eax,(%esp)
c0100d5a:	e8 30 fb ff ff       	call   c010088f <rb_tree_predecessor>
c0100d5f:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return (prev != tree->nil) ? prev : NULL;
c0100d62:	8b 45 08             	mov    0x8(%ebp),%eax
c0100d65:	8b 40 04             	mov    0x4(%eax),%eax
c0100d68:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0100d6b:	74 05                	je     c0100d72 <rb_node_prev+0x2b>
c0100d6d:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0100d70:	eb 05                	jmp    c0100d77 <rb_node_prev+0x30>
c0100d72:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100d77:	c9                   	leave  
c0100d78:	c3                   	ret    

c0100d79 <rb_node_next>:
/* *
 * rb_node_next - returns the successor node of @node in @tree,
 * or 'NULL' if no successor exists.
 * */
rb_node *
rb_node_next(rb_tree *tree, rb_node *node) {
c0100d79:	55                   	push   %ebp
c0100d7a:	89 e5                	mov    %esp,%ebp
c0100d7c:	83 ec 18             	sub    $0x18,%esp
    rb_node *next = rb_tree_successor(tree, node);
c0100d7f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100d82:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100d86:	8b 45 08             	mov    0x8(%ebp),%eax
c0100d89:	89 04 24             	mov    %eax,(%esp)
c0100d8c:	e8 83 fa ff ff       	call   c0100814 <rb_tree_successor>
c0100d91:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return (next != tree->nil) ? next : NULL;
c0100d94:	8b 45 08             	mov    0x8(%ebp),%eax
c0100d97:	8b 40 04             	mov    0x4(%eax),%eax
c0100d9a:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0100d9d:	74 05                	je     c0100da4 <rb_node_next+0x2b>
c0100d9f:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0100da2:	eb 05                	jmp    c0100da9 <rb_node_next+0x30>
c0100da4:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100da9:	c9                   	leave  
c0100daa:	c3                   	ret    

c0100dab <rb_node_root>:

/* rb_node_root - returns the root node of a @tree, or 'NULL' if tree is empty */
rb_node *
rb_node_root(rb_tree *tree) {
c0100dab:	55                   	push   %ebp
c0100dac:	89 e5                	mov    %esp,%ebp
c0100dae:	83 ec 10             	sub    $0x10,%esp
    rb_node *node = tree->root->left;
c0100db1:	8b 45 08             	mov    0x8(%ebp),%eax
c0100db4:	8b 40 08             	mov    0x8(%eax),%eax
c0100db7:	8b 40 08             	mov    0x8(%eax),%eax
c0100dba:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return (node != tree->nil) ? node : NULL;
c0100dbd:	8b 45 08             	mov    0x8(%ebp),%eax
c0100dc0:	8b 40 04             	mov    0x4(%eax),%eax
c0100dc3:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0100dc6:	74 05                	je     c0100dcd <rb_node_root+0x22>
c0100dc8:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0100dcb:	eb 05                	jmp    c0100dd2 <rb_node_root+0x27>
c0100dcd:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100dd2:	c9                   	leave  
c0100dd3:	c3                   	ret    

c0100dd4 <rb_node_left>:

/* rb_node_left - gets the left child of @node, or 'NULL' if no such node */
rb_node *
rb_node_left(rb_tree *tree, rb_node *node) {
c0100dd4:	55                   	push   %ebp
c0100dd5:	89 e5                	mov    %esp,%ebp
c0100dd7:	83 ec 10             	sub    $0x10,%esp
    rb_node *left = node->left;
c0100dda:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100ddd:	8b 40 08             	mov    0x8(%eax),%eax
c0100de0:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return (left != tree->nil) ? left : NULL;
c0100de3:	8b 45 08             	mov    0x8(%ebp),%eax
c0100de6:	8b 40 04             	mov    0x4(%eax),%eax
c0100de9:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0100dec:	74 05                	je     c0100df3 <rb_node_left+0x1f>
c0100dee:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0100df1:	eb 05                	jmp    c0100df8 <rb_node_left+0x24>
c0100df3:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100df8:	c9                   	leave  
c0100df9:	c3                   	ret    

c0100dfa <rb_node_right>:

/* rb_node_right - gets the right child of @node, or 'NULL' if no such node */
rb_node *
rb_node_right(rb_tree *tree, rb_node *node) {
c0100dfa:	55                   	push   %ebp
c0100dfb:	89 e5                	mov    %esp,%ebp
c0100dfd:	83 ec 10             	sub    $0x10,%esp
    rb_node *right = node->right;
c0100e00:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100e03:	8b 40 0c             	mov    0xc(%eax),%eax
c0100e06:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return (right != tree->nil) ? right : NULL;
c0100e09:	8b 45 08             	mov    0x8(%ebp),%eax
c0100e0c:	8b 40 04             	mov    0x4(%eax),%eax
c0100e0f:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0100e12:	74 05                	je     c0100e19 <rb_node_right+0x1f>
c0100e14:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0100e17:	eb 05                	jmp    c0100e1e <rb_node_right+0x24>
c0100e19:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100e1e:	c9                   	leave  
c0100e1f:	c3                   	ret    

c0100e20 <check_tree>:

int
check_tree(rb_tree *tree, rb_node *node) {
c0100e20:	55                   	push   %ebp
c0100e21:	89 e5                	mov    %esp,%ebp
c0100e23:	83 ec 28             	sub    $0x28,%esp
    rb_node *nil = tree->nil;
c0100e26:	8b 45 08             	mov    0x8(%ebp),%eax
c0100e29:	8b 40 04             	mov    0x4(%eax),%eax
c0100e2c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (node == nil) {
c0100e2f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100e32:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0100e35:	75 37                	jne    c0100e6e <check_tree+0x4e>
        assert(!node->red);
c0100e37:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100e3a:	8b 00                	mov    (%eax),%eax
c0100e3c:	85 c0                	test   %eax,%eax
c0100e3e:	74 24                	je     c0100e64 <check_tree+0x44>
c0100e40:	c7 44 24 0c 36 d6 10 	movl   $0xc010d636,0xc(%esp)
c0100e47:	c0 
c0100e48:	c7 44 24 08 98 d5 10 	movl   $0xc010d598,0x8(%esp)
c0100e4f:	c0 
c0100e50:	c7 44 24 04 7f 01 00 	movl   $0x17f,0x4(%esp)
c0100e57:	00 
c0100e58:	c7 04 24 ad d5 10 c0 	movl   $0xc010d5ad,(%esp)
c0100e5f:	e8 f4 13 00 00       	call   c0102258 <__panic>
        return 1;
c0100e64:	b8 01 00 00 00       	mov    $0x1,%eax
c0100e69:	e9 af 01 00 00       	jmp    c010101d <check_tree+0x1fd>
    }
    if (node->left != nil) {
c0100e6e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100e71:	8b 40 08             	mov    0x8(%eax),%eax
c0100e74:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0100e77:	74 71                	je     c0100eea <check_tree+0xca>
        assert(COMPARE(tree, node, node->left) >= 0);
c0100e79:	8b 45 08             	mov    0x8(%ebp),%eax
c0100e7c:	8b 00                	mov    (%eax),%eax
c0100e7e:	8b 55 0c             	mov    0xc(%ebp),%edx
c0100e81:	8b 52 08             	mov    0x8(%edx),%edx
c0100e84:	89 54 24 04          	mov    %edx,0x4(%esp)
c0100e88:	8b 55 0c             	mov    0xc(%ebp),%edx
c0100e8b:	89 14 24             	mov    %edx,(%esp)
c0100e8e:	ff d0                	call   *%eax
c0100e90:	85 c0                	test   %eax,%eax
c0100e92:	79 24                	jns    c0100eb8 <check_tree+0x98>
c0100e94:	c7 44 24 0c 44 d6 10 	movl   $0xc010d644,0xc(%esp)
c0100e9b:	c0 
c0100e9c:	c7 44 24 08 98 d5 10 	movl   $0xc010d598,0x8(%esp)
c0100ea3:	c0 
c0100ea4:	c7 44 24 04 83 01 00 	movl   $0x183,0x4(%esp)
c0100eab:	00 
c0100eac:	c7 04 24 ad d5 10 c0 	movl   $0xc010d5ad,(%esp)
c0100eb3:	e8 a0 13 00 00       	call   c0102258 <__panic>
        assert(node->left->parent == node);
c0100eb8:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100ebb:	8b 40 08             	mov    0x8(%eax),%eax
c0100ebe:	8b 40 04             	mov    0x4(%eax),%eax
c0100ec1:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0100ec4:	74 24                	je     c0100eea <check_tree+0xca>
c0100ec6:	c7 44 24 0c 69 d6 10 	movl   $0xc010d669,0xc(%esp)
c0100ecd:	c0 
c0100ece:	c7 44 24 08 98 d5 10 	movl   $0xc010d598,0x8(%esp)
c0100ed5:	c0 
c0100ed6:	c7 44 24 04 84 01 00 	movl   $0x184,0x4(%esp)
c0100edd:	00 
c0100ede:	c7 04 24 ad d5 10 c0 	movl   $0xc010d5ad,(%esp)
c0100ee5:	e8 6e 13 00 00       	call   c0102258 <__panic>
    }
    if (node->right != nil) {
c0100eea:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100eed:	8b 40 0c             	mov    0xc(%eax),%eax
c0100ef0:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0100ef3:	74 71                	je     c0100f66 <check_tree+0x146>
        assert(COMPARE(tree, node, node->right) <= 0);
c0100ef5:	8b 45 08             	mov    0x8(%ebp),%eax
c0100ef8:	8b 00                	mov    (%eax),%eax
c0100efa:	8b 55 0c             	mov    0xc(%ebp),%edx
c0100efd:	8b 52 0c             	mov    0xc(%edx),%edx
c0100f00:	89 54 24 04          	mov    %edx,0x4(%esp)
c0100f04:	8b 55 0c             	mov    0xc(%ebp),%edx
c0100f07:	89 14 24             	mov    %edx,(%esp)
c0100f0a:	ff d0                	call   *%eax
c0100f0c:	85 c0                	test   %eax,%eax
c0100f0e:	7e 24                	jle    c0100f34 <check_tree+0x114>
c0100f10:	c7 44 24 0c 84 d6 10 	movl   $0xc010d684,0xc(%esp)
c0100f17:	c0 
c0100f18:	c7 44 24 08 98 d5 10 	movl   $0xc010d598,0x8(%esp)
c0100f1f:	c0 
c0100f20:	c7 44 24 04 87 01 00 	movl   $0x187,0x4(%esp)
c0100f27:	00 
c0100f28:	c7 04 24 ad d5 10 c0 	movl   $0xc010d5ad,(%esp)
c0100f2f:	e8 24 13 00 00       	call   c0102258 <__panic>
        assert(node->right->parent == node);
c0100f34:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100f37:	8b 40 0c             	mov    0xc(%eax),%eax
c0100f3a:	8b 40 04             	mov    0x4(%eax),%eax
c0100f3d:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0100f40:	74 24                	je     c0100f66 <check_tree+0x146>
c0100f42:	c7 44 24 0c aa d6 10 	movl   $0xc010d6aa,0xc(%esp)
c0100f49:	c0 
c0100f4a:	c7 44 24 08 98 d5 10 	movl   $0xc010d598,0x8(%esp)
c0100f51:	c0 
c0100f52:	c7 44 24 04 88 01 00 	movl   $0x188,0x4(%esp)
c0100f59:	00 
c0100f5a:	c7 04 24 ad d5 10 c0 	movl   $0xc010d5ad,(%esp)
c0100f61:	e8 f2 12 00 00       	call   c0102258 <__panic>
    }
    if (node->red) {
c0100f66:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100f69:	8b 00                	mov    (%eax),%eax
c0100f6b:	85 c0                	test   %eax,%eax
c0100f6d:	74 3c                	je     c0100fab <check_tree+0x18b>
        assert(!node->left->red && !node->right->red);
c0100f6f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100f72:	8b 40 08             	mov    0x8(%eax),%eax
c0100f75:	8b 00                	mov    (%eax),%eax
c0100f77:	85 c0                	test   %eax,%eax
c0100f79:	75 0c                	jne    c0100f87 <check_tree+0x167>
c0100f7b:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100f7e:	8b 40 0c             	mov    0xc(%eax),%eax
c0100f81:	8b 00                	mov    (%eax),%eax
c0100f83:	85 c0                	test   %eax,%eax
c0100f85:	74 24                	je     c0100fab <check_tree+0x18b>
c0100f87:	c7 44 24 0c c8 d6 10 	movl   $0xc010d6c8,0xc(%esp)
c0100f8e:	c0 
c0100f8f:	c7 44 24 08 98 d5 10 	movl   $0xc010d598,0x8(%esp)
c0100f96:	c0 
c0100f97:	c7 44 24 04 8b 01 00 	movl   $0x18b,0x4(%esp)
c0100f9e:	00 
c0100f9f:	c7 04 24 ad d5 10 c0 	movl   $0xc010d5ad,(%esp)
c0100fa6:	e8 ad 12 00 00       	call   c0102258 <__panic>
    }
    int hb_left = check_tree(tree, node->left);
c0100fab:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100fae:	8b 40 08             	mov    0x8(%eax),%eax
c0100fb1:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100fb5:	8b 45 08             	mov    0x8(%ebp),%eax
c0100fb8:	89 04 24             	mov    %eax,(%esp)
c0100fbb:	e8 60 fe ff ff       	call   c0100e20 <check_tree>
c0100fc0:	89 45 ec             	mov    %eax,-0x14(%ebp)
    int hb_right = check_tree(tree, node->right);
c0100fc3:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100fc6:	8b 40 0c             	mov    0xc(%eax),%eax
c0100fc9:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100fcd:	8b 45 08             	mov    0x8(%ebp),%eax
c0100fd0:	89 04 24             	mov    %eax,(%esp)
c0100fd3:	e8 48 fe ff ff       	call   c0100e20 <check_tree>
c0100fd8:	89 45 e8             	mov    %eax,-0x18(%ebp)
    assert(hb_left == hb_right);
c0100fdb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100fde:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c0100fe1:	74 24                	je     c0101007 <check_tree+0x1e7>
c0100fe3:	c7 44 24 0c ee d6 10 	movl   $0xc010d6ee,0xc(%esp)
c0100fea:	c0 
c0100feb:	c7 44 24 08 98 d5 10 	movl   $0xc010d598,0x8(%esp)
c0100ff2:	c0 
c0100ff3:	c7 44 24 04 8f 01 00 	movl   $0x18f,0x4(%esp)
c0100ffa:	00 
c0100ffb:	c7 04 24 ad d5 10 c0 	movl   $0xc010d5ad,(%esp)
c0101002:	e8 51 12 00 00       	call   c0102258 <__panic>
    int hb = hb_left;
c0101007:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010100a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (!node->red) {
c010100d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101010:	8b 00                	mov    (%eax),%eax
c0101012:	85 c0                	test   %eax,%eax
c0101014:	75 04                	jne    c010101a <check_tree+0x1fa>
        hb ++;
c0101016:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
    }
    return hb;
c010101a:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010101d:	c9                   	leave  
c010101e:	c3                   	ret    

c010101f <check_safe_kmalloc>:

static void *
check_safe_kmalloc(size_t size) {
c010101f:	55                   	push   %ebp
c0101020:	89 e5                	mov    %esp,%ebp
c0101022:	83 ec 28             	sub    $0x28,%esp
    void *ret = kmalloc(size);
c0101025:	8b 45 08             	mov    0x8(%ebp),%eax
c0101028:	89 04 24             	mov    %eax,(%esp)
c010102b:	e8 c2 50 00 00       	call   c01060f2 <kmalloc>
c0101030:	89 45 f4             	mov    %eax,-0xc(%ebp)
    assert(ret != NULL);
c0101033:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0101037:	75 24                	jne    c010105d <check_safe_kmalloc+0x3e>
c0101039:	c7 44 24 0c 02 d7 10 	movl   $0xc010d702,0xc(%esp)
c0101040:	c0 
c0101041:	c7 44 24 08 98 d5 10 	movl   $0xc010d598,0x8(%esp)
c0101048:	c0 
c0101049:	c7 44 24 04 9a 01 00 	movl   $0x19a,0x4(%esp)
c0101050:	00 
c0101051:	c7 04 24 ad d5 10 c0 	movl   $0xc010d5ad,(%esp)
c0101058:	e8 fb 11 00 00       	call   c0102258 <__panic>
    return ret;
c010105d:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0101060:	c9                   	leave  
c0101061:	c3                   	ret    

c0101062 <check_compare1>:

#define rbn2data(node)              \
    (to_struct(node, struct check_data, rb_link))

static inline int
check_compare1(rb_node *node1, rb_node *node2) {
c0101062:	55                   	push   %ebp
c0101063:	89 e5                	mov    %esp,%ebp
    return rbn2data(node1)->data - rbn2data(node2)->data;
c0101065:	8b 45 08             	mov    0x8(%ebp),%eax
c0101068:	83 e8 04             	sub    $0x4,%eax
c010106b:	8b 10                	mov    (%eax),%edx
c010106d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101070:	83 e8 04             	sub    $0x4,%eax
c0101073:	8b 00                	mov    (%eax),%eax
c0101075:	29 c2                	sub    %eax,%edx
c0101077:	89 d0                	mov    %edx,%eax
}
c0101079:	5d                   	pop    %ebp
c010107a:	c3                   	ret    

c010107b <check_compare2>:

static inline int
check_compare2(rb_node *node, void *key) {
c010107b:	55                   	push   %ebp
c010107c:	89 e5                	mov    %esp,%ebp
    return rbn2data(node)->data - (long)key;
c010107e:	8b 45 08             	mov    0x8(%ebp),%eax
c0101081:	83 e8 04             	sub    $0x4,%eax
c0101084:	8b 10                	mov    (%eax),%edx
c0101086:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101089:	29 c2                	sub    %eax,%edx
c010108b:	89 d0                	mov    %edx,%eax
}
c010108d:	5d                   	pop    %ebp
c010108e:	c3                   	ret    

c010108f <check_rb_tree>:

void
check_rb_tree(void) {
c010108f:	55                   	push   %ebp
c0101090:	89 e5                	mov    %esp,%ebp
c0101092:	53                   	push   %ebx
c0101093:	83 ec 44             	sub    $0x44,%esp
    rb_tree *tree = rb_tree_create(check_compare1);
c0101096:	c7 04 24 62 10 10 c0 	movl   $0xc0101062,(%esp)
c010109d:	e8 e5 f1 ff ff       	call   c0100287 <rb_tree_create>
c01010a2:	89 45 ec             	mov    %eax,-0x14(%ebp)
    assert(tree != NULL);
c01010a5:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01010a9:	75 24                	jne    c01010cf <check_rb_tree+0x40>
c01010ab:	c7 44 24 0c 0e d7 10 	movl   $0xc010d70e,0xc(%esp)
c01010b2:	c0 
c01010b3:	c7 44 24 08 98 d5 10 	movl   $0xc010d598,0x8(%esp)
c01010ba:	c0 
c01010bb:	c7 44 24 04 b3 01 00 	movl   $0x1b3,0x4(%esp)
c01010c2:	00 
c01010c3:	c7 04 24 ad d5 10 c0 	movl   $0xc010d5ad,(%esp)
c01010ca:	e8 89 11 00 00       	call   c0102258 <__panic>

    rb_node *nil = tree->nil, *root = tree->root;
c01010cf:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01010d2:	8b 40 04             	mov    0x4(%eax),%eax
c01010d5:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01010d8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01010db:	8b 40 08             	mov    0x8(%eax),%eax
c01010de:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    assert(!nil->red && root->left == nil);
c01010e1:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01010e4:	8b 00                	mov    (%eax),%eax
c01010e6:	85 c0                	test   %eax,%eax
c01010e8:	75 0b                	jne    c01010f5 <check_rb_tree+0x66>
c01010ea:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01010ed:	8b 40 08             	mov    0x8(%eax),%eax
c01010f0:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c01010f3:	74 24                	je     c0101119 <check_rb_tree+0x8a>
c01010f5:	c7 44 24 0c 1c d7 10 	movl   $0xc010d71c,0xc(%esp)
c01010fc:	c0 
c01010fd:	c7 44 24 08 98 d5 10 	movl   $0xc010d598,0x8(%esp)
c0101104:	c0 
c0101105:	c7 44 24 04 b6 01 00 	movl   $0x1b6,0x4(%esp)
c010110c:	00 
c010110d:	c7 04 24 ad d5 10 c0 	movl   $0xc010d5ad,(%esp)
c0101114:	e8 3f 11 00 00       	call   c0102258 <__panic>

    int total = 1000;
c0101119:	c7 45 e0 e8 03 00 00 	movl   $0x3e8,-0x20(%ebp)
    struct check_data **all = check_safe_kmalloc(sizeof(struct check_data *) * total);
c0101120:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0101123:	c1 e0 02             	shl    $0x2,%eax
c0101126:	89 04 24             	mov    %eax,(%esp)
c0101129:	e8 f1 fe ff ff       	call   c010101f <check_safe_kmalloc>
c010112e:	89 45 dc             	mov    %eax,-0x24(%ebp)

    long i;
    for (i = 0; i < total; i ++) {
c0101131:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0101138:	eb 38                	jmp    c0101172 <check_rb_tree+0xe3>
        all[i] = check_safe_kmalloc(sizeof(struct check_data));
c010113a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010113d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0101144:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101147:	8d 1c 02             	lea    (%edx,%eax,1),%ebx
c010114a:	c7 04 24 14 00 00 00 	movl   $0x14,(%esp)
c0101151:	e8 c9 fe ff ff       	call   c010101f <check_safe_kmalloc>
c0101156:	89 03                	mov    %eax,(%ebx)
        all[i]->data = i;
c0101158:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010115b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0101162:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101165:	01 d0                	add    %edx,%eax
c0101167:	8b 00                	mov    (%eax),%eax
c0101169:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010116c:	89 10                	mov    %edx,(%eax)

    int total = 1000;
    struct check_data **all = check_safe_kmalloc(sizeof(struct check_data *) * total);

    long i;
    for (i = 0; i < total; i ++) {
c010116e:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0101172:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101175:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0101178:	7c c0                	jl     c010113a <check_rb_tree+0xab>
        all[i] = check_safe_kmalloc(sizeof(struct check_data));
        all[i]->data = i;
    }

    int *mark = check_safe_kmalloc(sizeof(int) * total);
c010117a:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010117d:	c1 e0 02             	shl    $0x2,%eax
c0101180:	89 04 24             	mov    %eax,(%esp)
c0101183:	e8 97 fe ff ff       	call   c010101f <check_safe_kmalloc>
c0101188:	89 45 d8             	mov    %eax,-0x28(%ebp)
    memset(mark, 0, sizeof(int) * total);
c010118b:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010118e:	c1 e0 02             	shl    $0x2,%eax
c0101191:	89 44 24 08          	mov    %eax,0x8(%esp)
c0101195:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010119c:	00 
c010119d:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01011a0:	89 04 24             	mov    %eax,(%esp)
c01011a3:	e8 9f c1 00 00       	call   c010d347 <memset>

    for (i = 0; i < total; i ++) {
c01011a8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01011af:	eb 29                	jmp    c01011da <check_rb_tree+0x14b>
        mark[all[i]->data] = 1;
c01011b1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01011b4:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c01011bb:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01011be:	01 d0                	add    %edx,%eax
c01011c0:	8b 00                	mov    (%eax),%eax
c01011c2:	8b 00                	mov    (%eax),%eax
c01011c4:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c01011cb:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01011ce:	01 d0                	add    %edx,%eax
c01011d0:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
    }

    int *mark = check_safe_kmalloc(sizeof(int) * total);
    memset(mark, 0, sizeof(int) * total);

    for (i = 0; i < total; i ++) {
c01011d6:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01011da:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01011dd:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c01011e0:	7c cf                	jl     c01011b1 <check_rb_tree+0x122>
        mark[all[i]->data] = 1;
    }
    for (i = 0; i < total; i ++) {
c01011e2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01011e9:	eb 3e                	jmp    c0101229 <check_rb_tree+0x19a>
        assert(mark[i] == 1);
c01011eb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01011ee:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c01011f5:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01011f8:	01 d0                	add    %edx,%eax
c01011fa:	8b 00                	mov    (%eax),%eax
c01011fc:	83 f8 01             	cmp    $0x1,%eax
c01011ff:	74 24                	je     c0101225 <check_rb_tree+0x196>
c0101201:	c7 44 24 0c 3b d7 10 	movl   $0xc010d73b,0xc(%esp)
c0101208:	c0 
c0101209:	c7 44 24 08 98 d5 10 	movl   $0xc010d598,0x8(%esp)
c0101210:	c0 
c0101211:	c7 44 24 04 c8 01 00 	movl   $0x1c8,0x4(%esp)
c0101218:	00 
c0101219:	c7 04 24 ad d5 10 c0 	movl   $0xc010d5ad,(%esp)
c0101220:	e8 33 10 00 00       	call   c0102258 <__panic>
    memset(mark, 0, sizeof(int) * total);

    for (i = 0; i < total; i ++) {
        mark[all[i]->data] = 1;
    }
    for (i = 0; i < total; i ++) {
c0101225:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0101229:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010122c:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c010122f:	7c ba                	jl     c01011eb <check_rb_tree+0x15c>
        assert(mark[i] == 1);
    }

    for (i = 0; i < total; i ++) {
c0101231:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0101238:	eb 66                	jmp    c01012a0 <check_rb_tree+0x211>
        int j = (rand() % (total - i)) + i;
c010123a:	e8 01 bd 00 00       	call   c010cf40 <rand>
c010123f:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0101242:	8b 4d e0             	mov    -0x20(%ebp),%ecx
c0101245:	29 d1                	sub    %edx,%ecx
c0101247:	99                   	cltd   
c0101248:	f7 f9                	idiv   %ecx
c010124a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010124d:	01 d0                	add    %edx,%eax
c010124f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        struct check_data *z = all[i];
c0101252:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101255:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010125c:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010125f:	01 d0                	add    %edx,%eax
c0101261:	8b 00                	mov    (%eax),%eax
c0101263:	89 45 d0             	mov    %eax,-0x30(%ebp)
        all[i] = all[j];
c0101266:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101269:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0101270:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101273:	01 c2                	add    %eax,%edx
c0101275:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0101278:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
c010127f:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101282:	01 c8                	add    %ecx,%eax
c0101284:	8b 00                	mov    (%eax),%eax
c0101286:	89 02                	mov    %eax,(%edx)
        all[j] = z;
c0101288:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010128b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0101292:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101295:	01 c2                	add    %eax,%edx
c0101297:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010129a:	89 02                	mov    %eax,(%edx)
    }
    for (i = 0; i < total; i ++) {
        assert(mark[i] == 1);
    }

    for (i = 0; i < total; i ++) {
c010129c:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01012a0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01012a3:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c01012a6:	7c 92                	jl     c010123a <check_rb_tree+0x1ab>
        struct check_data *z = all[i];
        all[i] = all[j];
        all[j] = z;
    }

    memset(mark, 0, sizeof(int) * total);
c01012a8:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01012ab:	c1 e0 02             	shl    $0x2,%eax
c01012ae:	89 44 24 08          	mov    %eax,0x8(%esp)
c01012b2:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01012b9:	00 
c01012ba:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01012bd:	89 04 24             	mov    %eax,(%esp)
c01012c0:	e8 82 c0 00 00       	call   c010d347 <memset>
    for (i = 0; i < total; i ++) {
c01012c5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01012cc:	eb 29                	jmp    c01012f7 <check_rb_tree+0x268>
        mark[all[i]->data] = 1;
c01012ce:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01012d1:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c01012d8:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01012db:	01 d0                	add    %edx,%eax
c01012dd:	8b 00                	mov    (%eax),%eax
c01012df:	8b 00                	mov    (%eax),%eax
c01012e1:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c01012e8:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01012eb:	01 d0                	add    %edx,%eax
c01012ed:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
        all[i] = all[j];
        all[j] = z;
    }

    memset(mark, 0, sizeof(int) * total);
    for (i = 0; i < total; i ++) {
c01012f3:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01012f7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01012fa:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c01012fd:	7c cf                	jl     c01012ce <check_rb_tree+0x23f>
        mark[all[i]->data] = 1;
    }
    for (i = 0; i < total; i ++) {
c01012ff:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0101306:	eb 3e                	jmp    c0101346 <check_rb_tree+0x2b7>
        assert(mark[i] == 1);
c0101308:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010130b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0101312:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0101315:	01 d0                	add    %edx,%eax
c0101317:	8b 00                	mov    (%eax),%eax
c0101319:	83 f8 01             	cmp    $0x1,%eax
c010131c:	74 24                	je     c0101342 <check_rb_tree+0x2b3>
c010131e:	c7 44 24 0c 3b d7 10 	movl   $0xc010d73b,0xc(%esp)
c0101325:	c0 
c0101326:	c7 44 24 08 98 d5 10 	movl   $0xc010d598,0x8(%esp)
c010132d:	c0 
c010132e:	c7 44 24 04 d7 01 00 	movl   $0x1d7,0x4(%esp)
c0101335:	00 
c0101336:	c7 04 24 ad d5 10 c0 	movl   $0xc010d5ad,(%esp)
c010133d:	e8 16 0f 00 00       	call   c0102258 <__panic>

    memset(mark, 0, sizeof(int) * total);
    for (i = 0; i < total; i ++) {
        mark[all[i]->data] = 1;
    }
    for (i = 0; i < total; i ++) {
c0101342:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0101346:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101349:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c010134c:	7c ba                	jl     c0101308 <check_rb_tree+0x279>
        assert(mark[i] == 1);
    }

    for (i = 0; i < total; i ++) {
c010134e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0101355:	eb 3c                	jmp    c0101393 <check_rb_tree+0x304>
        rb_insert(tree, &(all[i]->rb_link));
c0101357:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010135a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0101361:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101364:	01 d0                	add    %edx,%eax
c0101366:	8b 00                	mov    (%eax),%eax
c0101368:	83 c0 04             	add    $0x4,%eax
c010136b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010136f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101372:	89 04 24             	mov    %eax,(%esp)
c0101375:	e8 a3 f2 ff ff       	call   c010061d <rb_insert>
        check_tree(tree, root->left);
c010137a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010137d:	8b 40 08             	mov    0x8(%eax),%eax
c0101380:	89 44 24 04          	mov    %eax,0x4(%esp)
c0101384:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101387:	89 04 24             	mov    %eax,(%esp)
c010138a:	e8 91 fa ff ff       	call   c0100e20 <check_tree>
    }
    for (i = 0; i < total; i ++) {
        assert(mark[i] == 1);
    }

    for (i = 0; i < total; i ++) {
c010138f:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0101393:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101396:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0101399:	7c bc                	jl     c0101357 <check_rb_tree+0x2c8>
        rb_insert(tree, &(all[i]->rb_link));
        check_tree(tree, root->left);
    }

    rb_node *node;
    for (i = 0; i < total; i ++) {
c010139b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01013a2:	eb 74                	jmp    c0101418 <check_rb_tree+0x389>
        node = rb_search(tree, check_compare2, (void *)(all[i]->data));
c01013a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01013a7:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c01013ae:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01013b1:	01 d0                	add    %edx,%eax
c01013b3:	8b 00                	mov    (%eax),%eax
c01013b5:	8b 00                	mov    (%eax),%eax
c01013b7:	89 44 24 08          	mov    %eax,0x8(%esp)
c01013bb:	c7 44 24 04 7b 10 10 	movl   $0xc010107b,0x4(%esp)
c01013c2:	c0 
c01013c3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01013c6:	89 04 24             	mov    %eax,(%esp)
c01013c9:	e8 3c f5 ff ff       	call   c010090a <rb_search>
c01013ce:	89 45 cc             	mov    %eax,-0x34(%ebp)
        assert(node != NULL && node == &(all[i]->rb_link));
c01013d1:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c01013d5:	74 19                	je     c01013f0 <check_rb_tree+0x361>
c01013d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01013da:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c01013e1:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01013e4:	01 d0                	add    %edx,%eax
c01013e6:	8b 00                	mov    (%eax),%eax
c01013e8:	83 c0 04             	add    $0x4,%eax
c01013eb:	3b 45 cc             	cmp    -0x34(%ebp),%eax
c01013ee:	74 24                	je     c0101414 <check_rb_tree+0x385>
c01013f0:	c7 44 24 0c 48 d7 10 	movl   $0xc010d748,0xc(%esp)
c01013f7:	c0 
c01013f8:	c7 44 24 08 98 d5 10 	movl   $0xc010d598,0x8(%esp)
c01013ff:	c0 
c0101400:	c7 44 24 04 e2 01 00 	movl   $0x1e2,0x4(%esp)
c0101407:	00 
c0101408:	c7 04 24 ad d5 10 c0 	movl   $0xc010d5ad,(%esp)
c010140f:	e8 44 0e 00 00       	call   c0102258 <__panic>
        rb_insert(tree, &(all[i]->rb_link));
        check_tree(tree, root->left);
    }

    rb_node *node;
    for (i = 0; i < total; i ++) {
c0101414:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0101418:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010141b:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c010141e:	7c 84                	jl     c01013a4 <check_rb_tree+0x315>
        node = rb_search(tree, check_compare2, (void *)(all[i]->data));
        assert(node != NULL && node == &(all[i]->rb_link));
    }

    for (i = 0; i < total; i ++) {
c0101420:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0101427:	eb 7f                	jmp    c01014a8 <check_rb_tree+0x419>
        node = rb_search(tree, check_compare2, (void *)i);
c0101429:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010142c:	89 44 24 08          	mov    %eax,0x8(%esp)
c0101430:	c7 44 24 04 7b 10 10 	movl   $0xc010107b,0x4(%esp)
c0101437:	c0 
c0101438:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010143b:	89 04 24             	mov    %eax,(%esp)
c010143e:	e8 c7 f4 ff ff       	call   c010090a <rb_search>
c0101443:	89 45 cc             	mov    %eax,-0x34(%ebp)
        assert(node != NULL && rbn2data(node)->data == i);
c0101446:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c010144a:	74 0d                	je     c0101459 <check_rb_tree+0x3ca>
c010144c:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010144f:	83 e8 04             	sub    $0x4,%eax
c0101452:	8b 00                	mov    (%eax),%eax
c0101454:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0101457:	74 24                	je     c010147d <check_rb_tree+0x3ee>
c0101459:	c7 44 24 0c 74 d7 10 	movl   $0xc010d774,0xc(%esp)
c0101460:	c0 
c0101461:	c7 44 24 08 98 d5 10 	movl   $0xc010d598,0x8(%esp)
c0101468:	c0 
c0101469:	c7 44 24 04 e7 01 00 	movl   $0x1e7,0x4(%esp)
c0101470:	00 
c0101471:	c7 04 24 ad d5 10 c0 	movl   $0xc010d5ad,(%esp)
c0101478:	e8 db 0d 00 00       	call   c0102258 <__panic>
        rb_delete(tree, node);
c010147d:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0101480:	89 44 24 04          	mov    %eax,0x4(%esp)
c0101484:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101487:	89 04 24             	mov    %eax,(%esp)
c010148a:	e8 29 f7 ff ff       	call   c0100bb8 <rb_delete>
        check_tree(tree, root->left);
c010148f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0101492:	8b 40 08             	mov    0x8(%eax),%eax
c0101495:	89 44 24 04          	mov    %eax,0x4(%esp)
c0101499:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010149c:	89 04 24             	mov    %eax,(%esp)
c010149f:	e8 7c f9 ff ff       	call   c0100e20 <check_tree>
    for (i = 0; i < total; i ++) {
        node = rb_search(tree, check_compare2, (void *)(all[i]->data));
        assert(node != NULL && node == &(all[i]->rb_link));
    }

    for (i = 0; i < total; i ++) {
c01014a4:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01014a8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01014ab:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c01014ae:	0f 8c 75 ff ff ff    	jl     c0101429 <check_rb_tree+0x39a>
        assert(node != NULL && rbn2data(node)->data == i);
        rb_delete(tree, node);
        check_tree(tree, root->left);
    }

    assert(!nil->red && root->left == nil);
c01014b4:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01014b7:	8b 00                	mov    (%eax),%eax
c01014b9:	85 c0                	test   %eax,%eax
c01014bb:	75 0b                	jne    c01014c8 <check_rb_tree+0x439>
c01014bd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01014c0:	8b 40 08             	mov    0x8(%eax),%eax
c01014c3:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c01014c6:	74 24                	je     c01014ec <check_rb_tree+0x45d>
c01014c8:	c7 44 24 0c 1c d7 10 	movl   $0xc010d71c,0xc(%esp)
c01014cf:	c0 
c01014d0:	c7 44 24 08 98 d5 10 	movl   $0xc010d598,0x8(%esp)
c01014d7:	c0 
c01014d8:	c7 44 24 04 ec 01 00 	movl   $0x1ec,0x4(%esp)
c01014df:	00 
c01014e0:	c7 04 24 ad d5 10 c0 	movl   $0xc010d5ad,(%esp)
c01014e7:	e8 6c 0d 00 00       	call   c0102258 <__panic>

    long max = 32;
c01014ec:	c7 45 f0 20 00 00 00 	movl   $0x20,-0x10(%ebp)
    if (max > total) {
c01014f3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01014f6:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c01014f9:	7e 06                	jle    c0101501 <check_rb_tree+0x472>
        max = total;
c01014fb:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01014fe:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }

    for (i = 0; i < max; i ++) {
c0101501:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0101508:	eb 52                	jmp    c010155c <check_rb_tree+0x4cd>
        all[i]->data = max;
c010150a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010150d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0101514:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101517:	01 d0                	add    %edx,%eax
c0101519:	8b 00                	mov    (%eax),%eax
c010151b:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010151e:	89 10                	mov    %edx,(%eax)
        rb_insert(tree, &(all[i]->rb_link));
c0101520:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101523:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010152a:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010152d:	01 d0                	add    %edx,%eax
c010152f:	8b 00                	mov    (%eax),%eax
c0101531:	83 c0 04             	add    $0x4,%eax
c0101534:	89 44 24 04          	mov    %eax,0x4(%esp)
c0101538:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010153b:	89 04 24             	mov    %eax,(%esp)
c010153e:	e8 da f0 ff ff       	call   c010061d <rb_insert>
        check_tree(tree, root->left);
c0101543:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0101546:	8b 40 08             	mov    0x8(%eax),%eax
c0101549:	89 44 24 04          	mov    %eax,0x4(%esp)
c010154d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101550:	89 04 24             	mov    %eax,(%esp)
c0101553:	e8 c8 f8 ff ff       	call   c0100e20 <check_tree>
    long max = 32;
    if (max > total) {
        max = total;
    }

    for (i = 0; i < max; i ++) {
c0101558:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010155c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010155f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0101562:	7c a6                	jl     c010150a <check_rb_tree+0x47b>
        all[i]->data = max;
        rb_insert(tree, &(all[i]->rb_link));
        check_tree(tree, root->left);
    }

    for (i = 0; i < max; i ++) {
c0101564:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010156b:	eb 7f                	jmp    c01015ec <check_rb_tree+0x55d>
        node = rb_search(tree, check_compare2, (void *)max);
c010156d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0101570:	89 44 24 08          	mov    %eax,0x8(%esp)
c0101574:	c7 44 24 04 7b 10 10 	movl   $0xc010107b,0x4(%esp)
c010157b:	c0 
c010157c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010157f:	89 04 24             	mov    %eax,(%esp)
c0101582:	e8 83 f3 ff ff       	call   c010090a <rb_search>
c0101587:	89 45 cc             	mov    %eax,-0x34(%ebp)
        assert(node != NULL && rbn2data(node)->data == max);
c010158a:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c010158e:	74 0d                	je     c010159d <check_rb_tree+0x50e>
c0101590:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0101593:	83 e8 04             	sub    $0x4,%eax
c0101596:	8b 00                	mov    (%eax),%eax
c0101598:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010159b:	74 24                	je     c01015c1 <check_rb_tree+0x532>
c010159d:	c7 44 24 0c a0 d7 10 	movl   $0xc010d7a0,0xc(%esp)
c01015a4:	c0 
c01015a5:	c7 44 24 08 98 d5 10 	movl   $0xc010d598,0x8(%esp)
c01015ac:	c0 
c01015ad:	c7 44 24 04 fb 01 00 	movl   $0x1fb,0x4(%esp)
c01015b4:	00 
c01015b5:	c7 04 24 ad d5 10 c0 	movl   $0xc010d5ad,(%esp)
c01015bc:	e8 97 0c 00 00       	call   c0102258 <__panic>
        rb_delete(tree, node);
c01015c1:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01015c4:	89 44 24 04          	mov    %eax,0x4(%esp)
c01015c8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01015cb:	89 04 24             	mov    %eax,(%esp)
c01015ce:	e8 e5 f5 ff ff       	call   c0100bb8 <rb_delete>
        check_tree(tree, root->left);
c01015d3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01015d6:	8b 40 08             	mov    0x8(%eax),%eax
c01015d9:	89 44 24 04          	mov    %eax,0x4(%esp)
c01015dd:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01015e0:	89 04 24             	mov    %eax,(%esp)
c01015e3:	e8 38 f8 ff ff       	call   c0100e20 <check_tree>
        all[i]->data = max;
        rb_insert(tree, &(all[i]->rb_link));
        check_tree(tree, root->left);
    }

    for (i = 0; i < max; i ++) {
c01015e8:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01015ec:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01015ef:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c01015f2:	0f 8c 75 ff ff ff    	jl     c010156d <check_rb_tree+0x4de>
        assert(node != NULL && rbn2data(node)->data == max);
        rb_delete(tree, node);
        check_tree(tree, root->left);
    }

    assert(rb_tree_empty(tree));
c01015f8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01015fb:	89 04 24             	mov    %eax,(%esp)
c01015fe:	e8 5b ec ff ff       	call   c010025e <rb_tree_empty>
c0101603:	85 c0                	test   %eax,%eax
c0101605:	75 24                	jne    c010162b <check_rb_tree+0x59c>
c0101607:	c7 44 24 0c cc d7 10 	movl   $0xc010d7cc,0xc(%esp)
c010160e:	c0 
c010160f:	c7 44 24 08 98 d5 10 	movl   $0xc010d598,0x8(%esp)
c0101616:	c0 
c0101617:	c7 44 24 04 00 02 00 	movl   $0x200,0x4(%esp)
c010161e:	00 
c010161f:	c7 04 24 ad d5 10 c0 	movl   $0xc010d5ad,(%esp)
c0101626:	e8 2d 0c 00 00       	call   c0102258 <__panic>

    for (i = 0; i < total; i ++) {
c010162b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0101632:	eb 3c                	jmp    c0101670 <check_rb_tree+0x5e1>
        rb_insert(tree, &(all[i]->rb_link));
c0101634:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101637:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010163e:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101641:	01 d0                	add    %edx,%eax
c0101643:	8b 00                	mov    (%eax),%eax
c0101645:	83 c0 04             	add    $0x4,%eax
c0101648:	89 44 24 04          	mov    %eax,0x4(%esp)
c010164c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010164f:	89 04 24             	mov    %eax,(%esp)
c0101652:	e8 c6 ef ff ff       	call   c010061d <rb_insert>
        check_tree(tree, root->left);
c0101657:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010165a:	8b 40 08             	mov    0x8(%eax),%eax
c010165d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0101661:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101664:	89 04 24             	mov    %eax,(%esp)
c0101667:	e8 b4 f7 ff ff       	call   c0100e20 <check_tree>
        check_tree(tree, root->left);
    }

    assert(rb_tree_empty(tree));

    for (i = 0; i < total; i ++) {
c010166c:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0101670:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101673:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0101676:	7c bc                	jl     c0101634 <check_rb_tree+0x5a5>
        rb_insert(tree, &(all[i]->rb_link));
        check_tree(tree, root->left);
    }

    rb_tree_destroy(tree);
c0101678:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010167b:	89 04 24             	mov    %eax,(%esp)
c010167e:	e8 95 f6 ff ff       	call   c0100d18 <rb_tree_destroy>

    for (i = 0; i < total; i ++) {
c0101683:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010168a:	eb 1d                	jmp    c01016a9 <check_rb_tree+0x61a>
        kfree(all[i]);
c010168c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010168f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0101696:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101699:	01 d0                	add    %edx,%eax
c010169b:	8b 00                	mov    (%eax),%eax
c010169d:	89 04 24             	mov    %eax,(%esp)
c01016a0:	e8 68 4a 00 00       	call   c010610d <kfree>
        check_tree(tree, root->left);
    }

    rb_tree_destroy(tree);

    for (i = 0; i < total; i ++) {
c01016a5:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01016a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01016ac:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c01016af:	7c db                	jl     c010168c <check_rb_tree+0x5fd>
        kfree(all[i]);
    }

    kfree(mark);
c01016b1:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01016b4:	89 04 24             	mov    %eax,(%esp)
c01016b7:	e8 51 4a 00 00       	call   c010610d <kfree>
    kfree(all);
c01016bc:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01016bf:	89 04 24             	mov    %eax,(%esp)
c01016c2:	e8 46 4a 00 00       	call   c010610d <kfree>
}
c01016c7:	83 c4 44             	add    $0x44,%esp
c01016ca:	5b                   	pop    %ebx
c01016cb:	5d                   	pop    %ebp
c01016cc:	c3                   	ret    

c01016cd <readline>:
 * The readline() function returns the text of the line read. If some errors
 * are happened, NULL is returned. The return value is a global variable,
 * thus it should be copied before it is used.
 * */
char *
readline(const char *prompt) {
c01016cd:	55                   	push   %ebp
c01016ce:	89 e5                	mov    %esp,%ebp
c01016d0:	83 ec 28             	sub    $0x28,%esp
    if (prompt != NULL) {
c01016d3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01016d7:	74 13                	je     c01016ec <readline+0x1f>
        cprintf("%s", prompt);
c01016d9:	8b 45 08             	mov    0x8(%ebp),%eax
c01016dc:	89 44 24 04          	mov    %eax,0x4(%esp)
c01016e0:	c7 04 24 e0 d7 10 c0 	movl   $0xc010d7e0,(%esp)
c01016e7:	e8 ea 00 00 00       	call   c01017d6 <cprintf>
    }
    int i = 0, c;
c01016ec:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    while (1) {
        c = getchar();
c01016f3:	e8 66 01 00 00       	call   c010185e <getchar>
c01016f8:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (c < 0) {
c01016fb:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01016ff:	79 07                	jns    c0101708 <readline+0x3b>
            return NULL;
c0101701:	b8 00 00 00 00       	mov    $0x0,%eax
c0101706:	eb 79                	jmp    c0101781 <readline+0xb4>
        }
        else if (c >= ' ' && i < BUFSIZE - 1) {
c0101708:	83 7d f0 1f          	cmpl   $0x1f,-0x10(%ebp)
c010170c:	7e 28                	jle    c0101736 <readline+0x69>
c010170e:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
c0101715:	7f 1f                	jg     c0101736 <readline+0x69>
            cputchar(c);
c0101717:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010171a:	89 04 24             	mov    %eax,(%esp)
c010171d:	e8 da 00 00 00       	call   c01017fc <cputchar>
            buf[i ++] = c;
c0101722:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101725:	8d 50 01             	lea    0x1(%eax),%edx
c0101728:	89 55 f4             	mov    %edx,-0xc(%ebp)
c010172b:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010172e:	88 90 60 ff 19 c0    	mov    %dl,-0x3fe600a0(%eax)
c0101734:	eb 46                	jmp    c010177c <readline+0xaf>
        }
        else if (c == '\b' && i > 0) {
c0101736:	83 7d f0 08          	cmpl   $0x8,-0x10(%ebp)
c010173a:	75 17                	jne    c0101753 <readline+0x86>
c010173c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0101740:	7e 11                	jle    c0101753 <readline+0x86>
            cputchar(c);
c0101742:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0101745:	89 04 24             	mov    %eax,(%esp)
c0101748:	e8 af 00 00 00       	call   c01017fc <cputchar>
            i --;
c010174d:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c0101751:	eb 29                	jmp    c010177c <readline+0xaf>
        }
        else if (c == '\n' || c == '\r') {
c0101753:	83 7d f0 0a          	cmpl   $0xa,-0x10(%ebp)
c0101757:	74 06                	je     c010175f <readline+0x92>
c0101759:	83 7d f0 0d          	cmpl   $0xd,-0x10(%ebp)
c010175d:	75 1d                	jne    c010177c <readline+0xaf>
            cputchar(c);
c010175f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0101762:	89 04 24             	mov    %eax,(%esp)
c0101765:	e8 92 00 00 00       	call   c01017fc <cputchar>
            buf[i] = '\0';
c010176a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010176d:	05 60 ff 19 c0       	add    $0xc019ff60,%eax
c0101772:	c6 00 00             	movb   $0x0,(%eax)
            return buf;
c0101775:	b8 60 ff 19 c0       	mov    $0xc019ff60,%eax
c010177a:	eb 05                	jmp    c0101781 <readline+0xb4>
        }
    }
c010177c:	e9 72 ff ff ff       	jmp    c01016f3 <readline+0x26>
}
c0101781:	c9                   	leave  
c0101782:	c3                   	ret    

c0101783 <cputch>:
/* *
 * cputch - writes a single character @c to stdout, and it will
 * increace the value of counter pointed by @cnt.
 * */
static void
cputch(int c, int *cnt) {
c0101783:	55                   	push   %ebp
c0101784:	89 e5                	mov    %esp,%ebp
c0101786:	83 ec 18             	sub    $0x18,%esp
    cons_putc(c);
c0101789:	8b 45 08             	mov    0x8(%ebp),%eax
c010178c:	89 04 24             	mov    %eax,(%esp)
c010178f:	e8 f6 13 00 00       	call   c0102b8a <cons_putc>
    (*cnt) ++;
c0101794:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101797:	8b 00                	mov    (%eax),%eax
c0101799:	8d 50 01             	lea    0x1(%eax),%edx
c010179c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010179f:	89 10                	mov    %edx,(%eax)
}
c01017a1:	c9                   	leave  
c01017a2:	c3                   	ret    

c01017a3 <vcprintf>:
 *
 * Call this function if you are already dealing with a va_list.
 * Or you probably want cprintf() instead.
 * */
int
vcprintf(const char *fmt, va_list ap) {
c01017a3:	55                   	push   %ebp
c01017a4:	89 e5                	mov    %esp,%ebp
c01017a6:	83 ec 28             	sub    $0x28,%esp
    int cnt = 0;
c01017a9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    vprintfmt((void*)cputch, &cnt, fmt, ap);
c01017b0:	8b 45 0c             	mov    0xc(%ebp),%eax
c01017b3:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01017b7:	8b 45 08             	mov    0x8(%ebp),%eax
c01017ba:	89 44 24 08          	mov    %eax,0x8(%esp)
c01017be:	8d 45 f4             	lea    -0xc(%ebp),%eax
c01017c1:	89 44 24 04          	mov    %eax,0x4(%esp)
c01017c5:	c7 04 24 83 17 10 c0 	movl   $0xc0101783,(%esp)
c01017cc:	e8 b7 b2 00 00       	call   c010ca88 <vprintfmt>
    return cnt;
c01017d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01017d4:	c9                   	leave  
c01017d5:	c3                   	ret    

c01017d6 <cprintf>:
 *
 * The return value is the number of characters which would be
 * written to stdout.
 * */
int
cprintf(const char *fmt, ...) {
c01017d6:	55                   	push   %ebp
c01017d7:	89 e5                	mov    %esp,%ebp
c01017d9:	83 ec 28             	sub    $0x28,%esp
    va_list ap;
    int cnt;
    va_start(ap, fmt);
c01017dc:	8d 45 0c             	lea    0xc(%ebp),%eax
c01017df:	89 45 f0             	mov    %eax,-0x10(%ebp)
    cnt = vcprintf(fmt, ap);
c01017e2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01017e5:	89 44 24 04          	mov    %eax,0x4(%esp)
c01017e9:	8b 45 08             	mov    0x8(%ebp),%eax
c01017ec:	89 04 24             	mov    %eax,(%esp)
c01017ef:	e8 af ff ff ff       	call   c01017a3 <vcprintf>
c01017f4:	89 45 f4             	mov    %eax,-0xc(%ebp)
    va_end(ap);
    return cnt;
c01017f7:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01017fa:	c9                   	leave  
c01017fb:	c3                   	ret    

c01017fc <cputchar>:

/* cputchar - writes a single character to stdout */
void
cputchar(int c) {
c01017fc:	55                   	push   %ebp
c01017fd:	89 e5                	mov    %esp,%ebp
c01017ff:	83 ec 18             	sub    $0x18,%esp
    cons_putc(c);
c0101802:	8b 45 08             	mov    0x8(%ebp),%eax
c0101805:	89 04 24             	mov    %eax,(%esp)
c0101808:	e8 7d 13 00 00       	call   c0102b8a <cons_putc>
}
c010180d:	c9                   	leave  
c010180e:	c3                   	ret    

c010180f <cputs>:
/* *
 * cputs- writes the string pointed by @str to stdout and
 * appends a newline character.
 * */
int
cputs(const char *str) {
c010180f:	55                   	push   %ebp
c0101810:	89 e5                	mov    %esp,%ebp
c0101812:	83 ec 28             	sub    $0x28,%esp
    int cnt = 0;
c0101815:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    char c;
    while ((c = *str ++) != '\0') {
c010181c:	eb 13                	jmp    c0101831 <cputs+0x22>
        cputch(c, &cnt);
c010181e:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
c0101822:	8d 55 f0             	lea    -0x10(%ebp),%edx
c0101825:	89 54 24 04          	mov    %edx,0x4(%esp)
c0101829:	89 04 24             	mov    %eax,(%esp)
c010182c:	e8 52 ff ff ff       	call   c0101783 <cputch>
 * */
int
cputs(const char *str) {
    int cnt = 0;
    char c;
    while ((c = *str ++) != '\0') {
c0101831:	8b 45 08             	mov    0x8(%ebp),%eax
c0101834:	8d 50 01             	lea    0x1(%eax),%edx
c0101837:	89 55 08             	mov    %edx,0x8(%ebp)
c010183a:	0f b6 00             	movzbl (%eax),%eax
c010183d:	88 45 f7             	mov    %al,-0x9(%ebp)
c0101840:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
c0101844:	75 d8                	jne    c010181e <cputs+0xf>
        cputch(c, &cnt);
    }
    cputch('\n', &cnt);
c0101846:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0101849:	89 44 24 04          	mov    %eax,0x4(%esp)
c010184d:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
c0101854:	e8 2a ff ff ff       	call   c0101783 <cputch>
    return cnt;
c0101859:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c010185c:	c9                   	leave  
c010185d:	c3                   	ret    

c010185e <getchar>:

/* getchar - reads a single non-zero character from stdin */
int
getchar(void) {
c010185e:	55                   	push   %ebp
c010185f:	89 e5                	mov    %esp,%ebp
c0101861:	83 ec 18             	sub    $0x18,%esp
    int c;
    while ((c = cons_getc()) == 0)
c0101864:	e8 5d 13 00 00       	call   c0102bc6 <cons_getc>
c0101869:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010186c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0101870:	74 f2                	je     c0101864 <getchar+0x6>
        /* do nothing */;
    return c;
c0101872:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0101875:	c9                   	leave  
c0101876:	c3                   	ret    

c0101877 <stab_binsearch>:
 *      stab_binsearch(stabs, &left, &right, N_SO, 0xf0100184);
 * will exit setting left = 118, right = 554.
 * */
static void
stab_binsearch(const struct stab *stabs, int *region_left, int *region_right,
           int type, uintptr_t addr) {
c0101877:	55                   	push   %ebp
c0101878:	89 e5                	mov    %esp,%ebp
c010187a:	83 ec 20             	sub    $0x20,%esp
    int l = *region_left, r = *region_right, any_matches = 0;
c010187d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101880:	8b 00                	mov    (%eax),%eax
c0101882:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0101885:	8b 45 10             	mov    0x10(%ebp),%eax
c0101888:	8b 00                	mov    (%eax),%eax
c010188a:	89 45 f8             	mov    %eax,-0x8(%ebp)
c010188d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    while (l <= r) {
c0101894:	e9 d2 00 00 00       	jmp    c010196b <stab_binsearch+0xf4>
        int true_m = (l + r) / 2, m = true_m;
c0101899:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010189c:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010189f:	01 d0                	add    %edx,%eax
c01018a1:	89 c2                	mov    %eax,%edx
c01018a3:	c1 ea 1f             	shr    $0x1f,%edx
c01018a6:	01 d0                	add    %edx,%eax
c01018a8:	d1 f8                	sar    %eax
c01018aa:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01018ad:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01018b0:	89 45 f0             	mov    %eax,-0x10(%ebp)

        // search for earliest stab with right type
        while (m >= l && stabs[m].n_type != type) {
c01018b3:	eb 04                	jmp    c01018b9 <stab_binsearch+0x42>
            m --;
c01018b5:	83 6d f0 01          	subl   $0x1,-0x10(%ebp)

    while (l <= r) {
        int true_m = (l + r) / 2, m = true_m;

        // search for earliest stab with right type
        while (m >= l && stabs[m].n_type != type) {
c01018b9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01018bc:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c01018bf:	7c 1f                	jl     c01018e0 <stab_binsearch+0x69>
c01018c1:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01018c4:	89 d0                	mov    %edx,%eax
c01018c6:	01 c0                	add    %eax,%eax
c01018c8:	01 d0                	add    %edx,%eax
c01018ca:	c1 e0 02             	shl    $0x2,%eax
c01018cd:	89 c2                	mov    %eax,%edx
c01018cf:	8b 45 08             	mov    0x8(%ebp),%eax
c01018d2:	01 d0                	add    %edx,%eax
c01018d4:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c01018d8:	0f b6 c0             	movzbl %al,%eax
c01018db:	3b 45 14             	cmp    0x14(%ebp),%eax
c01018de:	75 d5                	jne    c01018b5 <stab_binsearch+0x3e>
            m --;
        }
        if (m < l) {    // no match in [l, m]
c01018e0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01018e3:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c01018e6:	7d 0b                	jge    c01018f3 <stab_binsearch+0x7c>
            l = true_m + 1;
c01018e8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01018eb:	83 c0 01             	add    $0x1,%eax
c01018ee:	89 45 fc             	mov    %eax,-0x4(%ebp)
            continue;
c01018f1:	eb 78                	jmp    c010196b <stab_binsearch+0xf4>
        }

        // actual binary search
        any_matches = 1;
c01018f3:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
        if (stabs[m].n_value < addr) {
c01018fa:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01018fd:	89 d0                	mov    %edx,%eax
c01018ff:	01 c0                	add    %eax,%eax
c0101901:	01 d0                	add    %edx,%eax
c0101903:	c1 e0 02             	shl    $0x2,%eax
c0101906:	89 c2                	mov    %eax,%edx
c0101908:	8b 45 08             	mov    0x8(%ebp),%eax
c010190b:	01 d0                	add    %edx,%eax
c010190d:	8b 40 08             	mov    0x8(%eax),%eax
c0101910:	3b 45 18             	cmp    0x18(%ebp),%eax
c0101913:	73 13                	jae    c0101928 <stab_binsearch+0xb1>
            *region_left = m;
c0101915:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101918:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010191b:	89 10                	mov    %edx,(%eax)
            l = true_m + 1;
c010191d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101920:	83 c0 01             	add    $0x1,%eax
c0101923:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0101926:	eb 43                	jmp    c010196b <stab_binsearch+0xf4>
        } else if (stabs[m].n_value > addr) {
c0101928:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010192b:	89 d0                	mov    %edx,%eax
c010192d:	01 c0                	add    %eax,%eax
c010192f:	01 d0                	add    %edx,%eax
c0101931:	c1 e0 02             	shl    $0x2,%eax
c0101934:	89 c2                	mov    %eax,%edx
c0101936:	8b 45 08             	mov    0x8(%ebp),%eax
c0101939:	01 d0                	add    %edx,%eax
c010193b:	8b 40 08             	mov    0x8(%eax),%eax
c010193e:	3b 45 18             	cmp    0x18(%ebp),%eax
c0101941:	76 16                	jbe    c0101959 <stab_binsearch+0xe2>
            *region_right = m - 1;
c0101943:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0101946:	8d 50 ff             	lea    -0x1(%eax),%edx
c0101949:	8b 45 10             	mov    0x10(%ebp),%eax
c010194c:	89 10                	mov    %edx,(%eax)
            r = m - 1;
c010194e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0101951:	83 e8 01             	sub    $0x1,%eax
c0101954:	89 45 f8             	mov    %eax,-0x8(%ebp)
c0101957:	eb 12                	jmp    c010196b <stab_binsearch+0xf4>
        } else {
            // exact match for 'addr', but continue loop to find
            // *region_right
            *region_left = m;
c0101959:	8b 45 0c             	mov    0xc(%ebp),%eax
c010195c:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010195f:	89 10                	mov    %edx,(%eax)
            l = m;
c0101961:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0101964:	89 45 fc             	mov    %eax,-0x4(%ebp)
            addr ++;
c0101967:	83 45 18 01          	addl   $0x1,0x18(%ebp)
static void
stab_binsearch(const struct stab *stabs, int *region_left, int *region_right,
           int type, uintptr_t addr) {
    int l = *region_left, r = *region_right, any_matches = 0;

    while (l <= r) {
c010196b:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010196e:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c0101971:	0f 8e 22 ff ff ff    	jle    c0101899 <stab_binsearch+0x22>
            l = m;
            addr ++;
        }
    }

    if (!any_matches) {
c0101977:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010197b:	75 0f                	jne    c010198c <stab_binsearch+0x115>
        *region_right = *region_left - 1;
c010197d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101980:	8b 00                	mov    (%eax),%eax
c0101982:	8d 50 ff             	lea    -0x1(%eax),%edx
c0101985:	8b 45 10             	mov    0x10(%ebp),%eax
c0101988:	89 10                	mov    %edx,(%eax)
c010198a:	eb 3f                	jmp    c01019cb <stab_binsearch+0x154>
    }
    else {
        // find rightmost region containing 'addr'
        l = *region_right;
c010198c:	8b 45 10             	mov    0x10(%ebp),%eax
c010198f:	8b 00                	mov    (%eax),%eax
c0101991:	89 45 fc             	mov    %eax,-0x4(%ebp)
        for (; l > *region_left && stabs[l].n_type != type; l --)
c0101994:	eb 04                	jmp    c010199a <stab_binsearch+0x123>
c0101996:	83 6d fc 01          	subl   $0x1,-0x4(%ebp)
c010199a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010199d:	8b 00                	mov    (%eax),%eax
c010199f:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c01019a2:	7d 1f                	jge    c01019c3 <stab_binsearch+0x14c>
c01019a4:	8b 55 fc             	mov    -0x4(%ebp),%edx
c01019a7:	89 d0                	mov    %edx,%eax
c01019a9:	01 c0                	add    %eax,%eax
c01019ab:	01 d0                	add    %edx,%eax
c01019ad:	c1 e0 02             	shl    $0x2,%eax
c01019b0:	89 c2                	mov    %eax,%edx
c01019b2:	8b 45 08             	mov    0x8(%ebp),%eax
c01019b5:	01 d0                	add    %edx,%eax
c01019b7:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c01019bb:	0f b6 c0             	movzbl %al,%eax
c01019be:	3b 45 14             	cmp    0x14(%ebp),%eax
c01019c1:	75 d3                	jne    c0101996 <stab_binsearch+0x11f>
            /* do nothing */;
        *region_left = l;
c01019c3:	8b 45 0c             	mov    0xc(%ebp),%eax
c01019c6:	8b 55 fc             	mov    -0x4(%ebp),%edx
c01019c9:	89 10                	mov    %edx,(%eax)
    }
}
c01019cb:	c9                   	leave  
c01019cc:	c3                   	ret    

c01019cd <debuginfo_eip>:
 * the specified instruction address, @addr.  Returns 0 if information
 * was found, and negative if not.  But even if it returns negative it
 * has stored some information into '*info'.
 * */
int
debuginfo_eip(uintptr_t addr, struct eipdebuginfo *info) {
c01019cd:	55                   	push   %ebp
c01019ce:	89 e5                	mov    %esp,%ebp
c01019d0:	83 ec 58             	sub    $0x58,%esp
    const struct stab *stabs, *stab_end;
    const char *stabstr, *stabstr_end;

    info->eip_file = "<unknown>";
c01019d3:	8b 45 0c             	mov    0xc(%ebp),%eax
c01019d6:	c7 00 e4 d7 10 c0    	movl   $0xc010d7e4,(%eax)
    info->eip_line = 0;
c01019dc:	8b 45 0c             	mov    0xc(%ebp),%eax
c01019df:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    info->eip_fn_name = "<unknown>";
c01019e6:	8b 45 0c             	mov    0xc(%ebp),%eax
c01019e9:	c7 40 08 e4 d7 10 c0 	movl   $0xc010d7e4,0x8(%eax)
    info->eip_fn_namelen = 9;
c01019f0:	8b 45 0c             	mov    0xc(%ebp),%eax
c01019f3:	c7 40 0c 09 00 00 00 	movl   $0x9,0xc(%eax)
    info->eip_fn_addr = addr;
c01019fa:	8b 45 0c             	mov    0xc(%ebp),%eax
c01019fd:	8b 55 08             	mov    0x8(%ebp),%edx
c0101a00:	89 50 10             	mov    %edx,0x10(%eax)
    info->eip_fn_narg = 0;
c0101a03:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101a06:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)

    // find the relevant set of stabs
    if (addr >= KERNBASE) {
c0101a0d:	81 7d 08 ff ff ff bf 	cmpl   $0xbfffffff,0x8(%ebp)
c0101a14:	76 21                	jbe    c0101a37 <debuginfo_eip+0x6a>
        stabs = __STAB_BEGIN__;
c0101a16:	c7 45 f4 a0 ff 10 c0 	movl   $0xc010ffa0,-0xc(%ebp)
        stab_end = __STAB_END__;
c0101a1d:	c7 45 f0 04 5e 12 c0 	movl   $0xc0125e04,-0x10(%ebp)
        stabstr = __STABSTR_BEGIN__;
c0101a24:	c7 45 ec 05 5e 12 c0 	movl   $0xc0125e05,-0x14(%ebp)
        stabstr_end = __STABSTR_END__;
c0101a2b:	c7 45 e8 38 b0 12 c0 	movl   $0xc012b038,-0x18(%ebp)
c0101a32:	e9 ea 00 00 00       	jmp    c0101b21 <debuginfo_eip+0x154>
    }
    else {
        // user-program linker script, tools/user.ld puts the information about the
        // program's stabs (included __STAB_BEGIN__, __STAB_END__, __STABSTR_BEGIN__,
        // and __STABSTR_END__) in a structure located at virtual address USTAB.
        const struct userstabdata *usd = (struct userstabdata *)USTAB;
c0101a37:	c7 45 e4 00 00 20 00 	movl   $0x200000,-0x1c(%ebp)

        // make sure that debugger (current process) can access this memory
        struct mm_struct *mm;
        if (current == NULL || (mm = current->mm) == NULL) {
c0101a3e:	a1 88 0f 1a c0       	mov    0xc01a0f88,%eax
c0101a43:	85 c0                	test   %eax,%eax
c0101a45:	74 11                	je     c0101a58 <debuginfo_eip+0x8b>
c0101a47:	a1 88 0f 1a c0       	mov    0xc01a0f88,%eax
c0101a4c:	8b 40 18             	mov    0x18(%eax),%eax
c0101a4f:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0101a52:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0101a56:	75 0a                	jne    c0101a62 <debuginfo_eip+0x95>
            return -1;
c0101a58:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0101a5d:	e9 9e 03 00 00       	jmp    c0101e00 <debuginfo_eip+0x433>
        }
        if (!user_mem_check(mm, (uintptr_t)usd, sizeof(struct userstabdata), 0)) {
c0101a62:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0101a65:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0101a6c:	00 
c0101a6d:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
c0101a74:	00 
c0101a75:	89 44 24 04          	mov    %eax,0x4(%esp)
c0101a79:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0101a7c:	89 04 24             	mov    %eax,(%esp)
c0101a7f:	e8 05 8a 00 00       	call   c010a489 <user_mem_check>
c0101a84:	85 c0                	test   %eax,%eax
c0101a86:	75 0a                	jne    c0101a92 <debuginfo_eip+0xc5>
            return -1;
c0101a88:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0101a8d:	e9 6e 03 00 00       	jmp    c0101e00 <debuginfo_eip+0x433>
        }

        stabs = usd->stabs;
c0101a92:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0101a95:	8b 00                	mov    (%eax),%eax
c0101a97:	89 45 f4             	mov    %eax,-0xc(%ebp)
        stab_end = usd->stab_end;
c0101a9a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0101a9d:	8b 40 04             	mov    0x4(%eax),%eax
c0101aa0:	89 45 f0             	mov    %eax,-0x10(%ebp)
        stabstr = usd->stabstr;
c0101aa3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0101aa6:	8b 40 08             	mov    0x8(%eax),%eax
c0101aa9:	89 45 ec             	mov    %eax,-0x14(%ebp)
        stabstr_end = usd->stabstr_end;
c0101aac:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0101aaf:	8b 40 0c             	mov    0xc(%eax),%eax
c0101ab2:	89 45 e8             	mov    %eax,-0x18(%ebp)

        // make sure the STABS and string table memory is valid
        if (!user_mem_check(mm, (uintptr_t)stabs, (uintptr_t)stab_end - (uintptr_t)stabs, 0)) {
c0101ab5:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0101ab8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101abb:	29 c2                	sub    %eax,%edx
c0101abd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101ac0:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0101ac7:	00 
c0101ac8:	89 54 24 08          	mov    %edx,0x8(%esp)
c0101acc:	89 44 24 04          	mov    %eax,0x4(%esp)
c0101ad0:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0101ad3:	89 04 24             	mov    %eax,(%esp)
c0101ad6:	e8 ae 89 00 00       	call   c010a489 <user_mem_check>
c0101adb:	85 c0                	test   %eax,%eax
c0101add:	75 0a                	jne    c0101ae9 <debuginfo_eip+0x11c>
            return -1;
c0101adf:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0101ae4:	e9 17 03 00 00       	jmp    c0101e00 <debuginfo_eip+0x433>
        }
        if (!user_mem_check(mm, (uintptr_t)stabstr, stabstr_end - stabstr, 0)) {
c0101ae9:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0101aec:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101aef:	29 c2                	sub    %eax,%edx
c0101af1:	89 d0                	mov    %edx,%eax
c0101af3:	89 c2                	mov    %eax,%edx
c0101af5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101af8:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0101aff:	00 
c0101b00:	89 54 24 08          	mov    %edx,0x8(%esp)
c0101b04:	89 44 24 04          	mov    %eax,0x4(%esp)
c0101b08:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0101b0b:	89 04 24             	mov    %eax,(%esp)
c0101b0e:	e8 76 89 00 00       	call   c010a489 <user_mem_check>
c0101b13:	85 c0                	test   %eax,%eax
c0101b15:	75 0a                	jne    c0101b21 <debuginfo_eip+0x154>
            return -1;
c0101b17:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0101b1c:	e9 df 02 00 00       	jmp    c0101e00 <debuginfo_eip+0x433>
        }
    }

    // String table validity checks
    if (stabstr_end <= stabstr || stabstr_end[-1] != 0) {
c0101b21:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0101b24:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0101b27:	76 0d                	jbe    c0101b36 <debuginfo_eip+0x169>
c0101b29:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0101b2c:	83 e8 01             	sub    $0x1,%eax
c0101b2f:	0f b6 00             	movzbl (%eax),%eax
c0101b32:	84 c0                	test   %al,%al
c0101b34:	74 0a                	je     c0101b40 <debuginfo_eip+0x173>
        return -1;
c0101b36:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0101b3b:	e9 c0 02 00 00       	jmp    c0101e00 <debuginfo_eip+0x433>
    // 'eip'.  First, we find the basic source file containing 'eip'.
    // Then, we look in that source file for the function.  Then we look
    // for the line number.

    // Search the entire set of stabs for the source file (type N_SO).
    int lfile = 0, rfile = (stab_end - stabs) - 1;
c0101b40:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c0101b47:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0101b4a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101b4d:	29 c2                	sub    %eax,%edx
c0101b4f:	89 d0                	mov    %edx,%eax
c0101b51:	c1 f8 02             	sar    $0x2,%eax
c0101b54:	69 c0 ab aa aa aa    	imul   $0xaaaaaaab,%eax,%eax
c0101b5a:	83 e8 01             	sub    $0x1,%eax
c0101b5d:	89 45 d8             	mov    %eax,-0x28(%ebp)
    stab_binsearch(stabs, &lfile, &rfile, N_SO, addr);
c0101b60:	8b 45 08             	mov    0x8(%ebp),%eax
c0101b63:	89 44 24 10          	mov    %eax,0x10(%esp)
c0101b67:	c7 44 24 0c 64 00 00 	movl   $0x64,0xc(%esp)
c0101b6e:	00 
c0101b6f:	8d 45 d8             	lea    -0x28(%ebp),%eax
c0101b72:	89 44 24 08          	mov    %eax,0x8(%esp)
c0101b76:	8d 45 dc             	lea    -0x24(%ebp),%eax
c0101b79:	89 44 24 04          	mov    %eax,0x4(%esp)
c0101b7d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101b80:	89 04 24             	mov    %eax,(%esp)
c0101b83:	e8 ef fc ff ff       	call   c0101877 <stab_binsearch>
    if (lfile == 0)
c0101b88:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101b8b:	85 c0                	test   %eax,%eax
c0101b8d:	75 0a                	jne    c0101b99 <debuginfo_eip+0x1cc>
        return -1;
c0101b8f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0101b94:	e9 67 02 00 00       	jmp    c0101e00 <debuginfo_eip+0x433>

    // Search within that file's stabs for the function definition
    // (N_FUN).
    int lfun = lfile, rfun = rfile;
c0101b99:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101b9c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c0101b9f:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0101ba2:	89 45 d0             	mov    %eax,-0x30(%ebp)
    int lline, rline;
    stab_binsearch(stabs, &lfun, &rfun, N_FUN, addr);
c0101ba5:	8b 45 08             	mov    0x8(%ebp),%eax
c0101ba8:	89 44 24 10          	mov    %eax,0x10(%esp)
c0101bac:	c7 44 24 0c 24 00 00 	movl   $0x24,0xc(%esp)
c0101bb3:	00 
c0101bb4:	8d 45 d0             	lea    -0x30(%ebp),%eax
c0101bb7:	89 44 24 08          	mov    %eax,0x8(%esp)
c0101bbb:	8d 45 d4             	lea    -0x2c(%ebp),%eax
c0101bbe:	89 44 24 04          	mov    %eax,0x4(%esp)
c0101bc2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101bc5:	89 04 24             	mov    %eax,(%esp)
c0101bc8:	e8 aa fc ff ff       	call   c0101877 <stab_binsearch>

    if (lfun <= rfun) {
c0101bcd:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0101bd0:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0101bd3:	39 c2                	cmp    %eax,%edx
c0101bd5:	7f 7c                	jg     c0101c53 <debuginfo_eip+0x286>
        // stabs[lfun] points to the function name
        // in the string table, but check bounds just in case.
        if (stabs[lfun].n_strx < stabstr_end - stabstr) {
c0101bd7:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0101bda:	89 c2                	mov    %eax,%edx
c0101bdc:	89 d0                	mov    %edx,%eax
c0101bde:	01 c0                	add    %eax,%eax
c0101be0:	01 d0                	add    %edx,%eax
c0101be2:	c1 e0 02             	shl    $0x2,%eax
c0101be5:	89 c2                	mov    %eax,%edx
c0101be7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101bea:	01 d0                	add    %edx,%eax
c0101bec:	8b 10                	mov    (%eax),%edx
c0101bee:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c0101bf1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101bf4:	29 c1                	sub    %eax,%ecx
c0101bf6:	89 c8                	mov    %ecx,%eax
c0101bf8:	39 c2                	cmp    %eax,%edx
c0101bfa:	73 22                	jae    c0101c1e <debuginfo_eip+0x251>
            info->eip_fn_name = stabstr + stabs[lfun].n_strx;
c0101bfc:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0101bff:	89 c2                	mov    %eax,%edx
c0101c01:	89 d0                	mov    %edx,%eax
c0101c03:	01 c0                	add    %eax,%eax
c0101c05:	01 d0                	add    %edx,%eax
c0101c07:	c1 e0 02             	shl    $0x2,%eax
c0101c0a:	89 c2                	mov    %eax,%edx
c0101c0c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101c0f:	01 d0                	add    %edx,%eax
c0101c11:	8b 10                	mov    (%eax),%edx
c0101c13:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101c16:	01 c2                	add    %eax,%edx
c0101c18:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101c1b:	89 50 08             	mov    %edx,0x8(%eax)
        }
        info->eip_fn_addr = stabs[lfun].n_value;
c0101c1e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0101c21:	89 c2                	mov    %eax,%edx
c0101c23:	89 d0                	mov    %edx,%eax
c0101c25:	01 c0                	add    %eax,%eax
c0101c27:	01 d0                	add    %edx,%eax
c0101c29:	c1 e0 02             	shl    $0x2,%eax
c0101c2c:	89 c2                	mov    %eax,%edx
c0101c2e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101c31:	01 d0                	add    %edx,%eax
c0101c33:	8b 50 08             	mov    0x8(%eax),%edx
c0101c36:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101c39:	89 50 10             	mov    %edx,0x10(%eax)
        addr -= info->eip_fn_addr;
c0101c3c:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101c3f:	8b 40 10             	mov    0x10(%eax),%eax
c0101c42:	29 45 08             	sub    %eax,0x8(%ebp)
        // Search within the function definition for the line number.
        lline = lfun;
c0101c45:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0101c48:	89 45 cc             	mov    %eax,-0x34(%ebp)
        rline = rfun;
c0101c4b:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0101c4e:	89 45 c8             	mov    %eax,-0x38(%ebp)
c0101c51:	eb 15                	jmp    c0101c68 <debuginfo_eip+0x29b>
    } else {
        // Couldn't find function stab!  Maybe we're in an assembly
        // file.  Search the whole file for the line number.
        info->eip_fn_addr = addr;
c0101c53:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101c56:	8b 55 08             	mov    0x8(%ebp),%edx
c0101c59:	89 50 10             	mov    %edx,0x10(%eax)
        lline = lfile;
c0101c5c:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101c5f:	89 45 cc             	mov    %eax,-0x34(%ebp)
        rline = rfile;
c0101c62:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0101c65:	89 45 c8             	mov    %eax,-0x38(%ebp)
    }
    info->eip_fn_namelen = strfind(info->eip_fn_name, ':') - info->eip_fn_name;
c0101c68:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101c6b:	8b 40 08             	mov    0x8(%eax),%eax
c0101c6e:	c7 44 24 04 3a 00 00 	movl   $0x3a,0x4(%esp)
c0101c75:	00 
c0101c76:	89 04 24             	mov    %eax,(%esp)
c0101c79:	e8 3d b5 00 00       	call   c010d1bb <strfind>
c0101c7e:	89 c2                	mov    %eax,%edx
c0101c80:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101c83:	8b 40 08             	mov    0x8(%eax),%eax
c0101c86:	29 c2                	sub    %eax,%edx
c0101c88:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101c8b:	89 50 0c             	mov    %edx,0xc(%eax)

    // Search within [lline, rline] for the line number stab.
    // If found, set info->eip_line to the right line number.
    // If not found, return -1.
    stab_binsearch(stabs, &lline, &rline, N_SLINE, addr);
c0101c8e:	8b 45 08             	mov    0x8(%ebp),%eax
c0101c91:	89 44 24 10          	mov    %eax,0x10(%esp)
c0101c95:	c7 44 24 0c 44 00 00 	movl   $0x44,0xc(%esp)
c0101c9c:	00 
c0101c9d:	8d 45 c8             	lea    -0x38(%ebp),%eax
c0101ca0:	89 44 24 08          	mov    %eax,0x8(%esp)
c0101ca4:	8d 45 cc             	lea    -0x34(%ebp),%eax
c0101ca7:	89 44 24 04          	mov    %eax,0x4(%esp)
c0101cab:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101cae:	89 04 24             	mov    %eax,(%esp)
c0101cb1:	e8 c1 fb ff ff       	call   c0101877 <stab_binsearch>
    if (lline <= rline) {
c0101cb6:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0101cb9:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0101cbc:	39 c2                	cmp    %eax,%edx
c0101cbe:	7f 24                	jg     c0101ce4 <debuginfo_eip+0x317>
        info->eip_line = stabs[rline].n_desc;
c0101cc0:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0101cc3:	89 c2                	mov    %eax,%edx
c0101cc5:	89 d0                	mov    %edx,%eax
c0101cc7:	01 c0                	add    %eax,%eax
c0101cc9:	01 d0                	add    %edx,%eax
c0101ccb:	c1 e0 02             	shl    $0x2,%eax
c0101cce:	89 c2                	mov    %eax,%edx
c0101cd0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101cd3:	01 d0                	add    %edx,%eax
c0101cd5:	0f b7 40 06          	movzwl 0x6(%eax),%eax
c0101cd9:	0f b7 d0             	movzwl %ax,%edx
c0101cdc:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101cdf:	89 50 04             	mov    %edx,0x4(%eax)

    // Search backwards from the line number for the relevant filename stab.
    // We can't just use the "lfile" stab because inlined functions
    // can interpolate code from a different file!
    // Such included source files use the N_SOL stab type.
    while (lline >= lfile
c0101ce2:	eb 13                	jmp    c0101cf7 <debuginfo_eip+0x32a>
    // If not found, return -1.
    stab_binsearch(stabs, &lline, &rline, N_SLINE, addr);
    if (lline <= rline) {
        info->eip_line = stabs[rline].n_desc;
    } else {
        return -1;
c0101ce4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0101ce9:	e9 12 01 00 00       	jmp    c0101e00 <debuginfo_eip+0x433>
    // can interpolate code from a different file!
    // Such included source files use the N_SOL stab type.
    while (lline >= lfile
           && stabs[lline].n_type != N_SOL
           && (stabs[lline].n_type != N_SO || !stabs[lline].n_value)) {
        lline --;
c0101cee:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0101cf1:	83 e8 01             	sub    $0x1,%eax
c0101cf4:	89 45 cc             	mov    %eax,-0x34(%ebp)

    // Search backwards from the line number for the relevant filename stab.
    // We can't just use the "lfile" stab because inlined functions
    // can interpolate code from a different file!
    // Such included source files use the N_SOL stab type.
    while (lline >= lfile
c0101cf7:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0101cfa:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101cfd:	39 c2                	cmp    %eax,%edx
c0101cff:	7c 56                	jl     c0101d57 <debuginfo_eip+0x38a>
           && stabs[lline].n_type != N_SOL
c0101d01:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0101d04:	89 c2                	mov    %eax,%edx
c0101d06:	89 d0                	mov    %edx,%eax
c0101d08:	01 c0                	add    %eax,%eax
c0101d0a:	01 d0                	add    %edx,%eax
c0101d0c:	c1 e0 02             	shl    $0x2,%eax
c0101d0f:	89 c2                	mov    %eax,%edx
c0101d11:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101d14:	01 d0                	add    %edx,%eax
c0101d16:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c0101d1a:	3c 84                	cmp    $0x84,%al
c0101d1c:	74 39                	je     c0101d57 <debuginfo_eip+0x38a>
           && (stabs[lline].n_type != N_SO || !stabs[lline].n_value)) {
c0101d1e:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0101d21:	89 c2                	mov    %eax,%edx
c0101d23:	89 d0                	mov    %edx,%eax
c0101d25:	01 c0                	add    %eax,%eax
c0101d27:	01 d0                	add    %edx,%eax
c0101d29:	c1 e0 02             	shl    $0x2,%eax
c0101d2c:	89 c2                	mov    %eax,%edx
c0101d2e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101d31:	01 d0                	add    %edx,%eax
c0101d33:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c0101d37:	3c 64                	cmp    $0x64,%al
c0101d39:	75 b3                	jne    c0101cee <debuginfo_eip+0x321>
c0101d3b:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0101d3e:	89 c2                	mov    %eax,%edx
c0101d40:	89 d0                	mov    %edx,%eax
c0101d42:	01 c0                	add    %eax,%eax
c0101d44:	01 d0                	add    %edx,%eax
c0101d46:	c1 e0 02             	shl    $0x2,%eax
c0101d49:	89 c2                	mov    %eax,%edx
c0101d4b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101d4e:	01 d0                	add    %edx,%eax
c0101d50:	8b 40 08             	mov    0x8(%eax),%eax
c0101d53:	85 c0                	test   %eax,%eax
c0101d55:	74 97                	je     c0101cee <debuginfo_eip+0x321>
        lline --;
    }
    if (lline >= lfile && stabs[lline].n_strx < stabstr_end - stabstr) {
c0101d57:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0101d5a:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101d5d:	39 c2                	cmp    %eax,%edx
c0101d5f:	7c 46                	jl     c0101da7 <debuginfo_eip+0x3da>
c0101d61:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0101d64:	89 c2                	mov    %eax,%edx
c0101d66:	89 d0                	mov    %edx,%eax
c0101d68:	01 c0                	add    %eax,%eax
c0101d6a:	01 d0                	add    %edx,%eax
c0101d6c:	c1 e0 02             	shl    $0x2,%eax
c0101d6f:	89 c2                	mov    %eax,%edx
c0101d71:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101d74:	01 d0                	add    %edx,%eax
c0101d76:	8b 10                	mov    (%eax),%edx
c0101d78:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c0101d7b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101d7e:	29 c1                	sub    %eax,%ecx
c0101d80:	89 c8                	mov    %ecx,%eax
c0101d82:	39 c2                	cmp    %eax,%edx
c0101d84:	73 21                	jae    c0101da7 <debuginfo_eip+0x3da>
        info->eip_file = stabstr + stabs[lline].n_strx;
c0101d86:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0101d89:	89 c2                	mov    %eax,%edx
c0101d8b:	89 d0                	mov    %edx,%eax
c0101d8d:	01 c0                	add    %eax,%eax
c0101d8f:	01 d0                	add    %edx,%eax
c0101d91:	c1 e0 02             	shl    $0x2,%eax
c0101d94:	89 c2                	mov    %eax,%edx
c0101d96:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101d99:	01 d0                	add    %edx,%eax
c0101d9b:	8b 10                	mov    (%eax),%edx
c0101d9d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101da0:	01 c2                	add    %eax,%edx
c0101da2:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101da5:	89 10                	mov    %edx,(%eax)
    }

    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
c0101da7:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0101daa:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0101dad:	39 c2                	cmp    %eax,%edx
c0101daf:	7d 4a                	jge    c0101dfb <debuginfo_eip+0x42e>
        for (lline = lfun + 1;
c0101db1:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0101db4:	83 c0 01             	add    $0x1,%eax
c0101db7:	89 45 cc             	mov    %eax,-0x34(%ebp)
c0101dba:	eb 18                	jmp    c0101dd4 <debuginfo_eip+0x407>
             lline < rfun && stabs[lline].n_type == N_PSYM;
             lline ++) {
            info->eip_fn_narg ++;
c0101dbc:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101dbf:	8b 40 14             	mov    0x14(%eax),%eax
c0101dc2:	8d 50 01             	lea    0x1(%eax),%edx
c0101dc5:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101dc8:	89 50 14             	mov    %edx,0x14(%eax)
    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
        for (lline = lfun + 1;
             lline < rfun && stabs[lline].n_type == N_PSYM;
             lline ++) {
c0101dcb:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0101dce:	83 c0 01             	add    $0x1,%eax
c0101dd1:	89 45 cc             	mov    %eax,-0x34(%ebp)

    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
        for (lline = lfun + 1;
             lline < rfun && stabs[lline].n_type == N_PSYM;
c0101dd4:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0101dd7:	8b 45 d0             	mov    -0x30(%ebp),%eax
    }

    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
        for (lline = lfun + 1;
c0101dda:	39 c2                	cmp    %eax,%edx
c0101ddc:	7d 1d                	jge    c0101dfb <debuginfo_eip+0x42e>
             lline < rfun && stabs[lline].n_type == N_PSYM;
c0101dde:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0101de1:	89 c2                	mov    %eax,%edx
c0101de3:	89 d0                	mov    %edx,%eax
c0101de5:	01 c0                	add    %eax,%eax
c0101de7:	01 d0                	add    %edx,%eax
c0101de9:	c1 e0 02             	shl    $0x2,%eax
c0101dec:	89 c2                	mov    %eax,%edx
c0101dee:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101df1:	01 d0                	add    %edx,%eax
c0101df3:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c0101df7:	3c a0                	cmp    $0xa0,%al
c0101df9:	74 c1                	je     c0101dbc <debuginfo_eip+0x3ef>
             lline ++) {
            info->eip_fn_narg ++;
        }
    }
    return 0;
c0101dfb:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0101e00:	c9                   	leave  
c0101e01:	c3                   	ret    

c0101e02 <print_kerninfo>:
 * print_kerninfo - print the information about kernel, including the location
 * of kernel entry, the start addresses of data and text segements, the start
 * address of free memory and how many memory that kernel has used.
 * */
void
print_kerninfo(void) {
c0101e02:	55                   	push   %ebp
c0101e03:	89 e5                	mov    %esp,%ebp
c0101e05:	83 ec 18             	sub    $0x18,%esp
    extern char etext[], edata[], end[], kern_init[];
    cprintf("Special kernel symbols:\n");
c0101e08:	c7 04 24 ee d7 10 c0 	movl   $0xc010d7ee,(%esp)
c0101e0f:	e8 c2 f9 ff ff       	call   c01017d6 <cprintf>
    cprintf("  entry  0x%08x (phys)\n", kern_init);
c0101e14:	c7 44 24 04 2a 00 10 	movl   $0xc010002a,0x4(%esp)
c0101e1b:	c0 
c0101e1c:	c7 04 24 07 d8 10 c0 	movl   $0xc010d807,(%esp)
c0101e23:	e8 ae f9 ff ff       	call   c01017d6 <cprintf>
    cprintf("  etext  0x%08x (phys)\n", etext);
c0101e28:	c7 44 24 04 d0 d4 10 	movl   $0xc010d4d0,0x4(%esp)
c0101e2f:	c0 
c0101e30:	c7 04 24 1f d8 10 c0 	movl   $0xc010d81f,(%esp)
c0101e37:	e8 9a f9 ff ff       	call   c01017d6 <cprintf>
    cprintf("  edata  0x%08x (phys)\n", edata);
c0101e3c:	c7 44 24 04 2a ff 19 	movl   $0xc019ff2a,0x4(%esp)
c0101e43:	c0 
c0101e44:	c7 04 24 37 d8 10 c0 	movl   $0xc010d837,(%esp)
c0101e4b:	e8 86 f9 ff ff       	call   c01017d6 <cprintf>
    cprintf("  end    0x%08x (phys)\n", end);
c0101e50:	c7 44 24 04 b8 30 1a 	movl   $0xc01a30b8,0x4(%esp)
c0101e57:	c0 
c0101e58:	c7 04 24 4f d8 10 c0 	movl   $0xc010d84f,(%esp)
c0101e5f:	e8 72 f9 ff ff       	call   c01017d6 <cprintf>
    cprintf("Kernel executable memory footprint: %dKB\n", (end - kern_init + 1023)/1024);
c0101e64:	b8 b8 30 1a c0       	mov    $0xc01a30b8,%eax
c0101e69:	8d 90 ff 03 00 00    	lea    0x3ff(%eax),%edx
c0101e6f:	b8 2a 00 10 c0       	mov    $0xc010002a,%eax
c0101e74:	29 c2                	sub    %eax,%edx
c0101e76:	89 d0                	mov    %edx,%eax
c0101e78:	8d 90 ff 03 00 00    	lea    0x3ff(%eax),%edx
c0101e7e:	85 c0                	test   %eax,%eax
c0101e80:	0f 48 c2             	cmovs  %edx,%eax
c0101e83:	c1 f8 0a             	sar    $0xa,%eax
c0101e86:	89 44 24 04          	mov    %eax,0x4(%esp)
c0101e8a:	c7 04 24 68 d8 10 c0 	movl   $0xc010d868,(%esp)
c0101e91:	e8 40 f9 ff ff       	call   c01017d6 <cprintf>
}
c0101e96:	c9                   	leave  
c0101e97:	c3                   	ret    

c0101e98 <print_debuginfo>:
/* *
 * print_debuginfo - read and print the stat information for the address @eip,
 * and info.eip_fn_addr should be the first address of the related function.
 * */
void
print_debuginfo(uintptr_t eip) {
c0101e98:	55                   	push   %ebp
c0101e99:	89 e5                	mov    %esp,%ebp
c0101e9b:	81 ec 48 01 00 00    	sub    $0x148,%esp
    struct eipdebuginfo info;
    if (debuginfo_eip(eip, &info) != 0) {
c0101ea1:	8d 45 dc             	lea    -0x24(%ebp),%eax
c0101ea4:	89 44 24 04          	mov    %eax,0x4(%esp)
c0101ea8:	8b 45 08             	mov    0x8(%ebp),%eax
c0101eab:	89 04 24             	mov    %eax,(%esp)
c0101eae:	e8 1a fb ff ff       	call   c01019cd <debuginfo_eip>
c0101eb3:	85 c0                	test   %eax,%eax
c0101eb5:	74 15                	je     c0101ecc <print_debuginfo+0x34>
        cprintf("    <unknow>: -- 0x%08x --\n", eip);
c0101eb7:	8b 45 08             	mov    0x8(%ebp),%eax
c0101eba:	89 44 24 04          	mov    %eax,0x4(%esp)
c0101ebe:	c7 04 24 92 d8 10 c0 	movl   $0xc010d892,(%esp)
c0101ec5:	e8 0c f9 ff ff       	call   c01017d6 <cprintf>
c0101eca:	eb 6d                	jmp    c0101f39 <print_debuginfo+0xa1>
    }
    else {
        char fnname[256];
        int j;
        for (j = 0; j < info.eip_fn_namelen; j ++) {
c0101ecc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0101ed3:	eb 1c                	jmp    c0101ef1 <print_debuginfo+0x59>
            fnname[j] = info.eip_fn_name[j];
c0101ed5:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0101ed8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101edb:	01 d0                	add    %edx,%eax
c0101edd:	0f b6 00             	movzbl (%eax),%eax
c0101ee0:	8d 8d dc fe ff ff    	lea    -0x124(%ebp),%ecx
c0101ee6:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0101ee9:	01 ca                	add    %ecx,%edx
c0101eeb:	88 02                	mov    %al,(%edx)
        cprintf("    <unknow>: -- 0x%08x --\n", eip);
    }
    else {
        char fnname[256];
        int j;
        for (j = 0; j < info.eip_fn_namelen; j ++) {
c0101eed:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0101ef1:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0101ef4:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0101ef7:	7f dc                	jg     c0101ed5 <print_debuginfo+0x3d>
            fnname[j] = info.eip_fn_name[j];
        }
        fnname[j] = '\0';
c0101ef9:	8d 95 dc fe ff ff    	lea    -0x124(%ebp),%edx
c0101eff:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101f02:	01 d0                	add    %edx,%eax
c0101f04:	c6 00 00             	movb   $0x0,(%eax)
        cprintf("    %s:%d: %s+%d\n", info.eip_file, info.eip_line,
                fnname, eip - info.eip_fn_addr);
c0101f07:	8b 45 ec             	mov    -0x14(%ebp),%eax
        int j;
        for (j = 0; j < info.eip_fn_namelen; j ++) {
            fnname[j] = info.eip_fn_name[j];
        }
        fnname[j] = '\0';
        cprintf("    %s:%d: %s+%d\n", info.eip_file, info.eip_line,
c0101f0a:	8b 55 08             	mov    0x8(%ebp),%edx
c0101f0d:	89 d1                	mov    %edx,%ecx
c0101f0f:	29 c1                	sub    %eax,%ecx
c0101f11:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0101f14:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101f17:	89 4c 24 10          	mov    %ecx,0x10(%esp)
c0101f1b:	8d 8d dc fe ff ff    	lea    -0x124(%ebp),%ecx
c0101f21:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c0101f25:	89 54 24 08          	mov    %edx,0x8(%esp)
c0101f29:	89 44 24 04          	mov    %eax,0x4(%esp)
c0101f2d:	c7 04 24 ae d8 10 c0 	movl   $0xc010d8ae,(%esp)
c0101f34:	e8 9d f8 ff ff       	call   c01017d6 <cprintf>
                fnname, eip - info.eip_fn_addr);
    }
}
c0101f39:	c9                   	leave  
c0101f3a:	c3                   	ret    

c0101f3b <read_eip>:

static __noinline uint32_t
read_eip(void) {
c0101f3b:	55                   	push   %ebp
c0101f3c:	89 e5                	mov    %esp,%ebp
c0101f3e:	83 ec 10             	sub    $0x10,%esp
    uint32_t eip;
    asm volatile("movl 4(%%ebp), %0" : "=r" (eip));
c0101f41:	8b 45 04             	mov    0x4(%ebp),%eax
c0101f44:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return eip;
c0101f47:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0101f4a:	c9                   	leave  
c0101f4b:	c3                   	ret    

c0101f4c <print_stackframe>:
 *
 * Note that, the length of ebp-chain is limited. In boot/bootasm.S, before jumping
 * to the kernel entry, the value of ebp has been set to zero, that's the boundary.
 * */
void
print_stackframe(void) {
c0101f4c:	55                   	push   %ebp
c0101f4d:	89 e5                	mov    %esp,%ebp
c0101f4f:	83 ec 38             	sub    $0x38,%esp
}

static inline uint32_t
read_ebp(void) {
    uint32_t ebp;
    asm volatile ("movl %%ebp, %0" : "=r" (ebp));
c0101f52:	89 e8                	mov    %ebp,%eax
c0101f54:	89 45 e0             	mov    %eax,-0x20(%ebp)
    return ebp;
c0101f57:	8b 45 e0             	mov    -0x20(%ebp),%eax
      *    (3.4) call print_debuginfo(eip-1) to print the C calling function name and line number, etc.
      *    (3.5) popup a calling stackframe
      *           NOTICE: the calling funciton's return addr eip  = ss:[ebp+4]
      *                   the calling funciton's ebp = ss:[ebp]
      */
    uint32_t ebp = read_ebp(), eip = read_eip();
c0101f5a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0101f5d:	e8 d9 ff ff ff       	call   c0101f3b <read_eip>
c0101f62:	89 45 f0             	mov    %eax,-0x10(%ebp)

    int i, j;
    for (i = 0; ebp != 0 && i < STACKFRAME_DEPTH; i ++) {
c0101f65:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0101f6c:	e9 88 00 00 00       	jmp    c0101ff9 <print_stackframe+0xad>
        cprintf("ebp:0x%08x eip:0x%08x args:", ebp, eip);
c0101f71:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0101f74:	89 44 24 08          	mov    %eax,0x8(%esp)
c0101f78:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101f7b:	89 44 24 04          	mov    %eax,0x4(%esp)
c0101f7f:	c7 04 24 c0 d8 10 c0 	movl   $0xc010d8c0,(%esp)
c0101f86:	e8 4b f8 ff ff       	call   c01017d6 <cprintf>
        uint32_t *args = (uint32_t *)ebp + 2;
c0101f8b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101f8e:	83 c0 08             	add    $0x8,%eax
c0101f91:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        for (j = 0; j < 4; j ++) {
c0101f94:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c0101f9b:	eb 25                	jmp    c0101fc2 <print_stackframe+0x76>
            cprintf("0x%08x ", args[j]);
c0101f9d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0101fa0:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0101fa7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0101faa:	01 d0                	add    %edx,%eax
c0101fac:	8b 00                	mov    (%eax),%eax
c0101fae:	89 44 24 04          	mov    %eax,0x4(%esp)
c0101fb2:	c7 04 24 dc d8 10 c0 	movl   $0xc010d8dc,(%esp)
c0101fb9:	e8 18 f8 ff ff       	call   c01017d6 <cprintf>

    int i, j;
    for (i = 0; ebp != 0 && i < STACKFRAME_DEPTH; i ++) {
        cprintf("ebp:0x%08x eip:0x%08x args:", ebp, eip);
        uint32_t *args = (uint32_t *)ebp + 2;
        for (j = 0; j < 4; j ++) {
c0101fbe:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
c0101fc2:	83 7d e8 03          	cmpl   $0x3,-0x18(%ebp)
c0101fc6:	7e d5                	jle    c0101f9d <print_stackframe+0x51>
            cprintf("0x%08x ", args[j]);
        }
        cprintf("\n");
c0101fc8:	c7 04 24 e4 d8 10 c0 	movl   $0xc010d8e4,(%esp)
c0101fcf:	e8 02 f8 ff ff       	call   c01017d6 <cprintf>
        print_debuginfo(eip - 1);
c0101fd4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0101fd7:	83 e8 01             	sub    $0x1,%eax
c0101fda:	89 04 24             	mov    %eax,(%esp)
c0101fdd:	e8 b6 fe ff ff       	call   c0101e98 <print_debuginfo>
        eip = ((uint32_t *)ebp)[1];
c0101fe2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101fe5:	83 c0 04             	add    $0x4,%eax
c0101fe8:	8b 00                	mov    (%eax),%eax
c0101fea:	89 45 f0             	mov    %eax,-0x10(%ebp)
        ebp = ((uint32_t *)ebp)[0];
c0101fed:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101ff0:	8b 00                	mov    (%eax),%eax
c0101ff2:	89 45 f4             	mov    %eax,-0xc(%ebp)
      *                   the calling funciton's ebp = ss:[ebp]
      */
    uint32_t ebp = read_ebp(), eip = read_eip();

    int i, j;
    for (i = 0; ebp != 0 && i < STACKFRAME_DEPTH; i ++) {
c0101ff5:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0101ff9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0101ffd:	74 0a                	je     c0102009 <print_stackframe+0xbd>
c0101fff:	83 7d ec 13          	cmpl   $0x13,-0x14(%ebp)
c0102003:	0f 8e 68 ff ff ff    	jle    c0101f71 <print_stackframe+0x25>
        cprintf("\n");
        print_debuginfo(eip - 1);
        eip = ((uint32_t *)ebp)[1];
        ebp = ((uint32_t *)ebp)[0];
    }
}
c0102009:	c9                   	leave  
c010200a:	c3                   	ret    

c010200b <parse>:
#define MAXARGS         16
#define WHITESPACE      " \t\n\r"

/* parse - parse the command buffer into whitespace-separated arguments */
static int
parse(char *buf, char **argv) {
c010200b:	55                   	push   %ebp
c010200c:	89 e5                	mov    %esp,%ebp
c010200e:	83 ec 28             	sub    $0x28,%esp
    int argc = 0;
c0102011:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    while (1) {
        // find global whitespace
        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
c0102018:	eb 0c                	jmp    c0102026 <parse+0x1b>
            *buf ++ = '\0';
c010201a:	8b 45 08             	mov    0x8(%ebp),%eax
c010201d:	8d 50 01             	lea    0x1(%eax),%edx
c0102020:	89 55 08             	mov    %edx,0x8(%ebp)
c0102023:	c6 00 00             	movb   $0x0,(%eax)
static int
parse(char *buf, char **argv) {
    int argc = 0;
    while (1) {
        // find global whitespace
        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
c0102026:	8b 45 08             	mov    0x8(%ebp),%eax
c0102029:	0f b6 00             	movzbl (%eax),%eax
c010202c:	84 c0                	test   %al,%al
c010202e:	74 1d                	je     c010204d <parse+0x42>
c0102030:	8b 45 08             	mov    0x8(%ebp),%eax
c0102033:	0f b6 00             	movzbl (%eax),%eax
c0102036:	0f be c0             	movsbl %al,%eax
c0102039:	89 44 24 04          	mov    %eax,0x4(%esp)
c010203d:	c7 04 24 68 d9 10 c0 	movl   $0xc010d968,(%esp)
c0102044:	e8 3f b1 00 00       	call   c010d188 <strchr>
c0102049:	85 c0                	test   %eax,%eax
c010204b:	75 cd                	jne    c010201a <parse+0xf>
            *buf ++ = '\0';
        }
        if (*buf == '\0') {
c010204d:	8b 45 08             	mov    0x8(%ebp),%eax
c0102050:	0f b6 00             	movzbl (%eax),%eax
c0102053:	84 c0                	test   %al,%al
c0102055:	75 02                	jne    c0102059 <parse+0x4e>
            break;
c0102057:	eb 67                	jmp    c01020c0 <parse+0xb5>
        }

        // save and scan past next arg
        if (argc == MAXARGS - 1) {
c0102059:	83 7d f4 0f          	cmpl   $0xf,-0xc(%ebp)
c010205d:	75 14                	jne    c0102073 <parse+0x68>
            cprintf("Too many arguments (max %d).\n", MAXARGS);
c010205f:	c7 44 24 04 10 00 00 	movl   $0x10,0x4(%esp)
c0102066:	00 
c0102067:	c7 04 24 6d d9 10 c0 	movl   $0xc010d96d,(%esp)
c010206e:	e8 63 f7 ff ff       	call   c01017d6 <cprintf>
        }
        argv[argc ++] = buf;
c0102073:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102076:	8d 50 01             	lea    0x1(%eax),%edx
c0102079:	89 55 f4             	mov    %edx,-0xc(%ebp)
c010207c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0102083:	8b 45 0c             	mov    0xc(%ebp),%eax
c0102086:	01 c2                	add    %eax,%edx
c0102088:	8b 45 08             	mov    0x8(%ebp),%eax
c010208b:	89 02                	mov    %eax,(%edx)
        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
c010208d:	eb 04                	jmp    c0102093 <parse+0x88>
            buf ++;
c010208f:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        // save and scan past next arg
        if (argc == MAXARGS - 1) {
            cprintf("Too many arguments (max %d).\n", MAXARGS);
        }
        argv[argc ++] = buf;
        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
c0102093:	8b 45 08             	mov    0x8(%ebp),%eax
c0102096:	0f b6 00             	movzbl (%eax),%eax
c0102099:	84 c0                	test   %al,%al
c010209b:	74 1d                	je     c01020ba <parse+0xaf>
c010209d:	8b 45 08             	mov    0x8(%ebp),%eax
c01020a0:	0f b6 00             	movzbl (%eax),%eax
c01020a3:	0f be c0             	movsbl %al,%eax
c01020a6:	89 44 24 04          	mov    %eax,0x4(%esp)
c01020aa:	c7 04 24 68 d9 10 c0 	movl   $0xc010d968,(%esp)
c01020b1:	e8 d2 b0 00 00       	call   c010d188 <strchr>
c01020b6:	85 c0                	test   %eax,%eax
c01020b8:	74 d5                	je     c010208f <parse+0x84>
            buf ++;
        }
    }
c01020ba:	90                   	nop
static int
parse(char *buf, char **argv) {
    int argc = 0;
    while (1) {
        // find global whitespace
        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
c01020bb:	e9 66 ff ff ff       	jmp    c0102026 <parse+0x1b>
        argv[argc ++] = buf;
        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
            buf ++;
        }
    }
    return argc;
c01020c0:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01020c3:	c9                   	leave  
c01020c4:	c3                   	ret    

c01020c5 <runcmd>:
/* *
 * runcmd - parse the input string, split it into separated arguments
 * and then lookup and invoke some related commands/
 * */
static int
runcmd(char *buf, struct trapframe *tf) {
c01020c5:	55                   	push   %ebp
c01020c6:	89 e5                	mov    %esp,%ebp
c01020c8:	83 ec 68             	sub    $0x68,%esp
    char *argv[MAXARGS];
    int argc = parse(buf, argv);
c01020cb:	8d 45 b0             	lea    -0x50(%ebp),%eax
c01020ce:	89 44 24 04          	mov    %eax,0x4(%esp)
c01020d2:	8b 45 08             	mov    0x8(%ebp),%eax
c01020d5:	89 04 24             	mov    %eax,(%esp)
c01020d8:	e8 2e ff ff ff       	call   c010200b <parse>
c01020dd:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (argc == 0) {
c01020e0:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01020e4:	75 0a                	jne    c01020f0 <runcmd+0x2b>
        return 0;
c01020e6:	b8 00 00 00 00       	mov    $0x0,%eax
c01020eb:	e9 85 00 00 00       	jmp    c0102175 <runcmd+0xb0>
    }
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c01020f0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01020f7:	eb 5c                	jmp    c0102155 <runcmd+0x90>
        if (strcmp(commands[i].name, argv[0]) == 0) {
c01020f9:	8b 4d b0             	mov    -0x50(%ebp),%ecx
c01020fc:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01020ff:	89 d0                	mov    %edx,%eax
c0102101:	01 c0                	add    %eax,%eax
c0102103:	01 d0                	add    %edx,%eax
c0102105:	c1 e0 02             	shl    $0x2,%eax
c0102108:	05 20 e0 12 c0       	add    $0xc012e020,%eax
c010210d:	8b 00                	mov    (%eax),%eax
c010210f:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c0102113:	89 04 24             	mov    %eax,(%esp)
c0102116:	e8 ce af 00 00       	call   c010d0e9 <strcmp>
c010211b:	85 c0                	test   %eax,%eax
c010211d:	75 32                	jne    c0102151 <runcmd+0x8c>
            return commands[i].func(argc - 1, argv + 1, tf);
c010211f:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0102122:	89 d0                	mov    %edx,%eax
c0102124:	01 c0                	add    %eax,%eax
c0102126:	01 d0                	add    %edx,%eax
c0102128:	c1 e0 02             	shl    $0x2,%eax
c010212b:	05 20 e0 12 c0       	add    $0xc012e020,%eax
c0102130:	8b 40 08             	mov    0x8(%eax),%eax
c0102133:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0102136:	8d 4a ff             	lea    -0x1(%edx),%ecx
c0102139:	8b 55 0c             	mov    0xc(%ebp),%edx
c010213c:	89 54 24 08          	mov    %edx,0x8(%esp)
c0102140:	8d 55 b0             	lea    -0x50(%ebp),%edx
c0102143:	83 c2 04             	add    $0x4,%edx
c0102146:	89 54 24 04          	mov    %edx,0x4(%esp)
c010214a:	89 0c 24             	mov    %ecx,(%esp)
c010214d:	ff d0                	call   *%eax
c010214f:	eb 24                	jmp    c0102175 <runcmd+0xb0>
    int argc = parse(buf, argv);
    if (argc == 0) {
        return 0;
    }
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0102151:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0102155:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102158:	83 f8 02             	cmp    $0x2,%eax
c010215b:	76 9c                	jbe    c01020f9 <runcmd+0x34>
        if (strcmp(commands[i].name, argv[0]) == 0) {
            return commands[i].func(argc - 1, argv + 1, tf);
        }
    }
    cprintf("Unknown command '%s'\n", argv[0]);
c010215d:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0102160:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102164:	c7 04 24 8b d9 10 c0 	movl   $0xc010d98b,(%esp)
c010216b:	e8 66 f6 ff ff       	call   c01017d6 <cprintf>
    return 0;
c0102170:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0102175:	c9                   	leave  
c0102176:	c3                   	ret    

c0102177 <kmonitor>:

/***** Implementations of basic kernel monitor commands *****/

void
kmonitor(struct trapframe *tf) {
c0102177:	55                   	push   %ebp
c0102178:	89 e5                	mov    %esp,%ebp
c010217a:	83 ec 28             	sub    $0x28,%esp
    cprintf("Welcome to the kernel debug monitor!!\n");
c010217d:	c7 04 24 a4 d9 10 c0 	movl   $0xc010d9a4,(%esp)
c0102184:	e8 4d f6 ff ff       	call   c01017d6 <cprintf>
    cprintf("Type 'help' for a list of commands.\n");
c0102189:	c7 04 24 cc d9 10 c0 	movl   $0xc010d9cc,(%esp)
c0102190:	e8 41 f6 ff ff       	call   c01017d6 <cprintf>

    if (tf != NULL) {
c0102195:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0102199:	74 0b                	je     c01021a6 <kmonitor+0x2f>
        print_trapframe(tf);
c010219b:	8b 45 08             	mov    0x8(%ebp),%eax
c010219e:	89 04 24             	mov    %eax,(%esp)
c01021a1:	e8 c8 16 00 00       	call   c010386e <print_trapframe>
    }

    char *buf;
    while (1) {
        if ((buf = readline("K> ")) != NULL) {
c01021a6:	c7 04 24 f1 d9 10 c0 	movl   $0xc010d9f1,(%esp)
c01021ad:	e8 1b f5 ff ff       	call   c01016cd <readline>
c01021b2:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01021b5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01021b9:	74 18                	je     c01021d3 <kmonitor+0x5c>
            if (runcmd(buf, tf) < 0) {
c01021bb:	8b 45 08             	mov    0x8(%ebp),%eax
c01021be:	89 44 24 04          	mov    %eax,0x4(%esp)
c01021c2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01021c5:	89 04 24             	mov    %eax,(%esp)
c01021c8:	e8 f8 fe ff ff       	call   c01020c5 <runcmd>
c01021cd:	85 c0                	test   %eax,%eax
c01021cf:	79 02                	jns    c01021d3 <kmonitor+0x5c>
                break;
c01021d1:	eb 02                	jmp    c01021d5 <kmonitor+0x5e>
            }
        }
    }
c01021d3:	eb d1                	jmp    c01021a6 <kmonitor+0x2f>
}
c01021d5:	c9                   	leave  
c01021d6:	c3                   	ret    

c01021d7 <mon_help>:

/* mon_help - print the information about mon_* functions */
int
mon_help(int argc, char **argv, struct trapframe *tf) {
c01021d7:	55                   	push   %ebp
c01021d8:	89 e5                	mov    %esp,%ebp
c01021da:	83 ec 28             	sub    $0x28,%esp
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c01021dd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01021e4:	eb 3f                	jmp    c0102225 <mon_help+0x4e>
        cprintf("%s - %s\n", commands[i].name, commands[i].desc);
c01021e6:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01021e9:	89 d0                	mov    %edx,%eax
c01021eb:	01 c0                	add    %eax,%eax
c01021ed:	01 d0                	add    %edx,%eax
c01021ef:	c1 e0 02             	shl    $0x2,%eax
c01021f2:	05 20 e0 12 c0       	add    $0xc012e020,%eax
c01021f7:	8b 48 04             	mov    0x4(%eax),%ecx
c01021fa:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01021fd:	89 d0                	mov    %edx,%eax
c01021ff:	01 c0                	add    %eax,%eax
c0102201:	01 d0                	add    %edx,%eax
c0102203:	c1 e0 02             	shl    $0x2,%eax
c0102206:	05 20 e0 12 c0       	add    $0xc012e020,%eax
c010220b:	8b 00                	mov    (%eax),%eax
c010220d:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0102211:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102215:	c7 04 24 f5 d9 10 c0 	movl   $0xc010d9f5,(%esp)
c010221c:	e8 b5 f5 ff ff       	call   c01017d6 <cprintf>

/* mon_help - print the information about mon_* functions */
int
mon_help(int argc, char **argv, struct trapframe *tf) {
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0102221:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0102225:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102228:	83 f8 02             	cmp    $0x2,%eax
c010222b:	76 b9                	jbe    c01021e6 <mon_help+0xf>
        cprintf("%s - %s\n", commands[i].name, commands[i].desc);
    }
    return 0;
c010222d:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0102232:	c9                   	leave  
c0102233:	c3                   	ret    

c0102234 <mon_kerninfo>:
/* *
 * mon_kerninfo - call print_kerninfo in kern/debug/kdebug.c to
 * print the memory occupancy in kernel.
 * */
int
mon_kerninfo(int argc, char **argv, struct trapframe *tf) {
c0102234:	55                   	push   %ebp
c0102235:	89 e5                	mov    %esp,%ebp
c0102237:	83 ec 08             	sub    $0x8,%esp
    print_kerninfo();
c010223a:	e8 c3 fb ff ff       	call   c0101e02 <print_kerninfo>
    return 0;
c010223f:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0102244:	c9                   	leave  
c0102245:	c3                   	ret    

c0102246 <mon_backtrace>:
/* *
 * mon_backtrace - call print_stackframe in kern/debug/kdebug.c to
 * print a backtrace of the stack.
 * */
int
mon_backtrace(int argc, char **argv, struct trapframe *tf) {
c0102246:	55                   	push   %ebp
c0102247:	89 e5                	mov    %esp,%ebp
c0102249:	83 ec 08             	sub    $0x8,%esp
    print_stackframe();
c010224c:	e8 fb fc ff ff       	call   c0101f4c <print_stackframe>
    return 0;
c0102251:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0102256:	c9                   	leave  
c0102257:	c3                   	ret    

c0102258 <__panic>:
/* *
 * __panic - __panic is called on unresolvable fatal errors. it prints
 * "panic: 'message'", and then enters the kernel monitor.
 * */
void
__panic(const char *file, int line, const char *fmt, ...) {
c0102258:	55                   	push   %ebp
c0102259:	89 e5                	mov    %esp,%ebp
c010225b:	83 ec 28             	sub    $0x28,%esp
    if (is_panic) {
c010225e:	a1 60 03 1a c0       	mov    0xc01a0360,%eax
c0102263:	85 c0                	test   %eax,%eax
c0102265:	74 02                	je     c0102269 <__panic+0x11>
        goto panic_dead;
c0102267:	eb 48                	jmp    c01022b1 <__panic+0x59>
    }
    is_panic = 1;
c0102269:	c7 05 60 03 1a c0 01 	movl   $0x1,0xc01a0360
c0102270:	00 00 00 

    // print the 'message'
    va_list ap;
    va_start(ap, fmt);
c0102273:	8d 45 14             	lea    0x14(%ebp),%eax
c0102276:	89 45 f4             	mov    %eax,-0xc(%ebp)
    cprintf("kernel panic at %s:%d:\n    ", file, line);
c0102279:	8b 45 0c             	mov    0xc(%ebp),%eax
c010227c:	89 44 24 08          	mov    %eax,0x8(%esp)
c0102280:	8b 45 08             	mov    0x8(%ebp),%eax
c0102283:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102287:	c7 04 24 fe d9 10 c0 	movl   $0xc010d9fe,(%esp)
c010228e:	e8 43 f5 ff ff       	call   c01017d6 <cprintf>
    vcprintf(fmt, ap);
c0102293:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102296:	89 44 24 04          	mov    %eax,0x4(%esp)
c010229a:	8b 45 10             	mov    0x10(%ebp),%eax
c010229d:	89 04 24             	mov    %eax,(%esp)
c01022a0:	e8 fe f4 ff ff       	call   c01017a3 <vcprintf>
    cprintf("\n");
c01022a5:	c7 04 24 1a da 10 c0 	movl   $0xc010da1a,(%esp)
c01022ac:	e8 25 f5 ff ff       	call   c01017d6 <cprintf>
    va_end(ap);

panic_dead:
    intr_disable();
c01022b1:	e8 fa 11 00 00       	call   c01034b0 <intr_disable>
    while (1) {
        kmonitor(NULL);
c01022b6:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c01022bd:	e8 b5 fe ff ff       	call   c0102177 <kmonitor>
    }
c01022c2:	eb f2                	jmp    c01022b6 <__panic+0x5e>

c01022c4 <__warn>:
}

/* __warn - like panic, but don't */
void
__warn(const char *file, int line, const char *fmt, ...) {
c01022c4:	55                   	push   %ebp
c01022c5:	89 e5                	mov    %esp,%ebp
c01022c7:	83 ec 28             	sub    $0x28,%esp
    va_list ap;
    va_start(ap, fmt);
c01022ca:	8d 45 14             	lea    0x14(%ebp),%eax
c01022cd:	89 45 f4             	mov    %eax,-0xc(%ebp)
    cprintf("kernel warning at %s:%d:\n    ", file, line);
c01022d0:	8b 45 0c             	mov    0xc(%ebp),%eax
c01022d3:	89 44 24 08          	mov    %eax,0x8(%esp)
c01022d7:	8b 45 08             	mov    0x8(%ebp),%eax
c01022da:	89 44 24 04          	mov    %eax,0x4(%esp)
c01022de:	c7 04 24 1c da 10 c0 	movl   $0xc010da1c,(%esp)
c01022e5:	e8 ec f4 ff ff       	call   c01017d6 <cprintf>
    vcprintf(fmt, ap);
c01022ea:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01022ed:	89 44 24 04          	mov    %eax,0x4(%esp)
c01022f1:	8b 45 10             	mov    0x10(%ebp),%eax
c01022f4:	89 04 24             	mov    %eax,(%esp)
c01022f7:	e8 a7 f4 ff ff       	call   c01017a3 <vcprintf>
    cprintf("\n");
c01022fc:	c7 04 24 1a da 10 c0 	movl   $0xc010da1a,(%esp)
c0102303:	e8 ce f4 ff ff       	call   c01017d6 <cprintf>
    va_end(ap);
}
c0102308:	c9                   	leave  
c0102309:	c3                   	ret    

c010230a <is_kernel_panic>:

bool
is_kernel_panic(void) {
c010230a:	55                   	push   %ebp
c010230b:	89 e5                	mov    %esp,%ebp
    return is_panic;
c010230d:	a1 60 03 1a c0       	mov    0xc01a0360,%eax
}
c0102312:	5d                   	pop    %ebp
c0102313:	c3                   	ret    

c0102314 <clock_init>:
/* *
 * clock_init - initialize 8253 clock to interrupt 100 times per second,
 * and then enable IRQ_TIMER.
 * */
void
clock_init(void) {
c0102314:	55                   	push   %ebp
c0102315:	89 e5                	mov    %esp,%ebp
c0102317:	83 ec 28             	sub    $0x28,%esp
c010231a:	66 c7 45 f6 43 00    	movw   $0x43,-0xa(%ebp)
c0102320:	c6 45 f5 34          	movb   $0x34,-0xb(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0102324:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c0102328:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c010232c:	ee                   	out    %al,(%dx)
c010232d:	66 c7 45 f2 40 00    	movw   $0x40,-0xe(%ebp)
c0102333:	c6 45 f1 9c          	movb   $0x9c,-0xf(%ebp)
c0102337:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c010233b:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c010233f:	ee                   	out    %al,(%dx)
c0102340:	66 c7 45 ee 40 00    	movw   $0x40,-0x12(%ebp)
c0102346:	c6 45 ed 2e          	movb   $0x2e,-0x13(%ebp)
c010234a:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c010234e:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0102352:	ee                   	out    %al,(%dx)
    outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
    outb(IO_TIMER1, TIMER_DIV(100) % 256);
    outb(IO_TIMER1, TIMER_DIV(100) / 256);

    // initialize time counter 'ticks' to zero
    ticks = 0;
c0102353:	c7 05 b8 2f 1a c0 00 	movl   $0x0,0xc01a2fb8
c010235a:	00 00 00 

    cprintf("++ setup timer interrupts\n");
c010235d:	c7 04 24 3a da 10 c0 	movl   $0xc010da3a,(%esp)
c0102364:	e8 6d f4 ff ff       	call   c01017d6 <cprintf>
    pic_enable(IRQ_TIMER);
c0102369:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0102370:	e8 99 11 00 00       	call   c010350e <pic_enable>
}
c0102375:	c9                   	leave  
c0102376:	c3                   	ret    

c0102377 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c0102377:	55                   	push   %ebp
c0102378:	89 e5                	mov    %esp,%ebp
c010237a:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c010237d:	9c                   	pushf  
c010237e:	58                   	pop    %eax
c010237f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c0102382:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c0102385:	25 00 02 00 00       	and    $0x200,%eax
c010238a:	85 c0                	test   %eax,%eax
c010238c:	74 0c                	je     c010239a <__intr_save+0x23>
        intr_disable();
c010238e:	e8 1d 11 00 00       	call   c01034b0 <intr_disable>
        return 1;
c0102393:	b8 01 00 00 00       	mov    $0x1,%eax
c0102398:	eb 05                	jmp    c010239f <__intr_save+0x28>
    }
    return 0;
c010239a:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010239f:	c9                   	leave  
c01023a0:	c3                   	ret    

c01023a1 <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c01023a1:	55                   	push   %ebp
c01023a2:	89 e5                	mov    %esp,%ebp
c01023a4:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c01023a7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01023ab:	74 05                	je     c01023b2 <__intr_restore+0x11>
        intr_enable();
c01023ad:	e8 f8 10 00 00       	call   c01034aa <intr_enable>
    }
}
c01023b2:	c9                   	leave  
c01023b3:	c3                   	ret    

c01023b4 <delay>:
#include <memlayout.h>
#include <sync.h>

/* stupid I/O delay routine necessitated by historical PC design flaws */
static void
delay(void) {
c01023b4:	55                   	push   %ebp
c01023b5:	89 e5                	mov    %esp,%ebp
c01023b7:	83 ec 10             	sub    $0x10,%esp
c01023ba:	66 c7 45 fe 84 00    	movw   $0x84,-0x2(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c01023c0:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
c01023c4:	89 c2                	mov    %eax,%edx
c01023c6:	ec                   	in     (%dx),%al
c01023c7:	88 45 fd             	mov    %al,-0x3(%ebp)
c01023ca:	66 c7 45 fa 84 00    	movw   $0x84,-0x6(%ebp)
c01023d0:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c01023d4:	89 c2                	mov    %eax,%edx
c01023d6:	ec                   	in     (%dx),%al
c01023d7:	88 45 f9             	mov    %al,-0x7(%ebp)
c01023da:	66 c7 45 f6 84 00    	movw   $0x84,-0xa(%ebp)
c01023e0:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c01023e4:	89 c2                	mov    %eax,%edx
c01023e6:	ec                   	in     (%dx),%al
c01023e7:	88 45 f5             	mov    %al,-0xb(%ebp)
c01023ea:	66 c7 45 f2 84 00    	movw   $0x84,-0xe(%ebp)
c01023f0:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c01023f4:	89 c2                	mov    %eax,%edx
c01023f6:	ec                   	in     (%dx),%al
c01023f7:	88 45 f1             	mov    %al,-0xf(%ebp)
    inb(0x84);
    inb(0x84);
    inb(0x84);
    inb(0x84);
}
c01023fa:	c9                   	leave  
c01023fb:	c3                   	ret    

c01023fc <cga_init>:
static uint16_t addr_6845;

/* TEXT-mode CGA/VGA display output */

static void
cga_init(void) {
c01023fc:	55                   	push   %ebp
c01023fd:	89 e5                	mov    %esp,%ebp
c01023ff:	83 ec 20             	sub    $0x20,%esp
    volatile uint16_t *cp = (uint16_t *)(CGA_BUF + KERNBASE);
c0102402:	c7 45 fc 00 80 0b c0 	movl   $0xc00b8000,-0x4(%ebp)
    uint16_t was = *cp;
c0102409:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010240c:	0f b7 00             	movzwl (%eax),%eax
c010240f:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
    *cp = (uint16_t) 0xA55A;
c0102413:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102416:	66 c7 00 5a a5       	movw   $0xa55a,(%eax)
    if (*cp != 0xA55A) {
c010241b:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010241e:	0f b7 00             	movzwl (%eax),%eax
c0102421:	66 3d 5a a5          	cmp    $0xa55a,%ax
c0102425:	74 12                	je     c0102439 <cga_init+0x3d>
        cp = (uint16_t*)(MONO_BUF + KERNBASE);
c0102427:	c7 45 fc 00 00 0b c0 	movl   $0xc00b0000,-0x4(%ebp)
        addr_6845 = MONO_BASE;
c010242e:	66 c7 05 86 03 1a c0 	movw   $0x3b4,0xc01a0386
c0102435:	b4 03 
c0102437:	eb 13                	jmp    c010244c <cga_init+0x50>
    } else {
        *cp = was;
c0102439:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010243c:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
c0102440:	66 89 10             	mov    %dx,(%eax)
        addr_6845 = CGA_BASE;
c0102443:	66 c7 05 86 03 1a c0 	movw   $0x3d4,0xc01a0386
c010244a:	d4 03 
    }

    // Extract cursor location
    uint32_t pos;
    outb(addr_6845, 14);
c010244c:	0f b7 05 86 03 1a c0 	movzwl 0xc01a0386,%eax
c0102453:	0f b7 c0             	movzwl %ax,%eax
c0102456:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
c010245a:	c6 45 f1 0e          	movb   $0xe,-0xf(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c010245e:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c0102462:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0102466:	ee                   	out    %al,(%dx)
    pos = inb(addr_6845 + 1) << 8;
c0102467:	0f b7 05 86 03 1a c0 	movzwl 0xc01a0386,%eax
c010246e:	83 c0 01             	add    $0x1,%eax
c0102471:	0f b7 c0             	movzwl %ax,%eax
c0102474:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0102478:	0f b7 45 ee          	movzwl -0x12(%ebp),%eax
c010247c:	89 c2                	mov    %eax,%edx
c010247e:	ec                   	in     (%dx),%al
c010247f:	88 45 ed             	mov    %al,-0x13(%ebp)
    return data;
c0102482:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0102486:	0f b6 c0             	movzbl %al,%eax
c0102489:	c1 e0 08             	shl    $0x8,%eax
c010248c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    outb(addr_6845, 15);
c010248f:	0f b7 05 86 03 1a c0 	movzwl 0xc01a0386,%eax
c0102496:	0f b7 c0             	movzwl %ax,%eax
c0102499:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
c010249d:	c6 45 e9 0f          	movb   $0xf,-0x17(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c01024a1:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c01024a5:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c01024a9:	ee                   	out    %al,(%dx)
    pos |= inb(addr_6845 + 1);
c01024aa:	0f b7 05 86 03 1a c0 	movzwl 0xc01a0386,%eax
c01024b1:	83 c0 01             	add    $0x1,%eax
c01024b4:	0f b7 c0             	movzwl %ax,%eax
c01024b7:	66 89 45 e6          	mov    %ax,-0x1a(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c01024bb:	0f b7 45 e6          	movzwl -0x1a(%ebp),%eax
c01024bf:	89 c2                	mov    %eax,%edx
c01024c1:	ec                   	in     (%dx),%al
c01024c2:	88 45 e5             	mov    %al,-0x1b(%ebp)
    return data;
c01024c5:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c01024c9:	0f b6 c0             	movzbl %al,%eax
c01024cc:	09 45 f4             	or     %eax,-0xc(%ebp)

    crt_buf = (uint16_t*) cp;
c01024cf:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01024d2:	a3 80 03 1a c0       	mov    %eax,0xc01a0380
    crt_pos = pos;
c01024d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01024da:	66 a3 84 03 1a c0    	mov    %ax,0xc01a0384
}
c01024e0:	c9                   	leave  
c01024e1:	c3                   	ret    

c01024e2 <serial_init>:

static bool serial_exists = 0;

static void
serial_init(void) {
c01024e2:	55                   	push   %ebp
c01024e3:	89 e5                	mov    %esp,%ebp
c01024e5:	83 ec 48             	sub    $0x48,%esp
c01024e8:	66 c7 45 f6 fa 03    	movw   $0x3fa,-0xa(%ebp)
c01024ee:	c6 45 f5 00          	movb   $0x0,-0xb(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c01024f2:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c01024f6:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c01024fa:	ee                   	out    %al,(%dx)
c01024fb:	66 c7 45 f2 fb 03    	movw   $0x3fb,-0xe(%ebp)
c0102501:	c6 45 f1 80          	movb   $0x80,-0xf(%ebp)
c0102505:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c0102509:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c010250d:	ee                   	out    %al,(%dx)
c010250e:	66 c7 45 ee f8 03    	movw   $0x3f8,-0x12(%ebp)
c0102514:	c6 45 ed 0c          	movb   $0xc,-0x13(%ebp)
c0102518:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c010251c:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0102520:	ee                   	out    %al,(%dx)
c0102521:	66 c7 45 ea f9 03    	movw   $0x3f9,-0x16(%ebp)
c0102527:	c6 45 e9 00          	movb   $0x0,-0x17(%ebp)
c010252b:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c010252f:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0102533:	ee                   	out    %al,(%dx)
c0102534:	66 c7 45 e6 fb 03    	movw   $0x3fb,-0x1a(%ebp)
c010253a:	c6 45 e5 03          	movb   $0x3,-0x1b(%ebp)
c010253e:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c0102542:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c0102546:	ee                   	out    %al,(%dx)
c0102547:	66 c7 45 e2 fc 03    	movw   $0x3fc,-0x1e(%ebp)
c010254d:	c6 45 e1 00          	movb   $0x0,-0x1f(%ebp)
c0102551:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
c0102555:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c0102559:	ee                   	out    %al,(%dx)
c010255a:	66 c7 45 de f9 03    	movw   $0x3f9,-0x22(%ebp)
c0102560:	c6 45 dd 01          	movb   $0x1,-0x23(%ebp)
c0102564:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c0102568:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
c010256c:	ee                   	out    %al,(%dx)
c010256d:	66 c7 45 da fd 03    	movw   $0x3fd,-0x26(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0102573:	0f b7 45 da          	movzwl -0x26(%ebp),%eax
c0102577:	89 c2                	mov    %eax,%edx
c0102579:	ec                   	in     (%dx),%al
c010257a:	88 45 d9             	mov    %al,-0x27(%ebp)
    return data;
c010257d:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
    // Enable rcv interrupts
    outb(COM1 + COM_IER, COM_IER_RDI);

    // Clear any preexisting overrun indications and interrupts
    // Serial port doesn't exist if COM_LSR returns 0xFF
    serial_exists = (inb(COM1 + COM_LSR) != 0xFF);
c0102581:	3c ff                	cmp    $0xff,%al
c0102583:	0f 95 c0             	setne  %al
c0102586:	0f b6 c0             	movzbl %al,%eax
c0102589:	a3 88 03 1a c0       	mov    %eax,0xc01a0388
c010258e:	66 c7 45 d6 fa 03    	movw   $0x3fa,-0x2a(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0102594:	0f b7 45 d6          	movzwl -0x2a(%ebp),%eax
c0102598:	89 c2                	mov    %eax,%edx
c010259a:	ec                   	in     (%dx),%al
c010259b:	88 45 d5             	mov    %al,-0x2b(%ebp)
c010259e:	66 c7 45 d2 f8 03    	movw   $0x3f8,-0x2e(%ebp)
c01025a4:	0f b7 45 d2          	movzwl -0x2e(%ebp),%eax
c01025a8:	89 c2                	mov    %eax,%edx
c01025aa:	ec                   	in     (%dx),%al
c01025ab:	88 45 d1             	mov    %al,-0x2f(%ebp)
    (void) inb(COM1+COM_IIR);
    (void) inb(COM1+COM_RX);

    if (serial_exists) {
c01025ae:	a1 88 03 1a c0       	mov    0xc01a0388,%eax
c01025b3:	85 c0                	test   %eax,%eax
c01025b5:	74 0c                	je     c01025c3 <serial_init+0xe1>
        pic_enable(IRQ_COM1);
c01025b7:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
c01025be:	e8 4b 0f 00 00       	call   c010350e <pic_enable>
    }
}
c01025c3:	c9                   	leave  
c01025c4:	c3                   	ret    

c01025c5 <lpt_putc_sub>:

static void
lpt_putc_sub(int c) {
c01025c5:	55                   	push   %ebp
c01025c6:	89 e5                	mov    %esp,%ebp
c01025c8:	83 ec 20             	sub    $0x20,%esp
    int i;
    for (i = 0; !(inb(LPTPORT + 1) & 0x80) && i < 12800; i ++) {
c01025cb:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c01025d2:	eb 09                	jmp    c01025dd <lpt_putc_sub+0x18>
        delay();
c01025d4:	e8 db fd ff ff       	call   c01023b4 <delay>
}

static void
lpt_putc_sub(int c) {
    int i;
    for (i = 0; !(inb(LPTPORT + 1) & 0x80) && i < 12800; i ++) {
c01025d9:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c01025dd:	66 c7 45 fa 79 03    	movw   $0x379,-0x6(%ebp)
c01025e3:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c01025e7:	89 c2                	mov    %eax,%edx
c01025e9:	ec                   	in     (%dx),%al
c01025ea:	88 45 f9             	mov    %al,-0x7(%ebp)
    return data;
c01025ed:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c01025f1:	84 c0                	test   %al,%al
c01025f3:	78 09                	js     c01025fe <lpt_putc_sub+0x39>
c01025f5:	81 7d fc ff 31 00 00 	cmpl   $0x31ff,-0x4(%ebp)
c01025fc:	7e d6                	jle    c01025d4 <lpt_putc_sub+0xf>
        delay();
    }
    outb(LPTPORT + 0, c);
c01025fe:	8b 45 08             	mov    0x8(%ebp),%eax
c0102601:	0f b6 c0             	movzbl %al,%eax
c0102604:	66 c7 45 f6 78 03    	movw   $0x378,-0xa(%ebp)
c010260a:	88 45 f5             	mov    %al,-0xb(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c010260d:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c0102611:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c0102615:	ee                   	out    %al,(%dx)
c0102616:	66 c7 45 f2 7a 03    	movw   $0x37a,-0xe(%ebp)
c010261c:	c6 45 f1 0d          	movb   $0xd,-0xf(%ebp)
c0102620:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c0102624:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0102628:	ee                   	out    %al,(%dx)
c0102629:	66 c7 45 ee 7a 03    	movw   $0x37a,-0x12(%ebp)
c010262f:	c6 45 ed 08          	movb   $0x8,-0x13(%ebp)
c0102633:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0102637:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c010263b:	ee                   	out    %al,(%dx)
    outb(LPTPORT + 2, 0x08 | 0x04 | 0x01);
    outb(LPTPORT + 2, 0x08);
}
c010263c:	c9                   	leave  
c010263d:	c3                   	ret    

c010263e <lpt_putc>:

/* lpt_putc - copy console output to parallel port */
static void
lpt_putc(int c) {
c010263e:	55                   	push   %ebp
c010263f:	89 e5                	mov    %esp,%ebp
c0102641:	83 ec 04             	sub    $0x4,%esp
    if (c != '\b') {
c0102644:	83 7d 08 08          	cmpl   $0x8,0x8(%ebp)
c0102648:	74 0d                	je     c0102657 <lpt_putc+0x19>
        lpt_putc_sub(c);
c010264a:	8b 45 08             	mov    0x8(%ebp),%eax
c010264d:	89 04 24             	mov    %eax,(%esp)
c0102650:	e8 70 ff ff ff       	call   c01025c5 <lpt_putc_sub>
c0102655:	eb 24                	jmp    c010267b <lpt_putc+0x3d>
    }
    else {
        lpt_putc_sub('\b');
c0102657:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c010265e:	e8 62 ff ff ff       	call   c01025c5 <lpt_putc_sub>
        lpt_putc_sub(' ');
c0102663:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
c010266a:	e8 56 ff ff ff       	call   c01025c5 <lpt_putc_sub>
        lpt_putc_sub('\b');
c010266f:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c0102676:	e8 4a ff ff ff       	call   c01025c5 <lpt_putc_sub>
    }
}
c010267b:	c9                   	leave  
c010267c:	c3                   	ret    

c010267d <cga_putc>:

/* cga_putc - print character to console */
static void
cga_putc(int c) {
c010267d:	55                   	push   %ebp
c010267e:	89 e5                	mov    %esp,%ebp
c0102680:	53                   	push   %ebx
c0102681:	83 ec 34             	sub    $0x34,%esp
    // set black on white
    if (!(c & ~0xFF)) {
c0102684:	8b 45 08             	mov    0x8(%ebp),%eax
c0102687:	b0 00                	mov    $0x0,%al
c0102689:	85 c0                	test   %eax,%eax
c010268b:	75 07                	jne    c0102694 <cga_putc+0x17>
        c |= 0x0700;
c010268d:	81 4d 08 00 07 00 00 	orl    $0x700,0x8(%ebp)
    }

    switch (c & 0xff) {
c0102694:	8b 45 08             	mov    0x8(%ebp),%eax
c0102697:	0f b6 c0             	movzbl %al,%eax
c010269a:	83 f8 0a             	cmp    $0xa,%eax
c010269d:	74 4c                	je     c01026eb <cga_putc+0x6e>
c010269f:	83 f8 0d             	cmp    $0xd,%eax
c01026a2:	74 57                	je     c01026fb <cga_putc+0x7e>
c01026a4:	83 f8 08             	cmp    $0x8,%eax
c01026a7:	0f 85 88 00 00 00    	jne    c0102735 <cga_putc+0xb8>
    case '\b':
        if (crt_pos > 0) {
c01026ad:	0f b7 05 84 03 1a c0 	movzwl 0xc01a0384,%eax
c01026b4:	66 85 c0             	test   %ax,%ax
c01026b7:	74 30                	je     c01026e9 <cga_putc+0x6c>
            crt_pos --;
c01026b9:	0f b7 05 84 03 1a c0 	movzwl 0xc01a0384,%eax
c01026c0:	83 e8 01             	sub    $0x1,%eax
c01026c3:	66 a3 84 03 1a c0    	mov    %ax,0xc01a0384
            crt_buf[crt_pos] = (c & ~0xff) | ' ';
c01026c9:	a1 80 03 1a c0       	mov    0xc01a0380,%eax
c01026ce:	0f b7 15 84 03 1a c0 	movzwl 0xc01a0384,%edx
c01026d5:	0f b7 d2             	movzwl %dx,%edx
c01026d8:	01 d2                	add    %edx,%edx
c01026da:	01 c2                	add    %eax,%edx
c01026dc:	8b 45 08             	mov    0x8(%ebp),%eax
c01026df:	b0 00                	mov    $0x0,%al
c01026e1:	83 c8 20             	or     $0x20,%eax
c01026e4:	66 89 02             	mov    %ax,(%edx)
        }
        break;
c01026e7:	eb 72                	jmp    c010275b <cga_putc+0xde>
c01026e9:	eb 70                	jmp    c010275b <cga_putc+0xde>
    case '\n':
        crt_pos += CRT_COLS;
c01026eb:	0f b7 05 84 03 1a c0 	movzwl 0xc01a0384,%eax
c01026f2:	83 c0 50             	add    $0x50,%eax
c01026f5:	66 a3 84 03 1a c0    	mov    %ax,0xc01a0384
    case '\r':
        crt_pos -= (crt_pos % CRT_COLS);
c01026fb:	0f b7 1d 84 03 1a c0 	movzwl 0xc01a0384,%ebx
c0102702:	0f b7 0d 84 03 1a c0 	movzwl 0xc01a0384,%ecx
c0102709:	0f b7 c1             	movzwl %cx,%eax
c010270c:	69 c0 cd cc 00 00    	imul   $0xcccd,%eax,%eax
c0102712:	c1 e8 10             	shr    $0x10,%eax
c0102715:	89 c2                	mov    %eax,%edx
c0102717:	66 c1 ea 06          	shr    $0x6,%dx
c010271b:	89 d0                	mov    %edx,%eax
c010271d:	c1 e0 02             	shl    $0x2,%eax
c0102720:	01 d0                	add    %edx,%eax
c0102722:	c1 e0 04             	shl    $0x4,%eax
c0102725:	29 c1                	sub    %eax,%ecx
c0102727:	89 ca                	mov    %ecx,%edx
c0102729:	89 d8                	mov    %ebx,%eax
c010272b:	29 d0                	sub    %edx,%eax
c010272d:	66 a3 84 03 1a c0    	mov    %ax,0xc01a0384
        break;
c0102733:	eb 26                	jmp    c010275b <cga_putc+0xde>
    default:
        crt_buf[crt_pos ++] = c;     // write the character
c0102735:	8b 0d 80 03 1a c0    	mov    0xc01a0380,%ecx
c010273b:	0f b7 05 84 03 1a c0 	movzwl 0xc01a0384,%eax
c0102742:	8d 50 01             	lea    0x1(%eax),%edx
c0102745:	66 89 15 84 03 1a c0 	mov    %dx,0xc01a0384
c010274c:	0f b7 c0             	movzwl %ax,%eax
c010274f:	01 c0                	add    %eax,%eax
c0102751:	8d 14 01             	lea    (%ecx,%eax,1),%edx
c0102754:	8b 45 08             	mov    0x8(%ebp),%eax
c0102757:	66 89 02             	mov    %ax,(%edx)
        break;
c010275a:	90                   	nop
    }

    // What is the purpose of this?
    if (crt_pos >= CRT_SIZE) {
c010275b:	0f b7 05 84 03 1a c0 	movzwl 0xc01a0384,%eax
c0102762:	66 3d cf 07          	cmp    $0x7cf,%ax
c0102766:	76 5b                	jbe    c01027c3 <cga_putc+0x146>
        int i;
        memmove(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16_t));
c0102768:	a1 80 03 1a c0       	mov    0xc01a0380,%eax
c010276d:	8d 90 a0 00 00 00    	lea    0xa0(%eax),%edx
c0102773:	a1 80 03 1a c0       	mov    0xc01a0380,%eax
c0102778:	c7 44 24 08 00 0f 00 	movl   $0xf00,0x8(%esp)
c010277f:	00 
c0102780:	89 54 24 04          	mov    %edx,0x4(%esp)
c0102784:	89 04 24             	mov    %eax,(%esp)
c0102787:	e8 fa ab 00 00       	call   c010d386 <memmove>
        for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i ++) {
c010278c:	c7 45 f4 80 07 00 00 	movl   $0x780,-0xc(%ebp)
c0102793:	eb 15                	jmp    c01027aa <cga_putc+0x12d>
            crt_buf[i] = 0x0700 | ' ';
c0102795:	a1 80 03 1a c0       	mov    0xc01a0380,%eax
c010279a:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010279d:	01 d2                	add    %edx,%edx
c010279f:	01 d0                	add    %edx,%eax
c01027a1:	66 c7 00 20 07       	movw   $0x720,(%eax)

    // What is the purpose of this?
    if (crt_pos >= CRT_SIZE) {
        int i;
        memmove(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16_t));
        for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i ++) {
c01027a6:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01027aa:	81 7d f4 cf 07 00 00 	cmpl   $0x7cf,-0xc(%ebp)
c01027b1:	7e e2                	jle    c0102795 <cga_putc+0x118>
            crt_buf[i] = 0x0700 | ' ';
        }
        crt_pos -= CRT_COLS;
c01027b3:	0f b7 05 84 03 1a c0 	movzwl 0xc01a0384,%eax
c01027ba:	83 e8 50             	sub    $0x50,%eax
c01027bd:	66 a3 84 03 1a c0    	mov    %ax,0xc01a0384
    }

    // move that little blinky thing
    outb(addr_6845, 14);
c01027c3:	0f b7 05 86 03 1a c0 	movzwl 0xc01a0386,%eax
c01027ca:	0f b7 c0             	movzwl %ax,%eax
c01027cd:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
c01027d1:	c6 45 f1 0e          	movb   $0xe,-0xf(%ebp)
c01027d5:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c01027d9:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01027dd:	ee                   	out    %al,(%dx)
    outb(addr_6845 + 1, crt_pos >> 8);
c01027de:	0f b7 05 84 03 1a c0 	movzwl 0xc01a0384,%eax
c01027e5:	66 c1 e8 08          	shr    $0x8,%ax
c01027e9:	0f b6 c0             	movzbl %al,%eax
c01027ec:	0f b7 15 86 03 1a c0 	movzwl 0xc01a0386,%edx
c01027f3:	83 c2 01             	add    $0x1,%edx
c01027f6:	0f b7 d2             	movzwl %dx,%edx
c01027f9:	66 89 55 ee          	mov    %dx,-0x12(%ebp)
c01027fd:	88 45 ed             	mov    %al,-0x13(%ebp)
c0102800:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0102804:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0102808:	ee                   	out    %al,(%dx)
    outb(addr_6845, 15);
c0102809:	0f b7 05 86 03 1a c0 	movzwl 0xc01a0386,%eax
c0102810:	0f b7 c0             	movzwl %ax,%eax
c0102813:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
c0102817:	c6 45 e9 0f          	movb   $0xf,-0x17(%ebp)
c010281b:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c010281f:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0102823:	ee                   	out    %al,(%dx)
    outb(addr_6845 + 1, crt_pos);
c0102824:	0f b7 05 84 03 1a c0 	movzwl 0xc01a0384,%eax
c010282b:	0f b6 c0             	movzbl %al,%eax
c010282e:	0f b7 15 86 03 1a c0 	movzwl 0xc01a0386,%edx
c0102835:	83 c2 01             	add    $0x1,%edx
c0102838:	0f b7 d2             	movzwl %dx,%edx
c010283b:	66 89 55 e6          	mov    %dx,-0x1a(%ebp)
c010283f:	88 45 e5             	mov    %al,-0x1b(%ebp)
c0102842:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c0102846:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c010284a:	ee                   	out    %al,(%dx)
}
c010284b:	83 c4 34             	add    $0x34,%esp
c010284e:	5b                   	pop    %ebx
c010284f:	5d                   	pop    %ebp
c0102850:	c3                   	ret    

c0102851 <serial_putc_sub>:

static void
serial_putc_sub(int c) {
c0102851:	55                   	push   %ebp
c0102852:	89 e5                	mov    %esp,%ebp
c0102854:	83 ec 10             	sub    $0x10,%esp
    int i;
    for (i = 0; !(inb(COM1 + COM_LSR) & COM_LSR_TXRDY) && i < 12800; i ++) {
c0102857:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c010285e:	eb 09                	jmp    c0102869 <serial_putc_sub+0x18>
        delay();
c0102860:	e8 4f fb ff ff       	call   c01023b4 <delay>
}

static void
serial_putc_sub(int c) {
    int i;
    for (i = 0; !(inb(COM1 + COM_LSR) & COM_LSR_TXRDY) && i < 12800; i ++) {
c0102865:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c0102869:	66 c7 45 fa fd 03    	movw   $0x3fd,-0x6(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c010286f:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c0102873:	89 c2                	mov    %eax,%edx
c0102875:	ec                   	in     (%dx),%al
c0102876:	88 45 f9             	mov    %al,-0x7(%ebp)
    return data;
c0102879:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c010287d:	0f b6 c0             	movzbl %al,%eax
c0102880:	83 e0 20             	and    $0x20,%eax
c0102883:	85 c0                	test   %eax,%eax
c0102885:	75 09                	jne    c0102890 <serial_putc_sub+0x3f>
c0102887:	81 7d fc ff 31 00 00 	cmpl   $0x31ff,-0x4(%ebp)
c010288e:	7e d0                	jle    c0102860 <serial_putc_sub+0xf>
        delay();
    }
    outb(COM1 + COM_TX, c);
c0102890:	8b 45 08             	mov    0x8(%ebp),%eax
c0102893:	0f b6 c0             	movzbl %al,%eax
c0102896:	66 c7 45 f6 f8 03    	movw   $0x3f8,-0xa(%ebp)
c010289c:	88 45 f5             	mov    %al,-0xb(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c010289f:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c01028a3:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c01028a7:	ee                   	out    %al,(%dx)
}
c01028a8:	c9                   	leave  
c01028a9:	c3                   	ret    

c01028aa <serial_putc>:

/* serial_putc - print character to serial port */
static void
serial_putc(int c) {
c01028aa:	55                   	push   %ebp
c01028ab:	89 e5                	mov    %esp,%ebp
c01028ad:	83 ec 04             	sub    $0x4,%esp
    if (c != '\b') {
c01028b0:	83 7d 08 08          	cmpl   $0x8,0x8(%ebp)
c01028b4:	74 0d                	je     c01028c3 <serial_putc+0x19>
        serial_putc_sub(c);
c01028b6:	8b 45 08             	mov    0x8(%ebp),%eax
c01028b9:	89 04 24             	mov    %eax,(%esp)
c01028bc:	e8 90 ff ff ff       	call   c0102851 <serial_putc_sub>
c01028c1:	eb 24                	jmp    c01028e7 <serial_putc+0x3d>
    }
    else {
        serial_putc_sub('\b');
c01028c3:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c01028ca:	e8 82 ff ff ff       	call   c0102851 <serial_putc_sub>
        serial_putc_sub(' ');
c01028cf:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
c01028d6:	e8 76 ff ff ff       	call   c0102851 <serial_putc_sub>
        serial_putc_sub('\b');
c01028db:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c01028e2:	e8 6a ff ff ff       	call   c0102851 <serial_putc_sub>
    }
}
c01028e7:	c9                   	leave  
c01028e8:	c3                   	ret    

c01028e9 <cons_intr>:
/* *
 * cons_intr - called by device interrupt routines to feed input
 * characters into the circular console input buffer.
 * */
static void
cons_intr(int (*proc)(void)) {
c01028e9:	55                   	push   %ebp
c01028ea:	89 e5                	mov    %esp,%ebp
c01028ec:	83 ec 18             	sub    $0x18,%esp
    int c;
    while ((c = (*proc)()) != -1) {
c01028ef:	eb 33                	jmp    c0102924 <cons_intr+0x3b>
        if (c != 0) {
c01028f1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01028f5:	74 2d                	je     c0102924 <cons_intr+0x3b>
            cons.buf[cons.wpos ++] = c;
c01028f7:	a1 a4 05 1a c0       	mov    0xc01a05a4,%eax
c01028fc:	8d 50 01             	lea    0x1(%eax),%edx
c01028ff:	89 15 a4 05 1a c0    	mov    %edx,0xc01a05a4
c0102905:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0102908:	88 90 a0 03 1a c0    	mov    %dl,-0x3fe5fc60(%eax)
            if (cons.wpos == CONSBUFSIZE) {
c010290e:	a1 a4 05 1a c0       	mov    0xc01a05a4,%eax
c0102913:	3d 00 02 00 00       	cmp    $0x200,%eax
c0102918:	75 0a                	jne    c0102924 <cons_intr+0x3b>
                cons.wpos = 0;
c010291a:	c7 05 a4 05 1a c0 00 	movl   $0x0,0xc01a05a4
c0102921:	00 00 00 
 * characters into the circular console input buffer.
 * */
static void
cons_intr(int (*proc)(void)) {
    int c;
    while ((c = (*proc)()) != -1) {
c0102924:	8b 45 08             	mov    0x8(%ebp),%eax
c0102927:	ff d0                	call   *%eax
c0102929:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010292c:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
c0102930:	75 bf                	jne    c01028f1 <cons_intr+0x8>
            if (cons.wpos == CONSBUFSIZE) {
                cons.wpos = 0;
            }
        }
    }
}
c0102932:	c9                   	leave  
c0102933:	c3                   	ret    

c0102934 <serial_proc_data>:

/* serial_proc_data - get data from serial port */
static int
serial_proc_data(void) {
c0102934:	55                   	push   %ebp
c0102935:	89 e5                	mov    %esp,%ebp
c0102937:	83 ec 10             	sub    $0x10,%esp
c010293a:	66 c7 45 fa fd 03    	movw   $0x3fd,-0x6(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0102940:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c0102944:	89 c2                	mov    %eax,%edx
c0102946:	ec                   	in     (%dx),%al
c0102947:	88 45 f9             	mov    %al,-0x7(%ebp)
    return data;
c010294a:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
    if (!(inb(COM1 + COM_LSR) & COM_LSR_DATA)) {
c010294e:	0f b6 c0             	movzbl %al,%eax
c0102951:	83 e0 01             	and    $0x1,%eax
c0102954:	85 c0                	test   %eax,%eax
c0102956:	75 07                	jne    c010295f <serial_proc_data+0x2b>
        return -1;
c0102958:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c010295d:	eb 2a                	jmp    c0102989 <serial_proc_data+0x55>
c010295f:	66 c7 45 f6 f8 03    	movw   $0x3f8,-0xa(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0102965:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0102969:	89 c2                	mov    %eax,%edx
c010296b:	ec                   	in     (%dx),%al
c010296c:	88 45 f5             	mov    %al,-0xb(%ebp)
    return data;
c010296f:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
    }
    int c = inb(COM1 + COM_RX);
c0102973:	0f b6 c0             	movzbl %al,%eax
c0102976:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (c == 127) {
c0102979:	83 7d fc 7f          	cmpl   $0x7f,-0x4(%ebp)
c010297d:	75 07                	jne    c0102986 <serial_proc_data+0x52>
        c = '\b';
c010297f:	c7 45 fc 08 00 00 00 	movl   $0x8,-0x4(%ebp)
    }
    return c;
c0102986:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0102989:	c9                   	leave  
c010298a:	c3                   	ret    

c010298b <serial_intr>:

/* serial_intr - try to feed input characters from serial port */
void
serial_intr(void) {
c010298b:	55                   	push   %ebp
c010298c:	89 e5                	mov    %esp,%ebp
c010298e:	83 ec 18             	sub    $0x18,%esp
    if (serial_exists) {
c0102991:	a1 88 03 1a c0       	mov    0xc01a0388,%eax
c0102996:	85 c0                	test   %eax,%eax
c0102998:	74 0c                	je     c01029a6 <serial_intr+0x1b>
        cons_intr(serial_proc_data);
c010299a:	c7 04 24 34 29 10 c0 	movl   $0xc0102934,(%esp)
c01029a1:	e8 43 ff ff ff       	call   c01028e9 <cons_intr>
    }
}
c01029a6:	c9                   	leave  
c01029a7:	c3                   	ret    

c01029a8 <kbd_proc_data>:
 *
 * The kbd_proc_data() function gets data from the keyboard.
 * If we finish a character, return it, else 0. And return -1 if no data.
 * */
static int
kbd_proc_data(void) {
c01029a8:	55                   	push   %ebp
c01029a9:	89 e5                	mov    %esp,%ebp
c01029ab:	83 ec 38             	sub    $0x38,%esp
c01029ae:	66 c7 45 f0 64 00    	movw   $0x64,-0x10(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c01029b4:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c01029b8:	89 c2                	mov    %eax,%edx
c01029ba:	ec                   	in     (%dx),%al
c01029bb:	88 45 ef             	mov    %al,-0x11(%ebp)
    return data;
c01029be:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
    int c;
    uint8_t data;
    static uint32_t shift;

    if ((inb(KBSTATP) & KBS_DIB) == 0) {
c01029c2:	0f b6 c0             	movzbl %al,%eax
c01029c5:	83 e0 01             	and    $0x1,%eax
c01029c8:	85 c0                	test   %eax,%eax
c01029ca:	75 0a                	jne    c01029d6 <kbd_proc_data+0x2e>
        return -1;
c01029cc:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01029d1:	e9 59 01 00 00       	jmp    c0102b2f <kbd_proc_data+0x187>
c01029d6:	66 c7 45 ec 60 00    	movw   $0x60,-0x14(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c01029dc:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c01029e0:	89 c2                	mov    %eax,%edx
c01029e2:	ec                   	in     (%dx),%al
c01029e3:	88 45 eb             	mov    %al,-0x15(%ebp)
    return data;
c01029e6:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
    }

    data = inb(KBDATAP);
c01029ea:	88 45 f3             	mov    %al,-0xd(%ebp)

    if (data == 0xE0) {
c01029ed:	80 7d f3 e0          	cmpb   $0xe0,-0xd(%ebp)
c01029f1:	75 17                	jne    c0102a0a <kbd_proc_data+0x62>
        // E0 escape character
        shift |= E0ESC;
c01029f3:	a1 a8 05 1a c0       	mov    0xc01a05a8,%eax
c01029f8:	83 c8 40             	or     $0x40,%eax
c01029fb:	a3 a8 05 1a c0       	mov    %eax,0xc01a05a8
        return 0;
c0102a00:	b8 00 00 00 00       	mov    $0x0,%eax
c0102a05:	e9 25 01 00 00       	jmp    c0102b2f <kbd_proc_data+0x187>
    } else if (data & 0x80) {
c0102a0a:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0102a0e:	84 c0                	test   %al,%al
c0102a10:	79 47                	jns    c0102a59 <kbd_proc_data+0xb1>
        // Key released
        data = (shift & E0ESC ? data : data & 0x7F);
c0102a12:	a1 a8 05 1a c0       	mov    0xc01a05a8,%eax
c0102a17:	83 e0 40             	and    $0x40,%eax
c0102a1a:	85 c0                	test   %eax,%eax
c0102a1c:	75 09                	jne    c0102a27 <kbd_proc_data+0x7f>
c0102a1e:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0102a22:	83 e0 7f             	and    $0x7f,%eax
c0102a25:	eb 04                	jmp    c0102a2b <kbd_proc_data+0x83>
c0102a27:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0102a2b:	88 45 f3             	mov    %al,-0xd(%ebp)
        shift &= ~(shiftcode[data] | E0ESC);
c0102a2e:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0102a32:	0f b6 80 60 e0 12 c0 	movzbl -0x3fed1fa0(%eax),%eax
c0102a39:	83 c8 40             	or     $0x40,%eax
c0102a3c:	0f b6 c0             	movzbl %al,%eax
c0102a3f:	f7 d0                	not    %eax
c0102a41:	89 c2                	mov    %eax,%edx
c0102a43:	a1 a8 05 1a c0       	mov    0xc01a05a8,%eax
c0102a48:	21 d0                	and    %edx,%eax
c0102a4a:	a3 a8 05 1a c0       	mov    %eax,0xc01a05a8
        return 0;
c0102a4f:	b8 00 00 00 00       	mov    $0x0,%eax
c0102a54:	e9 d6 00 00 00       	jmp    c0102b2f <kbd_proc_data+0x187>
    } else if (shift & E0ESC) {
c0102a59:	a1 a8 05 1a c0       	mov    0xc01a05a8,%eax
c0102a5e:	83 e0 40             	and    $0x40,%eax
c0102a61:	85 c0                	test   %eax,%eax
c0102a63:	74 11                	je     c0102a76 <kbd_proc_data+0xce>
        // Last character was an E0 escape; or with 0x80
        data |= 0x80;
c0102a65:	80 4d f3 80          	orb    $0x80,-0xd(%ebp)
        shift &= ~E0ESC;
c0102a69:	a1 a8 05 1a c0       	mov    0xc01a05a8,%eax
c0102a6e:	83 e0 bf             	and    $0xffffffbf,%eax
c0102a71:	a3 a8 05 1a c0       	mov    %eax,0xc01a05a8
    }

    shift |= shiftcode[data];
c0102a76:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0102a7a:	0f b6 80 60 e0 12 c0 	movzbl -0x3fed1fa0(%eax),%eax
c0102a81:	0f b6 d0             	movzbl %al,%edx
c0102a84:	a1 a8 05 1a c0       	mov    0xc01a05a8,%eax
c0102a89:	09 d0                	or     %edx,%eax
c0102a8b:	a3 a8 05 1a c0       	mov    %eax,0xc01a05a8
    shift ^= togglecode[data];
c0102a90:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0102a94:	0f b6 80 60 e1 12 c0 	movzbl -0x3fed1ea0(%eax),%eax
c0102a9b:	0f b6 d0             	movzbl %al,%edx
c0102a9e:	a1 a8 05 1a c0       	mov    0xc01a05a8,%eax
c0102aa3:	31 d0                	xor    %edx,%eax
c0102aa5:	a3 a8 05 1a c0       	mov    %eax,0xc01a05a8

    c = charcode[shift & (CTL | SHIFT)][data];
c0102aaa:	a1 a8 05 1a c0       	mov    0xc01a05a8,%eax
c0102aaf:	83 e0 03             	and    $0x3,%eax
c0102ab2:	8b 14 85 60 e5 12 c0 	mov    -0x3fed1aa0(,%eax,4),%edx
c0102ab9:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0102abd:	01 d0                	add    %edx,%eax
c0102abf:	0f b6 00             	movzbl (%eax),%eax
c0102ac2:	0f b6 c0             	movzbl %al,%eax
c0102ac5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (shift & CAPSLOCK) {
c0102ac8:	a1 a8 05 1a c0       	mov    0xc01a05a8,%eax
c0102acd:	83 e0 08             	and    $0x8,%eax
c0102ad0:	85 c0                	test   %eax,%eax
c0102ad2:	74 22                	je     c0102af6 <kbd_proc_data+0x14e>
        if ('a' <= c && c <= 'z')
c0102ad4:	83 7d f4 60          	cmpl   $0x60,-0xc(%ebp)
c0102ad8:	7e 0c                	jle    c0102ae6 <kbd_proc_data+0x13e>
c0102ada:	83 7d f4 7a          	cmpl   $0x7a,-0xc(%ebp)
c0102ade:	7f 06                	jg     c0102ae6 <kbd_proc_data+0x13e>
            c += 'A' - 'a';
c0102ae0:	83 6d f4 20          	subl   $0x20,-0xc(%ebp)
c0102ae4:	eb 10                	jmp    c0102af6 <kbd_proc_data+0x14e>
        else if ('A' <= c && c <= 'Z')
c0102ae6:	83 7d f4 40          	cmpl   $0x40,-0xc(%ebp)
c0102aea:	7e 0a                	jle    c0102af6 <kbd_proc_data+0x14e>
c0102aec:	83 7d f4 5a          	cmpl   $0x5a,-0xc(%ebp)
c0102af0:	7f 04                	jg     c0102af6 <kbd_proc_data+0x14e>
            c += 'a' - 'A';
c0102af2:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
    }

    // Process special keys
    // Ctrl-Alt-Del: reboot
    if (!(~shift & (CTL | ALT)) && c == KEY_DEL) {
c0102af6:	a1 a8 05 1a c0       	mov    0xc01a05a8,%eax
c0102afb:	f7 d0                	not    %eax
c0102afd:	83 e0 06             	and    $0x6,%eax
c0102b00:	85 c0                	test   %eax,%eax
c0102b02:	75 28                	jne    c0102b2c <kbd_proc_data+0x184>
c0102b04:	81 7d f4 e9 00 00 00 	cmpl   $0xe9,-0xc(%ebp)
c0102b0b:	75 1f                	jne    c0102b2c <kbd_proc_data+0x184>
        cprintf("Rebooting!\n");
c0102b0d:	c7 04 24 55 da 10 c0 	movl   $0xc010da55,(%esp)
c0102b14:	e8 bd ec ff ff       	call   c01017d6 <cprintf>
c0102b19:	66 c7 45 e8 92 00    	movw   $0x92,-0x18(%ebp)
c0102b1f:	c6 45 e7 03          	movb   $0x3,-0x19(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0102b23:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
c0102b27:	0f b7 55 e8          	movzwl -0x18(%ebp),%edx
c0102b2b:	ee                   	out    %al,(%dx)
        outb(0x92, 0x3); // courtesy of Chris Frost
    }
    return c;
c0102b2c:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0102b2f:	c9                   	leave  
c0102b30:	c3                   	ret    

c0102b31 <kbd_intr>:

/* kbd_intr - try to feed input characters from keyboard */
static void
kbd_intr(void) {
c0102b31:	55                   	push   %ebp
c0102b32:	89 e5                	mov    %esp,%ebp
c0102b34:	83 ec 18             	sub    $0x18,%esp
    cons_intr(kbd_proc_data);
c0102b37:	c7 04 24 a8 29 10 c0 	movl   $0xc01029a8,(%esp)
c0102b3e:	e8 a6 fd ff ff       	call   c01028e9 <cons_intr>
}
c0102b43:	c9                   	leave  
c0102b44:	c3                   	ret    

c0102b45 <kbd_init>:

static void
kbd_init(void) {
c0102b45:	55                   	push   %ebp
c0102b46:	89 e5                	mov    %esp,%ebp
c0102b48:	83 ec 18             	sub    $0x18,%esp
    // drain the kbd buffer
    kbd_intr();
c0102b4b:	e8 e1 ff ff ff       	call   c0102b31 <kbd_intr>
    pic_enable(IRQ_KBD);
c0102b50:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0102b57:	e8 b2 09 00 00       	call   c010350e <pic_enable>
}
c0102b5c:	c9                   	leave  
c0102b5d:	c3                   	ret    

c0102b5e <cons_init>:

/* cons_init - initializes the console devices */
void
cons_init(void) {
c0102b5e:	55                   	push   %ebp
c0102b5f:	89 e5                	mov    %esp,%ebp
c0102b61:	83 ec 18             	sub    $0x18,%esp
    cga_init();
c0102b64:	e8 93 f8 ff ff       	call   c01023fc <cga_init>
    serial_init();
c0102b69:	e8 74 f9 ff ff       	call   c01024e2 <serial_init>
    kbd_init();
c0102b6e:	e8 d2 ff ff ff       	call   c0102b45 <kbd_init>
    if (!serial_exists) {
c0102b73:	a1 88 03 1a c0       	mov    0xc01a0388,%eax
c0102b78:	85 c0                	test   %eax,%eax
c0102b7a:	75 0c                	jne    c0102b88 <cons_init+0x2a>
        cprintf("serial port does not exist!!\n");
c0102b7c:	c7 04 24 61 da 10 c0 	movl   $0xc010da61,(%esp)
c0102b83:	e8 4e ec ff ff       	call   c01017d6 <cprintf>
    }
}
c0102b88:	c9                   	leave  
c0102b89:	c3                   	ret    

c0102b8a <cons_putc>:

/* cons_putc - print a single character @c to console devices */
void
cons_putc(int c) {
c0102b8a:	55                   	push   %ebp
c0102b8b:	89 e5                	mov    %esp,%ebp
c0102b8d:	83 ec 28             	sub    $0x28,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c0102b90:	e8 e2 f7 ff ff       	call   c0102377 <__intr_save>
c0102b95:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        lpt_putc(c);
c0102b98:	8b 45 08             	mov    0x8(%ebp),%eax
c0102b9b:	89 04 24             	mov    %eax,(%esp)
c0102b9e:	e8 9b fa ff ff       	call   c010263e <lpt_putc>
        cga_putc(c);
c0102ba3:	8b 45 08             	mov    0x8(%ebp),%eax
c0102ba6:	89 04 24             	mov    %eax,(%esp)
c0102ba9:	e8 cf fa ff ff       	call   c010267d <cga_putc>
        serial_putc(c);
c0102bae:	8b 45 08             	mov    0x8(%ebp),%eax
c0102bb1:	89 04 24             	mov    %eax,(%esp)
c0102bb4:	e8 f1 fc ff ff       	call   c01028aa <serial_putc>
    }
    local_intr_restore(intr_flag);
c0102bb9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102bbc:	89 04 24             	mov    %eax,(%esp)
c0102bbf:	e8 dd f7 ff ff       	call   c01023a1 <__intr_restore>
}
c0102bc4:	c9                   	leave  
c0102bc5:	c3                   	ret    

c0102bc6 <cons_getc>:
/* *
 * cons_getc - return the next input character from console,
 * or 0 if none waiting.
 * */
int
cons_getc(void) {
c0102bc6:	55                   	push   %ebp
c0102bc7:	89 e5                	mov    %esp,%ebp
c0102bc9:	83 ec 28             	sub    $0x28,%esp
    int c = 0;
c0102bcc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    bool intr_flag;
    local_intr_save(intr_flag);
c0102bd3:	e8 9f f7 ff ff       	call   c0102377 <__intr_save>
c0102bd8:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        // poll for any pending input characters,
        // so that this function works even when interrupts are disabled
        // (e.g., when called from the kernel monitor).
        serial_intr();
c0102bdb:	e8 ab fd ff ff       	call   c010298b <serial_intr>
        kbd_intr();
c0102be0:	e8 4c ff ff ff       	call   c0102b31 <kbd_intr>

        // grab the next character from the input buffer.
        if (cons.rpos != cons.wpos) {
c0102be5:	8b 15 a0 05 1a c0    	mov    0xc01a05a0,%edx
c0102beb:	a1 a4 05 1a c0       	mov    0xc01a05a4,%eax
c0102bf0:	39 c2                	cmp    %eax,%edx
c0102bf2:	74 31                	je     c0102c25 <cons_getc+0x5f>
            c = cons.buf[cons.rpos ++];
c0102bf4:	a1 a0 05 1a c0       	mov    0xc01a05a0,%eax
c0102bf9:	8d 50 01             	lea    0x1(%eax),%edx
c0102bfc:	89 15 a0 05 1a c0    	mov    %edx,0xc01a05a0
c0102c02:	0f b6 80 a0 03 1a c0 	movzbl -0x3fe5fc60(%eax),%eax
c0102c09:	0f b6 c0             	movzbl %al,%eax
c0102c0c:	89 45 f4             	mov    %eax,-0xc(%ebp)
            if (cons.rpos == CONSBUFSIZE) {
c0102c0f:	a1 a0 05 1a c0       	mov    0xc01a05a0,%eax
c0102c14:	3d 00 02 00 00       	cmp    $0x200,%eax
c0102c19:	75 0a                	jne    c0102c25 <cons_getc+0x5f>
                cons.rpos = 0;
c0102c1b:	c7 05 a0 05 1a c0 00 	movl   $0x0,0xc01a05a0
c0102c22:	00 00 00 
            }
        }
    }
    local_intr_restore(intr_flag);
c0102c25:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0102c28:	89 04 24             	mov    %eax,(%esp)
c0102c2b:	e8 71 f7 ff ff       	call   c01023a1 <__intr_restore>
    return c;
c0102c30:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0102c33:	c9                   	leave  
c0102c34:	c3                   	ret    

c0102c35 <ide_wait_ready>:
    unsigned int size;          // Size in Sectors
    unsigned char model[41];    // Model in String
} ide_devices[MAX_IDE];

static int
ide_wait_ready(unsigned short iobase, bool check_error) {
c0102c35:	55                   	push   %ebp
c0102c36:	89 e5                	mov    %esp,%ebp
c0102c38:	83 ec 14             	sub    $0x14,%esp
c0102c3b:	8b 45 08             	mov    0x8(%ebp),%eax
c0102c3e:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    int r;
    while ((r = inb(iobase + ISA_STATUS)) & IDE_BSY)
c0102c42:	90                   	nop
c0102c43:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c0102c47:	83 c0 07             	add    $0x7,%eax
c0102c4a:	0f b7 c0             	movzwl %ax,%eax
c0102c4d:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0102c51:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c0102c55:	89 c2                	mov    %eax,%edx
c0102c57:	ec                   	in     (%dx),%al
c0102c58:	88 45 f9             	mov    %al,-0x7(%ebp)
    return data;
c0102c5b:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c0102c5f:	0f b6 c0             	movzbl %al,%eax
c0102c62:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0102c65:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102c68:	25 80 00 00 00       	and    $0x80,%eax
c0102c6d:	85 c0                	test   %eax,%eax
c0102c6f:	75 d2                	jne    c0102c43 <ide_wait_ready+0xe>
        /* nothing */;
    if (check_error && (r & (IDE_DF | IDE_ERR)) != 0) {
c0102c71:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0102c75:	74 11                	je     c0102c88 <ide_wait_ready+0x53>
c0102c77:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102c7a:	83 e0 21             	and    $0x21,%eax
c0102c7d:	85 c0                	test   %eax,%eax
c0102c7f:	74 07                	je     c0102c88 <ide_wait_ready+0x53>
        return -1;
c0102c81:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0102c86:	eb 05                	jmp    c0102c8d <ide_wait_ready+0x58>
    }
    return 0;
c0102c88:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0102c8d:	c9                   	leave  
c0102c8e:	c3                   	ret    

c0102c8f <ide_init>:

void
ide_init(void) {
c0102c8f:	55                   	push   %ebp
c0102c90:	89 e5                	mov    %esp,%ebp
c0102c92:	57                   	push   %edi
c0102c93:	53                   	push   %ebx
c0102c94:	81 ec 50 02 00 00    	sub    $0x250,%esp
    static_assert((SECTSIZE % 4) == 0);
    unsigned short ideno, iobase;
    for (ideno = 0; ideno < MAX_IDE; ideno ++) {
c0102c9a:	66 c7 45 f6 00 00    	movw   $0x0,-0xa(%ebp)
c0102ca0:	e9 d6 02 00 00       	jmp    c0102f7b <ide_init+0x2ec>
        /* assume that no device here */
        ide_devices[ideno].valid = 0;
c0102ca5:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0102ca9:	c1 e0 03             	shl    $0x3,%eax
c0102cac:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0102cb3:	29 c2                	sub    %eax,%edx
c0102cb5:	8d 82 c0 05 1a c0    	lea    -0x3fe5fa40(%edx),%eax
c0102cbb:	c6 00 00             	movb   $0x0,(%eax)

        iobase = IO_BASE(ideno);
c0102cbe:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0102cc2:	66 d1 e8             	shr    %ax
c0102cc5:	0f b7 c0             	movzwl %ax,%eax
c0102cc8:	0f b7 04 85 80 da 10 	movzwl -0x3fef2580(,%eax,4),%eax
c0102ccf:	c0 
c0102cd0:	66 89 45 ea          	mov    %ax,-0x16(%ebp)

        /* wait device ready */
        ide_wait_ready(iobase, 0);
c0102cd4:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0102cd8:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0102cdf:	00 
c0102ce0:	89 04 24             	mov    %eax,(%esp)
c0102ce3:	e8 4d ff ff ff       	call   c0102c35 <ide_wait_ready>

        /* step1: select drive */
        outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4));
c0102ce8:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0102cec:	83 e0 01             	and    $0x1,%eax
c0102cef:	c1 e0 04             	shl    $0x4,%eax
c0102cf2:	83 c8 e0             	or     $0xffffffe0,%eax
c0102cf5:	0f b6 c0             	movzbl %al,%eax
c0102cf8:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0102cfc:	83 c2 06             	add    $0x6,%edx
c0102cff:	0f b7 d2             	movzwl %dx,%edx
c0102d02:	66 89 55 d2          	mov    %dx,-0x2e(%ebp)
c0102d06:	88 45 d1             	mov    %al,-0x2f(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0102d09:	0f b6 45 d1          	movzbl -0x2f(%ebp),%eax
c0102d0d:	0f b7 55 d2          	movzwl -0x2e(%ebp),%edx
c0102d11:	ee                   	out    %al,(%dx)
        ide_wait_ready(iobase, 0);
c0102d12:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0102d16:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0102d1d:	00 
c0102d1e:	89 04 24             	mov    %eax,(%esp)
c0102d21:	e8 0f ff ff ff       	call   c0102c35 <ide_wait_ready>

        /* step2: send ATA identify command */
        outb(iobase + ISA_COMMAND, IDE_CMD_IDENTIFY);
c0102d26:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0102d2a:	83 c0 07             	add    $0x7,%eax
c0102d2d:	0f b7 c0             	movzwl %ax,%eax
c0102d30:	66 89 45 ce          	mov    %ax,-0x32(%ebp)
c0102d34:	c6 45 cd ec          	movb   $0xec,-0x33(%ebp)
c0102d38:	0f b6 45 cd          	movzbl -0x33(%ebp),%eax
c0102d3c:	0f b7 55 ce          	movzwl -0x32(%ebp),%edx
c0102d40:	ee                   	out    %al,(%dx)
        ide_wait_ready(iobase, 0);
c0102d41:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0102d45:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0102d4c:	00 
c0102d4d:	89 04 24             	mov    %eax,(%esp)
c0102d50:	e8 e0 fe ff ff       	call   c0102c35 <ide_wait_ready>

        /* step3: polling */
        if (inb(iobase + ISA_STATUS) == 0 || ide_wait_ready(iobase, 1) != 0) {
c0102d55:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0102d59:	83 c0 07             	add    $0x7,%eax
c0102d5c:	0f b7 c0             	movzwl %ax,%eax
c0102d5f:	66 89 45 ca          	mov    %ax,-0x36(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0102d63:	0f b7 45 ca          	movzwl -0x36(%ebp),%eax
c0102d67:	89 c2                	mov    %eax,%edx
c0102d69:	ec                   	in     (%dx),%al
c0102d6a:	88 45 c9             	mov    %al,-0x37(%ebp)
    return data;
c0102d6d:	0f b6 45 c9          	movzbl -0x37(%ebp),%eax
c0102d71:	84 c0                	test   %al,%al
c0102d73:	0f 84 f7 01 00 00    	je     c0102f70 <ide_init+0x2e1>
c0102d79:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0102d7d:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0102d84:	00 
c0102d85:	89 04 24             	mov    %eax,(%esp)
c0102d88:	e8 a8 fe ff ff       	call   c0102c35 <ide_wait_ready>
c0102d8d:	85 c0                	test   %eax,%eax
c0102d8f:	0f 85 db 01 00 00    	jne    c0102f70 <ide_init+0x2e1>
            continue ;
        }

        /* device is ok */
        ide_devices[ideno].valid = 1;
c0102d95:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0102d99:	c1 e0 03             	shl    $0x3,%eax
c0102d9c:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0102da3:	29 c2                	sub    %eax,%edx
c0102da5:	8d 82 c0 05 1a c0    	lea    -0x3fe5fa40(%edx),%eax
c0102dab:	c6 00 01             	movb   $0x1,(%eax)

        /* read identification space of the device */
        unsigned int buffer[128];
        insl(iobase + ISA_DATA, buffer, sizeof(buffer) / sizeof(unsigned int));
c0102dae:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0102db2:	89 45 c4             	mov    %eax,-0x3c(%ebp)
c0102db5:	8d 85 bc fd ff ff    	lea    -0x244(%ebp),%eax
c0102dbb:	89 45 c0             	mov    %eax,-0x40(%ebp)
c0102dbe:	c7 45 bc 80 00 00 00 	movl   $0x80,-0x44(%ebp)
}

static inline void
insl(uint32_t port, void *addr, int cnt) {
    asm volatile (
c0102dc5:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c0102dc8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
c0102dcb:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0102dce:	89 cb                	mov    %ecx,%ebx
c0102dd0:	89 df                	mov    %ebx,%edi
c0102dd2:	89 c1                	mov    %eax,%ecx
c0102dd4:	fc                   	cld    
c0102dd5:	f2 6d                	repnz insl (%dx),%es:(%edi)
c0102dd7:	89 c8                	mov    %ecx,%eax
c0102dd9:	89 fb                	mov    %edi,%ebx
c0102ddb:	89 5d c0             	mov    %ebx,-0x40(%ebp)
c0102dde:	89 45 bc             	mov    %eax,-0x44(%ebp)

        unsigned char *ident = (unsigned char *)buffer;
c0102de1:	8d 85 bc fd ff ff    	lea    -0x244(%ebp),%eax
c0102de7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        unsigned int sectors;
        unsigned int cmdsets = *(unsigned int *)(ident + IDE_IDENT_CMDSETS);
c0102dea:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0102ded:	8b 80 a4 00 00 00    	mov    0xa4(%eax),%eax
c0102df3:	89 45 e0             	mov    %eax,-0x20(%ebp)
        /* device use 48-bits or 28-bits addressing */
        if (cmdsets & (1 << 26)) {
c0102df6:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0102df9:	25 00 00 00 04       	and    $0x4000000,%eax
c0102dfe:	85 c0                	test   %eax,%eax
c0102e00:	74 0e                	je     c0102e10 <ide_init+0x181>
            sectors = *(unsigned int *)(ident + IDE_IDENT_MAX_LBA_EXT);
c0102e02:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0102e05:	8b 80 c8 00 00 00    	mov    0xc8(%eax),%eax
c0102e0b:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0102e0e:	eb 09                	jmp    c0102e19 <ide_init+0x18a>
        }
        else {
            sectors = *(unsigned int *)(ident + IDE_IDENT_MAX_LBA);
c0102e10:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0102e13:	8b 40 78             	mov    0x78(%eax),%eax
c0102e16:	89 45 f0             	mov    %eax,-0x10(%ebp)
        }
        ide_devices[ideno].sets = cmdsets;
c0102e19:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0102e1d:	c1 e0 03             	shl    $0x3,%eax
c0102e20:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0102e27:	29 c2                	sub    %eax,%edx
c0102e29:	81 c2 c0 05 1a c0    	add    $0xc01a05c0,%edx
c0102e2f:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0102e32:	89 42 04             	mov    %eax,0x4(%edx)
        ide_devices[ideno].size = sectors;
c0102e35:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0102e39:	c1 e0 03             	shl    $0x3,%eax
c0102e3c:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0102e43:	29 c2                	sub    %eax,%edx
c0102e45:	81 c2 c0 05 1a c0    	add    $0xc01a05c0,%edx
c0102e4b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0102e4e:	89 42 08             	mov    %eax,0x8(%edx)

        /* check if supports LBA */
        assert((*(unsigned short *)(ident + IDE_IDENT_CAPABILITIES) & 0x200) != 0);
c0102e51:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0102e54:	83 c0 62             	add    $0x62,%eax
c0102e57:	0f b7 00             	movzwl (%eax),%eax
c0102e5a:	0f b7 c0             	movzwl %ax,%eax
c0102e5d:	25 00 02 00 00       	and    $0x200,%eax
c0102e62:	85 c0                	test   %eax,%eax
c0102e64:	75 24                	jne    c0102e8a <ide_init+0x1fb>
c0102e66:	c7 44 24 0c 88 da 10 	movl   $0xc010da88,0xc(%esp)
c0102e6d:	c0 
c0102e6e:	c7 44 24 08 cb da 10 	movl   $0xc010dacb,0x8(%esp)
c0102e75:	c0 
c0102e76:	c7 44 24 04 7d 00 00 	movl   $0x7d,0x4(%esp)
c0102e7d:	00 
c0102e7e:	c7 04 24 e0 da 10 c0 	movl   $0xc010dae0,(%esp)
c0102e85:	e8 ce f3 ff ff       	call   c0102258 <__panic>

        unsigned char *model = ide_devices[ideno].model, *data = ident + IDE_IDENT_MODEL;
c0102e8a:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0102e8e:	c1 e0 03             	shl    $0x3,%eax
c0102e91:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0102e98:	29 c2                	sub    %eax,%edx
c0102e9a:	8d 82 c0 05 1a c0    	lea    -0x3fe5fa40(%edx),%eax
c0102ea0:	83 c0 0c             	add    $0xc,%eax
c0102ea3:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0102ea6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0102ea9:	83 c0 36             	add    $0x36,%eax
c0102eac:	89 45 d8             	mov    %eax,-0x28(%ebp)
        unsigned int i, length = 40;
c0102eaf:	c7 45 d4 28 00 00 00 	movl   $0x28,-0x2c(%ebp)
        for (i = 0; i < length; i += 2) {
c0102eb6:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0102ebd:	eb 34                	jmp    c0102ef3 <ide_init+0x264>
            model[i] = data[i + 1], model[i + 1] = data[i];
c0102ebf:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0102ec2:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0102ec5:	01 c2                	add    %eax,%edx
c0102ec7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0102eca:	8d 48 01             	lea    0x1(%eax),%ecx
c0102ecd:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0102ed0:	01 c8                	add    %ecx,%eax
c0102ed2:	0f b6 00             	movzbl (%eax),%eax
c0102ed5:	88 02                	mov    %al,(%edx)
c0102ed7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0102eda:	8d 50 01             	lea    0x1(%eax),%edx
c0102edd:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0102ee0:	01 c2                	add    %eax,%edx
c0102ee2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0102ee5:	8b 4d d8             	mov    -0x28(%ebp),%ecx
c0102ee8:	01 c8                	add    %ecx,%eax
c0102eea:	0f b6 00             	movzbl (%eax),%eax
c0102eed:	88 02                	mov    %al,(%edx)
        /* check if supports LBA */
        assert((*(unsigned short *)(ident + IDE_IDENT_CAPABILITIES) & 0x200) != 0);

        unsigned char *model = ide_devices[ideno].model, *data = ident + IDE_IDENT_MODEL;
        unsigned int i, length = 40;
        for (i = 0; i < length; i += 2) {
c0102eef:	83 45 ec 02          	addl   $0x2,-0x14(%ebp)
c0102ef3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0102ef6:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c0102ef9:	72 c4                	jb     c0102ebf <ide_init+0x230>
            model[i] = data[i + 1], model[i + 1] = data[i];
        }
        do {
            model[i] = '\0';
c0102efb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0102efe:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0102f01:	01 d0                	add    %edx,%eax
c0102f03:	c6 00 00             	movb   $0x0,(%eax)
        } while (i -- > 0 && model[i] == ' ');
c0102f06:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0102f09:	8d 50 ff             	lea    -0x1(%eax),%edx
c0102f0c:	89 55 ec             	mov    %edx,-0x14(%ebp)
c0102f0f:	85 c0                	test   %eax,%eax
c0102f11:	74 0f                	je     c0102f22 <ide_init+0x293>
c0102f13:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0102f16:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0102f19:	01 d0                	add    %edx,%eax
c0102f1b:	0f b6 00             	movzbl (%eax),%eax
c0102f1e:	3c 20                	cmp    $0x20,%al
c0102f20:	74 d9                	je     c0102efb <ide_init+0x26c>

        cprintf("ide %d: %10u(sectors), '%s'.\n", ideno, ide_devices[ideno].size, ide_devices[ideno].model);
c0102f22:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0102f26:	c1 e0 03             	shl    $0x3,%eax
c0102f29:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0102f30:	29 c2                	sub    %eax,%edx
c0102f32:	8d 82 c0 05 1a c0    	lea    -0x3fe5fa40(%edx),%eax
c0102f38:	8d 48 0c             	lea    0xc(%eax),%ecx
c0102f3b:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0102f3f:	c1 e0 03             	shl    $0x3,%eax
c0102f42:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0102f49:	29 c2                	sub    %eax,%edx
c0102f4b:	8d 82 c0 05 1a c0    	lea    -0x3fe5fa40(%edx),%eax
c0102f51:	8b 50 08             	mov    0x8(%eax),%edx
c0102f54:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0102f58:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c0102f5c:	89 54 24 08          	mov    %edx,0x8(%esp)
c0102f60:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102f64:	c7 04 24 f2 da 10 c0 	movl   $0xc010daf2,(%esp)
c0102f6b:	e8 66 e8 ff ff       	call   c01017d6 <cprintf>

void
ide_init(void) {
    static_assert((SECTSIZE % 4) == 0);
    unsigned short ideno, iobase;
    for (ideno = 0; ideno < MAX_IDE; ideno ++) {
c0102f70:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0102f74:	83 c0 01             	add    $0x1,%eax
c0102f77:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
c0102f7b:	66 83 7d f6 03       	cmpw   $0x3,-0xa(%ebp)
c0102f80:	0f 86 1f fd ff ff    	jbe    c0102ca5 <ide_init+0x16>

        cprintf("ide %d: %10u(sectors), '%s'.\n", ideno, ide_devices[ideno].size, ide_devices[ideno].model);
    }

    // enable ide interrupt
    pic_enable(IRQ_IDE1);
c0102f86:	c7 04 24 0e 00 00 00 	movl   $0xe,(%esp)
c0102f8d:	e8 7c 05 00 00       	call   c010350e <pic_enable>
    pic_enable(IRQ_IDE2);
c0102f92:	c7 04 24 0f 00 00 00 	movl   $0xf,(%esp)
c0102f99:	e8 70 05 00 00       	call   c010350e <pic_enable>
}
c0102f9e:	81 c4 50 02 00 00    	add    $0x250,%esp
c0102fa4:	5b                   	pop    %ebx
c0102fa5:	5f                   	pop    %edi
c0102fa6:	5d                   	pop    %ebp
c0102fa7:	c3                   	ret    

c0102fa8 <ide_device_valid>:

bool
ide_device_valid(unsigned short ideno) {
c0102fa8:	55                   	push   %ebp
c0102fa9:	89 e5                	mov    %esp,%ebp
c0102fab:	83 ec 04             	sub    $0x4,%esp
c0102fae:	8b 45 08             	mov    0x8(%ebp),%eax
c0102fb1:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    return VALID_IDE(ideno);
c0102fb5:	66 83 7d fc 03       	cmpw   $0x3,-0x4(%ebp)
c0102fba:	77 24                	ja     c0102fe0 <ide_device_valid+0x38>
c0102fbc:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c0102fc0:	c1 e0 03             	shl    $0x3,%eax
c0102fc3:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0102fca:	29 c2                	sub    %eax,%edx
c0102fcc:	8d 82 c0 05 1a c0    	lea    -0x3fe5fa40(%edx),%eax
c0102fd2:	0f b6 00             	movzbl (%eax),%eax
c0102fd5:	84 c0                	test   %al,%al
c0102fd7:	74 07                	je     c0102fe0 <ide_device_valid+0x38>
c0102fd9:	b8 01 00 00 00       	mov    $0x1,%eax
c0102fde:	eb 05                	jmp    c0102fe5 <ide_device_valid+0x3d>
c0102fe0:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0102fe5:	c9                   	leave  
c0102fe6:	c3                   	ret    

c0102fe7 <ide_device_size>:

size_t
ide_device_size(unsigned short ideno) {
c0102fe7:	55                   	push   %ebp
c0102fe8:	89 e5                	mov    %esp,%ebp
c0102fea:	83 ec 08             	sub    $0x8,%esp
c0102fed:	8b 45 08             	mov    0x8(%ebp),%eax
c0102ff0:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    if (ide_device_valid(ideno)) {
c0102ff4:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c0102ff8:	89 04 24             	mov    %eax,(%esp)
c0102ffb:	e8 a8 ff ff ff       	call   c0102fa8 <ide_device_valid>
c0103000:	85 c0                	test   %eax,%eax
c0103002:	74 1b                	je     c010301f <ide_device_size+0x38>
        return ide_devices[ideno].size;
c0103004:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c0103008:	c1 e0 03             	shl    $0x3,%eax
c010300b:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0103012:	29 c2                	sub    %eax,%edx
c0103014:	8d 82 c0 05 1a c0    	lea    -0x3fe5fa40(%edx),%eax
c010301a:	8b 40 08             	mov    0x8(%eax),%eax
c010301d:	eb 05                	jmp    c0103024 <ide_device_size+0x3d>
    }
    return 0;
c010301f:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0103024:	c9                   	leave  
c0103025:	c3                   	ret    

c0103026 <ide_read_secs>:

int
ide_read_secs(unsigned short ideno, uint32_t secno, void *dst, size_t nsecs) {
c0103026:	55                   	push   %ebp
c0103027:	89 e5                	mov    %esp,%ebp
c0103029:	57                   	push   %edi
c010302a:	53                   	push   %ebx
c010302b:	83 ec 50             	sub    $0x50,%esp
c010302e:	8b 45 08             	mov    0x8(%ebp),%eax
c0103031:	66 89 45 c4          	mov    %ax,-0x3c(%ebp)
    assert(nsecs <= MAX_NSECS && VALID_IDE(ideno));
c0103035:	81 7d 14 80 00 00 00 	cmpl   $0x80,0x14(%ebp)
c010303c:	77 24                	ja     c0103062 <ide_read_secs+0x3c>
c010303e:	66 83 7d c4 03       	cmpw   $0x3,-0x3c(%ebp)
c0103043:	77 1d                	ja     c0103062 <ide_read_secs+0x3c>
c0103045:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0103049:	c1 e0 03             	shl    $0x3,%eax
c010304c:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0103053:	29 c2                	sub    %eax,%edx
c0103055:	8d 82 c0 05 1a c0    	lea    -0x3fe5fa40(%edx),%eax
c010305b:	0f b6 00             	movzbl (%eax),%eax
c010305e:	84 c0                	test   %al,%al
c0103060:	75 24                	jne    c0103086 <ide_read_secs+0x60>
c0103062:	c7 44 24 0c 10 db 10 	movl   $0xc010db10,0xc(%esp)
c0103069:	c0 
c010306a:	c7 44 24 08 cb da 10 	movl   $0xc010dacb,0x8(%esp)
c0103071:	c0 
c0103072:	c7 44 24 04 9f 00 00 	movl   $0x9f,0x4(%esp)
c0103079:	00 
c010307a:	c7 04 24 e0 da 10 c0 	movl   $0xc010dae0,(%esp)
c0103081:	e8 d2 f1 ff ff       	call   c0102258 <__panic>
    assert(secno < MAX_DISK_NSECS && secno + nsecs <= MAX_DISK_NSECS);
c0103086:	81 7d 0c ff ff ff 0f 	cmpl   $0xfffffff,0xc(%ebp)
c010308d:	77 0f                	ja     c010309e <ide_read_secs+0x78>
c010308f:	8b 45 14             	mov    0x14(%ebp),%eax
c0103092:	8b 55 0c             	mov    0xc(%ebp),%edx
c0103095:	01 d0                	add    %edx,%eax
c0103097:	3d 00 00 00 10       	cmp    $0x10000000,%eax
c010309c:	76 24                	jbe    c01030c2 <ide_read_secs+0x9c>
c010309e:	c7 44 24 0c 38 db 10 	movl   $0xc010db38,0xc(%esp)
c01030a5:	c0 
c01030a6:	c7 44 24 08 cb da 10 	movl   $0xc010dacb,0x8(%esp)
c01030ad:	c0 
c01030ae:	c7 44 24 04 a0 00 00 	movl   $0xa0,0x4(%esp)
c01030b5:	00 
c01030b6:	c7 04 24 e0 da 10 c0 	movl   $0xc010dae0,(%esp)
c01030bd:	e8 96 f1 ff ff       	call   c0102258 <__panic>
    unsigned short iobase = IO_BASE(ideno), ioctrl = IO_CTRL(ideno);
c01030c2:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c01030c6:	66 d1 e8             	shr    %ax
c01030c9:	0f b7 c0             	movzwl %ax,%eax
c01030cc:	0f b7 04 85 80 da 10 	movzwl -0x3fef2580(,%eax,4),%eax
c01030d3:	c0 
c01030d4:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
c01030d8:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c01030dc:	66 d1 e8             	shr    %ax
c01030df:	0f b7 c0             	movzwl %ax,%eax
c01030e2:	0f b7 04 85 82 da 10 	movzwl -0x3fef257e(,%eax,4),%eax
c01030e9:	c0 
c01030ea:	66 89 45 f0          	mov    %ax,-0x10(%ebp)

    ide_wait_ready(iobase, 0);
c01030ee:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c01030f2:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01030f9:	00 
c01030fa:	89 04 24             	mov    %eax,(%esp)
c01030fd:	e8 33 fb ff ff       	call   c0102c35 <ide_wait_ready>

    // generate interrupt
    outb(ioctrl + ISA_CTRL, 0);
c0103102:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c0103106:	83 c0 02             	add    $0x2,%eax
c0103109:	0f b7 c0             	movzwl %ax,%eax
c010310c:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
c0103110:	c6 45 ed 00          	movb   $0x0,-0x13(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0103114:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0103118:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c010311c:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECCNT, nsecs);
c010311d:	8b 45 14             	mov    0x14(%ebp),%eax
c0103120:	0f b6 c0             	movzbl %al,%eax
c0103123:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0103127:	83 c2 02             	add    $0x2,%edx
c010312a:	0f b7 d2             	movzwl %dx,%edx
c010312d:	66 89 55 ea          	mov    %dx,-0x16(%ebp)
c0103131:	88 45 e9             	mov    %al,-0x17(%ebp)
c0103134:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c0103138:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c010313c:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECTOR, secno & 0xFF);
c010313d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103140:	0f b6 c0             	movzbl %al,%eax
c0103143:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0103147:	83 c2 03             	add    $0x3,%edx
c010314a:	0f b7 d2             	movzwl %dx,%edx
c010314d:	66 89 55 e6          	mov    %dx,-0x1a(%ebp)
c0103151:	88 45 e5             	mov    %al,-0x1b(%ebp)
c0103154:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c0103158:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c010315c:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_LO, (secno >> 8) & 0xFF);
c010315d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103160:	c1 e8 08             	shr    $0x8,%eax
c0103163:	0f b6 c0             	movzbl %al,%eax
c0103166:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c010316a:	83 c2 04             	add    $0x4,%edx
c010316d:	0f b7 d2             	movzwl %dx,%edx
c0103170:	66 89 55 e2          	mov    %dx,-0x1e(%ebp)
c0103174:	88 45 e1             	mov    %al,-0x1f(%ebp)
c0103177:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
c010317b:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c010317f:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
c0103180:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103183:	c1 e8 10             	shr    $0x10,%eax
c0103186:	0f b6 c0             	movzbl %al,%eax
c0103189:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c010318d:	83 c2 05             	add    $0x5,%edx
c0103190:	0f b7 d2             	movzwl %dx,%edx
c0103193:	66 89 55 de          	mov    %dx,-0x22(%ebp)
c0103197:	88 45 dd             	mov    %al,-0x23(%ebp)
c010319a:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c010319e:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
c01031a2:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
c01031a3:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c01031a7:	83 e0 01             	and    $0x1,%eax
c01031aa:	c1 e0 04             	shl    $0x4,%eax
c01031ad:	89 c2                	mov    %eax,%edx
c01031af:	8b 45 0c             	mov    0xc(%ebp),%eax
c01031b2:	c1 e8 18             	shr    $0x18,%eax
c01031b5:	83 e0 0f             	and    $0xf,%eax
c01031b8:	09 d0                	or     %edx,%eax
c01031ba:	83 c8 e0             	or     $0xffffffe0,%eax
c01031bd:	0f b6 c0             	movzbl %al,%eax
c01031c0:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01031c4:	83 c2 06             	add    $0x6,%edx
c01031c7:	0f b7 d2             	movzwl %dx,%edx
c01031ca:	66 89 55 da          	mov    %dx,-0x26(%ebp)
c01031ce:	88 45 d9             	mov    %al,-0x27(%ebp)
c01031d1:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
c01031d5:	0f b7 55 da          	movzwl -0x26(%ebp),%edx
c01031d9:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_COMMAND, IDE_CMD_READ);
c01031da:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c01031de:	83 c0 07             	add    $0x7,%eax
c01031e1:	0f b7 c0             	movzwl %ax,%eax
c01031e4:	66 89 45 d6          	mov    %ax,-0x2a(%ebp)
c01031e8:	c6 45 d5 20          	movb   $0x20,-0x2b(%ebp)
c01031ec:	0f b6 45 d5          	movzbl -0x2b(%ebp),%eax
c01031f0:	0f b7 55 d6          	movzwl -0x2a(%ebp),%edx
c01031f4:	ee                   	out    %al,(%dx)

    int ret = 0;
c01031f5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (; nsecs > 0; nsecs --, dst += SECTSIZE) {
c01031fc:	eb 5a                	jmp    c0103258 <ide_read_secs+0x232>
        if ((ret = ide_wait_ready(iobase, 1)) != 0) {
c01031fe:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0103202:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0103209:	00 
c010320a:	89 04 24             	mov    %eax,(%esp)
c010320d:	e8 23 fa ff ff       	call   c0102c35 <ide_wait_ready>
c0103212:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0103215:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0103219:	74 02                	je     c010321d <ide_read_secs+0x1f7>
            goto out;
c010321b:	eb 41                	jmp    c010325e <ide_read_secs+0x238>
        }
        insl(iobase, dst, SECTSIZE / sizeof(uint32_t));
c010321d:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0103221:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0103224:	8b 45 10             	mov    0x10(%ebp),%eax
c0103227:	89 45 cc             	mov    %eax,-0x34(%ebp)
c010322a:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
    return data;
}

static inline void
insl(uint32_t port, void *addr, int cnt) {
    asm volatile (
c0103231:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0103234:	8b 4d cc             	mov    -0x34(%ebp),%ecx
c0103237:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010323a:	89 cb                	mov    %ecx,%ebx
c010323c:	89 df                	mov    %ebx,%edi
c010323e:	89 c1                	mov    %eax,%ecx
c0103240:	fc                   	cld    
c0103241:	f2 6d                	repnz insl (%dx),%es:(%edi)
c0103243:	89 c8                	mov    %ecx,%eax
c0103245:	89 fb                	mov    %edi,%ebx
c0103247:	89 5d cc             	mov    %ebx,-0x34(%ebp)
c010324a:	89 45 c8             	mov    %eax,-0x38(%ebp)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
    outb(iobase + ISA_COMMAND, IDE_CMD_READ);

    int ret = 0;
    for (; nsecs > 0; nsecs --, dst += SECTSIZE) {
c010324d:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
c0103251:	81 45 10 00 02 00 00 	addl   $0x200,0x10(%ebp)
c0103258:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c010325c:	75 a0                	jne    c01031fe <ide_read_secs+0x1d8>
        }
        insl(iobase, dst, SECTSIZE / sizeof(uint32_t));
    }

out:
    return ret;
c010325e:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0103261:	83 c4 50             	add    $0x50,%esp
c0103264:	5b                   	pop    %ebx
c0103265:	5f                   	pop    %edi
c0103266:	5d                   	pop    %ebp
c0103267:	c3                   	ret    

c0103268 <ide_write_secs>:

int
ide_write_secs(unsigned short ideno, uint32_t secno, const void *src, size_t nsecs) {
c0103268:	55                   	push   %ebp
c0103269:	89 e5                	mov    %esp,%ebp
c010326b:	56                   	push   %esi
c010326c:	53                   	push   %ebx
c010326d:	83 ec 50             	sub    $0x50,%esp
c0103270:	8b 45 08             	mov    0x8(%ebp),%eax
c0103273:	66 89 45 c4          	mov    %ax,-0x3c(%ebp)
    assert(nsecs <= MAX_NSECS && VALID_IDE(ideno));
c0103277:	81 7d 14 80 00 00 00 	cmpl   $0x80,0x14(%ebp)
c010327e:	77 24                	ja     c01032a4 <ide_write_secs+0x3c>
c0103280:	66 83 7d c4 03       	cmpw   $0x3,-0x3c(%ebp)
c0103285:	77 1d                	ja     c01032a4 <ide_write_secs+0x3c>
c0103287:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c010328b:	c1 e0 03             	shl    $0x3,%eax
c010328e:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0103295:	29 c2                	sub    %eax,%edx
c0103297:	8d 82 c0 05 1a c0    	lea    -0x3fe5fa40(%edx),%eax
c010329d:	0f b6 00             	movzbl (%eax),%eax
c01032a0:	84 c0                	test   %al,%al
c01032a2:	75 24                	jne    c01032c8 <ide_write_secs+0x60>
c01032a4:	c7 44 24 0c 10 db 10 	movl   $0xc010db10,0xc(%esp)
c01032ab:	c0 
c01032ac:	c7 44 24 08 cb da 10 	movl   $0xc010dacb,0x8(%esp)
c01032b3:	c0 
c01032b4:	c7 44 24 04 bc 00 00 	movl   $0xbc,0x4(%esp)
c01032bb:	00 
c01032bc:	c7 04 24 e0 da 10 c0 	movl   $0xc010dae0,(%esp)
c01032c3:	e8 90 ef ff ff       	call   c0102258 <__panic>
    assert(secno < MAX_DISK_NSECS && secno + nsecs <= MAX_DISK_NSECS);
c01032c8:	81 7d 0c ff ff ff 0f 	cmpl   $0xfffffff,0xc(%ebp)
c01032cf:	77 0f                	ja     c01032e0 <ide_write_secs+0x78>
c01032d1:	8b 45 14             	mov    0x14(%ebp),%eax
c01032d4:	8b 55 0c             	mov    0xc(%ebp),%edx
c01032d7:	01 d0                	add    %edx,%eax
c01032d9:	3d 00 00 00 10       	cmp    $0x10000000,%eax
c01032de:	76 24                	jbe    c0103304 <ide_write_secs+0x9c>
c01032e0:	c7 44 24 0c 38 db 10 	movl   $0xc010db38,0xc(%esp)
c01032e7:	c0 
c01032e8:	c7 44 24 08 cb da 10 	movl   $0xc010dacb,0x8(%esp)
c01032ef:	c0 
c01032f0:	c7 44 24 04 bd 00 00 	movl   $0xbd,0x4(%esp)
c01032f7:	00 
c01032f8:	c7 04 24 e0 da 10 c0 	movl   $0xc010dae0,(%esp)
c01032ff:	e8 54 ef ff ff       	call   c0102258 <__panic>
    unsigned short iobase = IO_BASE(ideno), ioctrl = IO_CTRL(ideno);
c0103304:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0103308:	66 d1 e8             	shr    %ax
c010330b:	0f b7 c0             	movzwl %ax,%eax
c010330e:	0f b7 04 85 80 da 10 	movzwl -0x3fef2580(,%eax,4),%eax
c0103315:	c0 
c0103316:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
c010331a:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c010331e:	66 d1 e8             	shr    %ax
c0103321:	0f b7 c0             	movzwl %ax,%eax
c0103324:	0f b7 04 85 82 da 10 	movzwl -0x3fef257e(,%eax,4),%eax
c010332b:	c0 
c010332c:	66 89 45 f0          	mov    %ax,-0x10(%ebp)

    ide_wait_ready(iobase, 0);
c0103330:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0103334:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010333b:	00 
c010333c:	89 04 24             	mov    %eax,(%esp)
c010333f:	e8 f1 f8 ff ff       	call   c0102c35 <ide_wait_ready>

    // generate interrupt
    outb(ioctrl + ISA_CTRL, 0);
c0103344:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c0103348:	83 c0 02             	add    $0x2,%eax
c010334b:	0f b7 c0             	movzwl %ax,%eax
c010334e:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
c0103352:	c6 45 ed 00          	movb   $0x0,-0x13(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0103356:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c010335a:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c010335e:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECCNT, nsecs);
c010335f:	8b 45 14             	mov    0x14(%ebp),%eax
c0103362:	0f b6 c0             	movzbl %al,%eax
c0103365:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0103369:	83 c2 02             	add    $0x2,%edx
c010336c:	0f b7 d2             	movzwl %dx,%edx
c010336f:	66 89 55 ea          	mov    %dx,-0x16(%ebp)
c0103373:	88 45 e9             	mov    %al,-0x17(%ebp)
c0103376:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c010337a:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c010337e:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECTOR, secno & 0xFF);
c010337f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103382:	0f b6 c0             	movzbl %al,%eax
c0103385:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0103389:	83 c2 03             	add    $0x3,%edx
c010338c:	0f b7 d2             	movzwl %dx,%edx
c010338f:	66 89 55 e6          	mov    %dx,-0x1a(%ebp)
c0103393:	88 45 e5             	mov    %al,-0x1b(%ebp)
c0103396:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c010339a:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c010339e:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_LO, (secno >> 8) & 0xFF);
c010339f:	8b 45 0c             	mov    0xc(%ebp),%eax
c01033a2:	c1 e8 08             	shr    $0x8,%eax
c01033a5:	0f b6 c0             	movzbl %al,%eax
c01033a8:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01033ac:	83 c2 04             	add    $0x4,%edx
c01033af:	0f b7 d2             	movzwl %dx,%edx
c01033b2:	66 89 55 e2          	mov    %dx,-0x1e(%ebp)
c01033b6:	88 45 e1             	mov    %al,-0x1f(%ebp)
c01033b9:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
c01033bd:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c01033c1:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
c01033c2:	8b 45 0c             	mov    0xc(%ebp),%eax
c01033c5:	c1 e8 10             	shr    $0x10,%eax
c01033c8:	0f b6 c0             	movzbl %al,%eax
c01033cb:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01033cf:	83 c2 05             	add    $0x5,%edx
c01033d2:	0f b7 d2             	movzwl %dx,%edx
c01033d5:	66 89 55 de          	mov    %dx,-0x22(%ebp)
c01033d9:	88 45 dd             	mov    %al,-0x23(%ebp)
c01033dc:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c01033e0:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
c01033e4:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
c01033e5:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c01033e9:	83 e0 01             	and    $0x1,%eax
c01033ec:	c1 e0 04             	shl    $0x4,%eax
c01033ef:	89 c2                	mov    %eax,%edx
c01033f1:	8b 45 0c             	mov    0xc(%ebp),%eax
c01033f4:	c1 e8 18             	shr    $0x18,%eax
c01033f7:	83 e0 0f             	and    $0xf,%eax
c01033fa:	09 d0                	or     %edx,%eax
c01033fc:	83 c8 e0             	or     $0xffffffe0,%eax
c01033ff:	0f b6 c0             	movzbl %al,%eax
c0103402:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0103406:	83 c2 06             	add    $0x6,%edx
c0103409:	0f b7 d2             	movzwl %dx,%edx
c010340c:	66 89 55 da          	mov    %dx,-0x26(%ebp)
c0103410:	88 45 d9             	mov    %al,-0x27(%ebp)
c0103413:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
c0103417:	0f b7 55 da          	movzwl -0x26(%ebp),%edx
c010341b:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_COMMAND, IDE_CMD_WRITE);
c010341c:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0103420:	83 c0 07             	add    $0x7,%eax
c0103423:	0f b7 c0             	movzwl %ax,%eax
c0103426:	66 89 45 d6          	mov    %ax,-0x2a(%ebp)
c010342a:	c6 45 d5 30          	movb   $0x30,-0x2b(%ebp)
c010342e:	0f b6 45 d5          	movzbl -0x2b(%ebp),%eax
c0103432:	0f b7 55 d6          	movzwl -0x2a(%ebp),%edx
c0103436:	ee                   	out    %al,(%dx)

    int ret = 0;
c0103437:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (; nsecs > 0; nsecs --, src += SECTSIZE) {
c010343e:	eb 5a                	jmp    c010349a <ide_write_secs+0x232>
        if ((ret = ide_wait_ready(iobase, 1)) != 0) {
c0103440:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0103444:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010344b:	00 
c010344c:	89 04 24             	mov    %eax,(%esp)
c010344f:	e8 e1 f7 ff ff       	call   c0102c35 <ide_wait_ready>
c0103454:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0103457:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010345b:	74 02                	je     c010345f <ide_write_secs+0x1f7>
            goto out;
c010345d:	eb 41                	jmp    c01034a0 <ide_write_secs+0x238>
        }
        outsl(iobase, src, SECTSIZE / sizeof(uint32_t));
c010345f:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0103463:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0103466:	8b 45 10             	mov    0x10(%ebp),%eax
c0103469:	89 45 cc             	mov    %eax,-0x34(%ebp)
c010346c:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
    asm volatile ("outw %0, %1" :: "a" (data), "d" (port) : "memory");
}

static inline void
outsl(uint32_t port, const void *addr, int cnt) {
    asm volatile (
c0103473:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0103476:	8b 4d cc             	mov    -0x34(%ebp),%ecx
c0103479:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010347c:	89 cb                	mov    %ecx,%ebx
c010347e:	89 de                	mov    %ebx,%esi
c0103480:	89 c1                	mov    %eax,%ecx
c0103482:	fc                   	cld    
c0103483:	f2 6f                	repnz outsl %ds:(%esi),(%dx)
c0103485:	89 c8                	mov    %ecx,%eax
c0103487:	89 f3                	mov    %esi,%ebx
c0103489:	89 5d cc             	mov    %ebx,-0x34(%ebp)
c010348c:	89 45 c8             	mov    %eax,-0x38(%ebp)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
    outb(iobase + ISA_COMMAND, IDE_CMD_WRITE);

    int ret = 0;
    for (; nsecs > 0; nsecs --, src += SECTSIZE) {
c010348f:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
c0103493:	81 45 10 00 02 00 00 	addl   $0x200,0x10(%ebp)
c010349a:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c010349e:	75 a0                	jne    c0103440 <ide_write_secs+0x1d8>
        }
        outsl(iobase, src, SECTSIZE / sizeof(uint32_t));
    }

out:
    return ret;
c01034a0:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01034a3:	83 c4 50             	add    $0x50,%esp
c01034a6:	5b                   	pop    %ebx
c01034a7:	5e                   	pop    %esi
c01034a8:	5d                   	pop    %ebp
c01034a9:	c3                   	ret    

c01034aa <intr_enable>:
#include <x86.h>
#include <intr.h>

/* intr_enable - enable irq interrupt */
void
intr_enable(void) {
c01034aa:	55                   	push   %ebp
c01034ab:	89 e5                	mov    %esp,%ebp
    asm volatile ("lidt (%0)" :: "r" (pd) : "memory");
}

static inline void
sti(void) {
    asm volatile ("sti");
c01034ad:	fb                   	sti    
    sti();
}
c01034ae:	5d                   	pop    %ebp
c01034af:	c3                   	ret    

c01034b0 <intr_disable>:

/* intr_disable - disable irq interrupt */
void
intr_disable(void) {
c01034b0:	55                   	push   %ebp
c01034b1:	89 e5                	mov    %esp,%ebp
}

static inline void
cli(void) {
    asm volatile ("cli" ::: "memory");
c01034b3:	fa                   	cli    
    cli();
}
c01034b4:	5d                   	pop    %ebp
c01034b5:	c3                   	ret    

c01034b6 <pic_setmask>:
// Initial IRQ mask has interrupt 2 enabled (for slave 8259A).
static uint16_t irq_mask = 0xFFFF & ~(1 << IRQ_SLAVE);
static bool did_init = 0;

static void
pic_setmask(uint16_t mask) {
c01034b6:	55                   	push   %ebp
c01034b7:	89 e5                	mov    %esp,%ebp
c01034b9:	83 ec 14             	sub    $0x14,%esp
c01034bc:	8b 45 08             	mov    0x8(%ebp),%eax
c01034bf:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    irq_mask = mask;
c01034c3:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c01034c7:	66 a3 70 e5 12 c0    	mov    %ax,0xc012e570
    if (did_init) {
c01034cd:	a1 a0 06 1a c0       	mov    0xc01a06a0,%eax
c01034d2:	85 c0                	test   %eax,%eax
c01034d4:	74 36                	je     c010350c <pic_setmask+0x56>
        outb(IO_PIC1 + 1, mask);
c01034d6:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c01034da:	0f b6 c0             	movzbl %al,%eax
c01034dd:	66 c7 45 fe 21 00    	movw   $0x21,-0x2(%ebp)
c01034e3:	88 45 fd             	mov    %al,-0x3(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c01034e6:	0f b6 45 fd          	movzbl -0x3(%ebp),%eax
c01034ea:	0f b7 55 fe          	movzwl -0x2(%ebp),%edx
c01034ee:	ee                   	out    %al,(%dx)
        outb(IO_PIC2 + 1, mask >> 8);
c01034ef:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c01034f3:	66 c1 e8 08          	shr    $0x8,%ax
c01034f7:	0f b6 c0             	movzbl %al,%eax
c01034fa:	66 c7 45 fa a1 00    	movw   $0xa1,-0x6(%ebp)
c0103500:	88 45 f9             	mov    %al,-0x7(%ebp)
c0103503:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c0103507:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
c010350b:	ee                   	out    %al,(%dx)
    }
}
c010350c:	c9                   	leave  
c010350d:	c3                   	ret    

c010350e <pic_enable>:

void
pic_enable(unsigned int irq) {
c010350e:	55                   	push   %ebp
c010350f:	89 e5                	mov    %esp,%ebp
c0103511:	83 ec 04             	sub    $0x4,%esp
    pic_setmask(irq_mask & ~(1 << irq));
c0103514:	8b 45 08             	mov    0x8(%ebp),%eax
c0103517:	ba 01 00 00 00       	mov    $0x1,%edx
c010351c:	89 c1                	mov    %eax,%ecx
c010351e:	d3 e2                	shl    %cl,%edx
c0103520:	89 d0                	mov    %edx,%eax
c0103522:	f7 d0                	not    %eax
c0103524:	89 c2                	mov    %eax,%edx
c0103526:	0f b7 05 70 e5 12 c0 	movzwl 0xc012e570,%eax
c010352d:	21 d0                	and    %edx,%eax
c010352f:	0f b7 c0             	movzwl %ax,%eax
c0103532:	89 04 24             	mov    %eax,(%esp)
c0103535:	e8 7c ff ff ff       	call   c01034b6 <pic_setmask>
}
c010353a:	c9                   	leave  
c010353b:	c3                   	ret    

c010353c <pic_init>:

/* pic_init - initialize the 8259A interrupt controllers */
void
pic_init(void) {
c010353c:	55                   	push   %ebp
c010353d:	89 e5                	mov    %esp,%ebp
c010353f:	83 ec 44             	sub    $0x44,%esp
    did_init = 1;
c0103542:	c7 05 a0 06 1a c0 01 	movl   $0x1,0xc01a06a0
c0103549:	00 00 00 
c010354c:	66 c7 45 fe 21 00    	movw   $0x21,-0x2(%ebp)
c0103552:	c6 45 fd ff          	movb   $0xff,-0x3(%ebp)
c0103556:	0f b6 45 fd          	movzbl -0x3(%ebp),%eax
c010355a:	0f b7 55 fe          	movzwl -0x2(%ebp),%edx
c010355e:	ee                   	out    %al,(%dx)
c010355f:	66 c7 45 fa a1 00    	movw   $0xa1,-0x6(%ebp)
c0103565:	c6 45 f9 ff          	movb   $0xff,-0x7(%ebp)
c0103569:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c010356d:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
c0103571:	ee                   	out    %al,(%dx)
c0103572:	66 c7 45 f6 20 00    	movw   $0x20,-0xa(%ebp)
c0103578:	c6 45 f5 11          	movb   $0x11,-0xb(%ebp)
c010357c:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c0103580:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c0103584:	ee                   	out    %al,(%dx)
c0103585:	66 c7 45 f2 21 00    	movw   $0x21,-0xe(%ebp)
c010358b:	c6 45 f1 20          	movb   $0x20,-0xf(%ebp)
c010358f:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c0103593:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0103597:	ee                   	out    %al,(%dx)
c0103598:	66 c7 45 ee 21 00    	movw   $0x21,-0x12(%ebp)
c010359e:	c6 45 ed 04          	movb   $0x4,-0x13(%ebp)
c01035a2:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c01035a6:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c01035aa:	ee                   	out    %al,(%dx)
c01035ab:	66 c7 45 ea 21 00    	movw   $0x21,-0x16(%ebp)
c01035b1:	c6 45 e9 03          	movb   $0x3,-0x17(%ebp)
c01035b5:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c01035b9:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c01035bd:	ee                   	out    %al,(%dx)
c01035be:	66 c7 45 e6 a0 00    	movw   $0xa0,-0x1a(%ebp)
c01035c4:	c6 45 e5 11          	movb   $0x11,-0x1b(%ebp)
c01035c8:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c01035cc:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c01035d0:	ee                   	out    %al,(%dx)
c01035d1:	66 c7 45 e2 a1 00    	movw   $0xa1,-0x1e(%ebp)
c01035d7:	c6 45 e1 28          	movb   $0x28,-0x1f(%ebp)
c01035db:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
c01035df:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c01035e3:	ee                   	out    %al,(%dx)
c01035e4:	66 c7 45 de a1 00    	movw   $0xa1,-0x22(%ebp)
c01035ea:	c6 45 dd 02          	movb   $0x2,-0x23(%ebp)
c01035ee:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c01035f2:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
c01035f6:	ee                   	out    %al,(%dx)
c01035f7:	66 c7 45 da a1 00    	movw   $0xa1,-0x26(%ebp)
c01035fd:	c6 45 d9 03          	movb   $0x3,-0x27(%ebp)
c0103601:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
c0103605:	0f b7 55 da          	movzwl -0x26(%ebp),%edx
c0103609:	ee                   	out    %al,(%dx)
c010360a:	66 c7 45 d6 20 00    	movw   $0x20,-0x2a(%ebp)
c0103610:	c6 45 d5 68          	movb   $0x68,-0x2b(%ebp)
c0103614:	0f b6 45 d5          	movzbl -0x2b(%ebp),%eax
c0103618:	0f b7 55 d6          	movzwl -0x2a(%ebp),%edx
c010361c:	ee                   	out    %al,(%dx)
c010361d:	66 c7 45 d2 20 00    	movw   $0x20,-0x2e(%ebp)
c0103623:	c6 45 d1 0a          	movb   $0xa,-0x2f(%ebp)
c0103627:	0f b6 45 d1          	movzbl -0x2f(%ebp),%eax
c010362b:	0f b7 55 d2          	movzwl -0x2e(%ebp),%edx
c010362f:	ee                   	out    %al,(%dx)
c0103630:	66 c7 45 ce a0 00    	movw   $0xa0,-0x32(%ebp)
c0103636:	c6 45 cd 68          	movb   $0x68,-0x33(%ebp)
c010363a:	0f b6 45 cd          	movzbl -0x33(%ebp),%eax
c010363e:	0f b7 55 ce          	movzwl -0x32(%ebp),%edx
c0103642:	ee                   	out    %al,(%dx)
c0103643:	66 c7 45 ca a0 00    	movw   $0xa0,-0x36(%ebp)
c0103649:	c6 45 c9 0a          	movb   $0xa,-0x37(%ebp)
c010364d:	0f b6 45 c9          	movzbl -0x37(%ebp),%eax
c0103651:	0f b7 55 ca          	movzwl -0x36(%ebp),%edx
c0103655:	ee                   	out    %al,(%dx)
    outb(IO_PIC1, 0x0a);    // read IRR by default

    outb(IO_PIC2, 0x68);    // OCW3
    outb(IO_PIC2, 0x0a);    // OCW3

    if (irq_mask != 0xFFFF) {
c0103656:	0f b7 05 70 e5 12 c0 	movzwl 0xc012e570,%eax
c010365d:	66 83 f8 ff          	cmp    $0xffff,%ax
c0103661:	74 12                	je     c0103675 <pic_init+0x139>
        pic_setmask(irq_mask);
c0103663:	0f b7 05 70 e5 12 c0 	movzwl 0xc012e570,%eax
c010366a:	0f b7 c0             	movzwl %ax,%eax
c010366d:	89 04 24             	mov    %eax,(%esp)
c0103670:	e8 41 fe ff ff       	call   c01034b6 <pic_setmask>
    }
}
c0103675:	c9                   	leave  
c0103676:	c3                   	ret    

c0103677 <print_ticks>:
#include <sched.h>
#include <sync.h>

#define TICK_NUM 100

static void print_ticks() {
c0103677:	55                   	push   %ebp
c0103678:	89 e5                	mov    %esp,%ebp
c010367a:	83 ec 18             	sub    $0x18,%esp
    cprintf("%d ticks\n",TICK_NUM);
c010367d:	c7 44 24 04 64 00 00 	movl   $0x64,0x4(%esp)
c0103684:	00 
c0103685:	c7 04 24 80 db 10 c0 	movl   $0xc010db80,(%esp)
c010368c:	e8 45 e1 ff ff       	call   c01017d6 <cprintf>
#ifdef DEBUG_GRADE
    cprintf("End of Test.\n");
c0103691:	c7 04 24 8a db 10 c0 	movl   $0xc010db8a,(%esp)
c0103698:	e8 39 e1 ff ff       	call   c01017d6 <cprintf>
    panic("EOT: kernel seems ok.");
c010369d:	c7 44 24 08 98 db 10 	movl   $0xc010db98,0x8(%esp)
c01036a4:	c0 
c01036a5:	c7 44 24 04 19 00 00 	movl   $0x19,0x4(%esp)
c01036ac:	00 
c01036ad:	c7 04 24 ae db 10 c0 	movl   $0xc010dbae,(%esp)
c01036b4:	e8 9f eb ff ff       	call   c0102258 <__panic>

c01036b9 <idt_init>:
    sizeof(idt) - 1, (uintptr_t)idt
};

/* idt_init - initialize IDT to each of the entry points in kern/trap/vectors.S */
void
idt_init(void) {
c01036b9:	55                   	push   %ebp
c01036ba:	89 e5                	mov    %esp,%ebp
c01036bc:	83 ec 10             	sub    $0x10,%esp
     /* LAB5 YOUR CODE */ 
     //you should update your lab1 code (just add ONE or TWO lines of code), let user app to use syscall to get the service of ucore
     //so you should setup the syscall interrupt gate in here
    extern uintptr_t __vectors[];
    int i;
    for (i = 0; i < sizeof(idt) / sizeof(struct gatedesc); i ++) {
c01036bf:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c01036c6:	e9 c3 00 00 00       	jmp    c010378e <idt_init+0xd5>
        SETGATE(idt[i], 0, GD_KTEXT, __vectors[i], DPL_KERNEL);
c01036cb:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01036ce:	8b 04 85 00 e6 12 c0 	mov    -0x3fed1a00(,%eax,4),%eax
c01036d5:	89 c2                	mov    %eax,%edx
c01036d7:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01036da:	66 89 14 c5 c0 06 1a 	mov    %dx,-0x3fe5f940(,%eax,8)
c01036e1:	c0 
c01036e2:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01036e5:	66 c7 04 c5 c2 06 1a 	movw   $0x8,-0x3fe5f93e(,%eax,8)
c01036ec:	c0 08 00 
c01036ef:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01036f2:	0f b6 14 c5 c4 06 1a 	movzbl -0x3fe5f93c(,%eax,8),%edx
c01036f9:	c0 
c01036fa:	83 e2 e0             	and    $0xffffffe0,%edx
c01036fd:	88 14 c5 c4 06 1a c0 	mov    %dl,-0x3fe5f93c(,%eax,8)
c0103704:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0103707:	0f b6 14 c5 c4 06 1a 	movzbl -0x3fe5f93c(,%eax,8),%edx
c010370e:	c0 
c010370f:	83 e2 1f             	and    $0x1f,%edx
c0103712:	88 14 c5 c4 06 1a c0 	mov    %dl,-0x3fe5f93c(,%eax,8)
c0103719:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010371c:	0f b6 14 c5 c5 06 1a 	movzbl -0x3fe5f93b(,%eax,8),%edx
c0103723:	c0 
c0103724:	83 e2 f0             	and    $0xfffffff0,%edx
c0103727:	83 ca 0e             	or     $0xe,%edx
c010372a:	88 14 c5 c5 06 1a c0 	mov    %dl,-0x3fe5f93b(,%eax,8)
c0103731:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0103734:	0f b6 14 c5 c5 06 1a 	movzbl -0x3fe5f93b(,%eax,8),%edx
c010373b:	c0 
c010373c:	83 e2 ef             	and    $0xffffffef,%edx
c010373f:	88 14 c5 c5 06 1a c0 	mov    %dl,-0x3fe5f93b(,%eax,8)
c0103746:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0103749:	0f b6 14 c5 c5 06 1a 	movzbl -0x3fe5f93b(,%eax,8),%edx
c0103750:	c0 
c0103751:	83 e2 9f             	and    $0xffffff9f,%edx
c0103754:	88 14 c5 c5 06 1a c0 	mov    %dl,-0x3fe5f93b(,%eax,8)
c010375b:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010375e:	0f b6 14 c5 c5 06 1a 	movzbl -0x3fe5f93b(,%eax,8),%edx
c0103765:	c0 
c0103766:	83 ca 80             	or     $0xffffff80,%edx
c0103769:	88 14 c5 c5 06 1a c0 	mov    %dl,-0x3fe5f93b(,%eax,8)
c0103770:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0103773:	8b 04 85 00 e6 12 c0 	mov    -0x3fed1a00(,%eax,4),%eax
c010377a:	c1 e8 10             	shr    $0x10,%eax
c010377d:	89 c2                	mov    %eax,%edx
c010377f:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0103782:	66 89 14 c5 c6 06 1a 	mov    %dx,-0x3fe5f93a(,%eax,8)
c0103789:	c0 
     /* LAB5 YOUR CODE */ 
     //you should update your lab1 code (just add ONE or TWO lines of code), let user app to use syscall to get the service of ucore
     //so you should setup the syscall interrupt gate in here
    extern uintptr_t __vectors[];
    int i;
    for (i = 0; i < sizeof(idt) / sizeof(struct gatedesc); i ++) {
c010378a:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c010378e:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0103791:	3d ff 00 00 00       	cmp    $0xff,%eax
c0103796:	0f 86 2f ff ff ff    	jbe    c01036cb <idt_init+0x12>
        SETGATE(idt[i], 0, GD_KTEXT, __vectors[i], DPL_KERNEL);
    }
    SETGATE(idt[T_SYSCALL], 1, GD_KTEXT, __vectors[T_SYSCALL], DPL_USER);
c010379c:	a1 00 e8 12 c0       	mov    0xc012e800,%eax
c01037a1:	66 a3 c0 0a 1a c0    	mov    %ax,0xc01a0ac0
c01037a7:	66 c7 05 c2 0a 1a c0 	movw   $0x8,0xc01a0ac2
c01037ae:	08 00 
c01037b0:	0f b6 05 c4 0a 1a c0 	movzbl 0xc01a0ac4,%eax
c01037b7:	83 e0 e0             	and    $0xffffffe0,%eax
c01037ba:	a2 c4 0a 1a c0       	mov    %al,0xc01a0ac4
c01037bf:	0f b6 05 c4 0a 1a c0 	movzbl 0xc01a0ac4,%eax
c01037c6:	83 e0 1f             	and    $0x1f,%eax
c01037c9:	a2 c4 0a 1a c0       	mov    %al,0xc01a0ac4
c01037ce:	0f b6 05 c5 0a 1a c0 	movzbl 0xc01a0ac5,%eax
c01037d5:	83 c8 0f             	or     $0xf,%eax
c01037d8:	a2 c5 0a 1a c0       	mov    %al,0xc01a0ac5
c01037dd:	0f b6 05 c5 0a 1a c0 	movzbl 0xc01a0ac5,%eax
c01037e4:	83 e0 ef             	and    $0xffffffef,%eax
c01037e7:	a2 c5 0a 1a c0       	mov    %al,0xc01a0ac5
c01037ec:	0f b6 05 c5 0a 1a c0 	movzbl 0xc01a0ac5,%eax
c01037f3:	83 c8 60             	or     $0x60,%eax
c01037f6:	a2 c5 0a 1a c0       	mov    %al,0xc01a0ac5
c01037fb:	0f b6 05 c5 0a 1a c0 	movzbl 0xc01a0ac5,%eax
c0103802:	83 c8 80             	or     $0xffffff80,%eax
c0103805:	a2 c5 0a 1a c0       	mov    %al,0xc01a0ac5
c010380a:	a1 00 e8 12 c0       	mov    0xc012e800,%eax
c010380f:	c1 e8 10             	shr    $0x10,%eax
c0103812:	66 a3 c6 0a 1a c0    	mov    %ax,0xc01a0ac6
c0103818:	c7 45 f8 80 e5 12 c0 	movl   $0xc012e580,-0x8(%ebp)
    }
}

static inline void
lidt(struct pseudodesc *pd) {
    asm volatile ("lidt (%0)" :: "r" (pd) : "memory");
c010381f:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0103822:	0f 01 18             	lidtl  (%eax)
    lidt(&idt_pd);
}
c0103825:	c9                   	leave  
c0103826:	c3                   	ret    

c0103827 <trapname>:

static const char *
trapname(int trapno) {
c0103827:	55                   	push   %ebp
c0103828:	89 e5                	mov    %esp,%ebp
        "Alignment Check",
        "Machine-Check",
        "SIMD Floating-Point Exception"
    };

    if (trapno < sizeof(excnames)/sizeof(const char * const)) {
c010382a:	8b 45 08             	mov    0x8(%ebp),%eax
c010382d:	83 f8 13             	cmp    $0x13,%eax
c0103830:	77 0c                	ja     c010383e <trapname+0x17>
        return excnames[trapno];
c0103832:	8b 45 08             	mov    0x8(%ebp),%eax
c0103835:	8b 04 85 40 e0 10 c0 	mov    -0x3fef1fc0(,%eax,4),%eax
c010383c:	eb 18                	jmp    c0103856 <trapname+0x2f>
    }
    if (trapno >= IRQ_OFFSET && trapno < IRQ_OFFSET + 16) {
c010383e:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
c0103842:	7e 0d                	jle    c0103851 <trapname+0x2a>
c0103844:	83 7d 08 2f          	cmpl   $0x2f,0x8(%ebp)
c0103848:	7f 07                	jg     c0103851 <trapname+0x2a>
        return "Hardware Interrupt";
c010384a:	b8 bf db 10 c0       	mov    $0xc010dbbf,%eax
c010384f:	eb 05                	jmp    c0103856 <trapname+0x2f>
    }
    return "(unknown trap)";
c0103851:	b8 d2 db 10 c0       	mov    $0xc010dbd2,%eax
}
c0103856:	5d                   	pop    %ebp
c0103857:	c3                   	ret    

c0103858 <trap_in_kernel>:

/* trap_in_kernel - test if trap happened in kernel */
bool
trap_in_kernel(struct trapframe *tf) {
c0103858:	55                   	push   %ebp
c0103859:	89 e5                	mov    %esp,%ebp
    return (tf->tf_cs == (uint16_t)KERNEL_CS);
c010385b:	8b 45 08             	mov    0x8(%ebp),%eax
c010385e:	0f b7 40 3c          	movzwl 0x3c(%eax),%eax
c0103862:	66 83 f8 08          	cmp    $0x8,%ax
c0103866:	0f 94 c0             	sete   %al
c0103869:	0f b6 c0             	movzbl %al,%eax
}
c010386c:	5d                   	pop    %ebp
c010386d:	c3                   	ret    

c010386e <print_trapframe>:
    "TF", "IF", "DF", "OF", NULL, NULL, "NT", NULL,
    "RF", "VM", "AC", "VIF", "VIP", "ID", NULL, NULL,
};

void
print_trapframe(struct trapframe *tf) {
c010386e:	55                   	push   %ebp
c010386f:	89 e5                	mov    %esp,%ebp
c0103871:	83 ec 28             	sub    $0x28,%esp
    cprintf("trapframe at %p\n", tf);
c0103874:	8b 45 08             	mov    0x8(%ebp),%eax
c0103877:	89 44 24 04          	mov    %eax,0x4(%esp)
c010387b:	c7 04 24 13 dc 10 c0 	movl   $0xc010dc13,(%esp)
c0103882:	e8 4f df ff ff       	call   c01017d6 <cprintf>
    print_regs(&tf->tf_regs);
c0103887:	8b 45 08             	mov    0x8(%ebp),%eax
c010388a:	89 04 24             	mov    %eax,(%esp)
c010388d:	e8 a1 01 00 00       	call   c0103a33 <print_regs>
    cprintf("  ds   0x----%04x\n", tf->tf_ds);
c0103892:	8b 45 08             	mov    0x8(%ebp),%eax
c0103895:	0f b7 40 2c          	movzwl 0x2c(%eax),%eax
c0103899:	0f b7 c0             	movzwl %ax,%eax
c010389c:	89 44 24 04          	mov    %eax,0x4(%esp)
c01038a0:	c7 04 24 24 dc 10 c0 	movl   $0xc010dc24,(%esp)
c01038a7:	e8 2a df ff ff       	call   c01017d6 <cprintf>
    cprintf("  es   0x----%04x\n", tf->tf_es);
c01038ac:	8b 45 08             	mov    0x8(%ebp),%eax
c01038af:	0f b7 40 28          	movzwl 0x28(%eax),%eax
c01038b3:	0f b7 c0             	movzwl %ax,%eax
c01038b6:	89 44 24 04          	mov    %eax,0x4(%esp)
c01038ba:	c7 04 24 37 dc 10 c0 	movl   $0xc010dc37,(%esp)
c01038c1:	e8 10 df ff ff       	call   c01017d6 <cprintf>
    cprintf("  fs   0x----%04x\n", tf->tf_fs);
c01038c6:	8b 45 08             	mov    0x8(%ebp),%eax
c01038c9:	0f b7 40 24          	movzwl 0x24(%eax),%eax
c01038cd:	0f b7 c0             	movzwl %ax,%eax
c01038d0:	89 44 24 04          	mov    %eax,0x4(%esp)
c01038d4:	c7 04 24 4a dc 10 c0 	movl   $0xc010dc4a,(%esp)
c01038db:	e8 f6 de ff ff       	call   c01017d6 <cprintf>
    cprintf("  gs   0x----%04x\n", tf->tf_gs);
c01038e0:	8b 45 08             	mov    0x8(%ebp),%eax
c01038e3:	0f b7 40 20          	movzwl 0x20(%eax),%eax
c01038e7:	0f b7 c0             	movzwl %ax,%eax
c01038ea:	89 44 24 04          	mov    %eax,0x4(%esp)
c01038ee:	c7 04 24 5d dc 10 c0 	movl   $0xc010dc5d,(%esp)
c01038f5:	e8 dc de ff ff       	call   c01017d6 <cprintf>
    cprintf("  trap 0x%08x %s\n", tf->tf_trapno, trapname(tf->tf_trapno));
c01038fa:	8b 45 08             	mov    0x8(%ebp),%eax
c01038fd:	8b 40 30             	mov    0x30(%eax),%eax
c0103900:	89 04 24             	mov    %eax,(%esp)
c0103903:	e8 1f ff ff ff       	call   c0103827 <trapname>
c0103908:	8b 55 08             	mov    0x8(%ebp),%edx
c010390b:	8b 52 30             	mov    0x30(%edx),%edx
c010390e:	89 44 24 08          	mov    %eax,0x8(%esp)
c0103912:	89 54 24 04          	mov    %edx,0x4(%esp)
c0103916:	c7 04 24 70 dc 10 c0 	movl   $0xc010dc70,(%esp)
c010391d:	e8 b4 de ff ff       	call   c01017d6 <cprintf>
    cprintf("  err  0x%08x\n", tf->tf_err);
c0103922:	8b 45 08             	mov    0x8(%ebp),%eax
c0103925:	8b 40 34             	mov    0x34(%eax),%eax
c0103928:	89 44 24 04          	mov    %eax,0x4(%esp)
c010392c:	c7 04 24 82 dc 10 c0 	movl   $0xc010dc82,(%esp)
c0103933:	e8 9e de ff ff       	call   c01017d6 <cprintf>
    cprintf("  eip  0x%08x\n", tf->tf_eip);
c0103938:	8b 45 08             	mov    0x8(%ebp),%eax
c010393b:	8b 40 38             	mov    0x38(%eax),%eax
c010393e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0103942:	c7 04 24 91 dc 10 c0 	movl   $0xc010dc91,(%esp)
c0103949:	e8 88 de ff ff       	call   c01017d6 <cprintf>
    cprintf("  cs   0x----%04x\n", tf->tf_cs);
c010394e:	8b 45 08             	mov    0x8(%ebp),%eax
c0103951:	0f b7 40 3c          	movzwl 0x3c(%eax),%eax
c0103955:	0f b7 c0             	movzwl %ax,%eax
c0103958:	89 44 24 04          	mov    %eax,0x4(%esp)
c010395c:	c7 04 24 a0 dc 10 c0 	movl   $0xc010dca0,(%esp)
c0103963:	e8 6e de ff ff       	call   c01017d6 <cprintf>
    cprintf("  flag 0x%08x ", tf->tf_eflags);
c0103968:	8b 45 08             	mov    0x8(%ebp),%eax
c010396b:	8b 40 40             	mov    0x40(%eax),%eax
c010396e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0103972:	c7 04 24 b3 dc 10 c0 	movl   $0xc010dcb3,(%esp)
c0103979:	e8 58 de ff ff       	call   c01017d6 <cprintf>

    int i, j;
    for (i = 0, j = 1; i < sizeof(IA32flags) / sizeof(IA32flags[0]); i ++, j <<= 1) {
c010397e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0103985:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
c010398c:	eb 3e                	jmp    c01039cc <print_trapframe+0x15e>
        if ((tf->tf_eflags & j) && IA32flags[i] != NULL) {
c010398e:	8b 45 08             	mov    0x8(%ebp),%eax
c0103991:	8b 50 40             	mov    0x40(%eax),%edx
c0103994:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103997:	21 d0                	and    %edx,%eax
c0103999:	85 c0                	test   %eax,%eax
c010399b:	74 28                	je     c01039c5 <print_trapframe+0x157>
c010399d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01039a0:	8b 04 85 a0 e5 12 c0 	mov    -0x3fed1a60(,%eax,4),%eax
c01039a7:	85 c0                	test   %eax,%eax
c01039a9:	74 1a                	je     c01039c5 <print_trapframe+0x157>
            cprintf("%s,", IA32flags[i]);
c01039ab:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01039ae:	8b 04 85 a0 e5 12 c0 	mov    -0x3fed1a60(,%eax,4),%eax
c01039b5:	89 44 24 04          	mov    %eax,0x4(%esp)
c01039b9:	c7 04 24 c2 dc 10 c0 	movl   $0xc010dcc2,(%esp)
c01039c0:	e8 11 de ff ff       	call   c01017d6 <cprintf>
    cprintf("  eip  0x%08x\n", tf->tf_eip);
    cprintf("  cs   0x----%04x\n", tf->tf_cs);
    cprintf("  flag 0x%08x ", tf->tf_eflags);

    int i, j;
    for (i = 0, j = 1; i < sizeof(IA32flags) / sizeof(IA32flags[0]); i ++, j <<= 1) {
c01039c5:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01039c9:	d1 65 f0             	shll   -0x10(%ebp)
c01039cc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01039cf:	83 f8 17             	cmp    $0x17,%eax
c01039d2:	76 ba                	jbe    c010398e <print_trapframe+0x120>
        if ((tf->tf_eflags & j) && IA32flags[i] != NULL) {
            cprintf("%s,", IA32flags[i]);
        }
    }
    cprintf("IOPL=%d\n", (tf->tf_eflags & FL_IOPL_MASK) >> 12);
c01039d4:	8b 45 08             	mov    0x8(%ebp),%eax
c01039d7:	8b 40 40             	mov    0x40(%eax),%eax
c01039da:	25 00 30 00 00       	and    $0x3000,%eax
c01039df:	c1 e8 0c             	shr    $0xc,%eax
c01039e2:	89 44 24 04          	mov    %eax,0x4(%esp)
c01039e6:	c7 04 24 c6 dc 10 c0 	movl   $0xc010dcc6,(%esp)
c01039ed:	e8 e4 dd ff ff       	call   c01017d6 <cprintf>

    if (!trap_in_kernel(tf)) {
c01039f2:	8b 45 08             	mov    0x8(%ebp),%eax
c01039f5:	89 04 24             	mov    %eax,(%esp)
c01039f8:	e8 5b fe ff ff       	call   c0103858 <trap_in_kernel>
c01039fd:	85 c0                	test   %eax,%eax
c01039ff:	75 30                	jne    c0103a31 <print_trapframe+0x1c3>
        cprintf("  esp  0x%08x\n", tf->tf_esp);
c0103a01:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a04:	8b 40 44             	mov    0x44(%eax),%eax
c0103a07:	89 44 24 04          	mov    %eax,0x4(%esp)
c0103a0b:	c7 04 24 cf dc 10 c0 	movl   $0xc010dccf,(%esp)
c0103a12:	e8 bf dd ff ff       	call   c01017d6 <cprintf>
        cprintf("  ss   0x----%04x\n", tf->tf_ss);
c0103a17:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a1a:	0f b7 40 48          	movzwl 0x48(%eax),%eax
c0103a1e:	0f b7 c0             	movzwl %ax,%eax
c0103a21:	89 44 24 04          	mov    %eax,0x4(%esp)
c0103a25:	c7 04 24 de dc 10 c0 	movl   $0xc010dcde,(%esp)
c0103a2c:	e8 a5 dd ff ff       	call   c01017d6 <cprintf>
    }
}
c0103a31:	c9                   	leave  
c0103a32:	c3                   	ret    

c0103a33 <print_regs>:

void
print_regs(struct pushregs *regs) {
c0103a33:	55                   	push   %ebp
c0103a34:	89 e5                	mov    %esp,%ebp
c0103a36:	83 ec 18             	sub    $0x18,%esp
    cprintf("  edi  0x%08x\n", regs->reg_edi);
c0103a39:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a3c:	8b 00                	mov    (%eax),%eax
c0103a3e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0103a42:	c7 04 24 f1 dc 10 c0 	movl   $0xc010dcf1,(%esp)
c0103a49:	e8 88 dd ff ff       	call   c01017d6 <cprintf>
    cprintf("  esi  0x%08x\n", regs->reg_esi);
c0103a4e:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a51:	8b 40 04             	mov    0x4(%eax),%eax
c0103a54:	89 44 24 04          	mov    %eax,0x4(%esp)
c0103a58:	c7 04 24 00 dd 10 c0 	movl   $0xc010dd00,(%esp)
c0103a5f:	e8 72 dd ff ff       	call   c01017d6 <cprintf>
    cprintf("  ebp  0x%08x\n", regs->reg_ebp);
c0103a64:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a67:	8b 40 08             	mov    0x8(%eax),%eax
c0103a6a:	89 44 24 04          	mov    %eax,0x4(%esp)
c0103a6e:	c7 04 24 0f dd 10 c0 	movl   $0xc010dd0f,(%esp)
c0103a75:	e8 5c dd ff ff       	call   c01017d6 <cprintf>
    cprintf("  oesp 0x%08x\n", regs->reg_oesp);
c0103a7a:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a7d:	8b 40 0c             	mov    0xc(%eax),%eax
c0103a80:	89 44 24 04          	mov    %eax,0x4(%esp)
c0103a84:	c7 04 24 1e dd 10 c0 	movl   $0xc010dd1e,(%esp)
c0103a8b:	e8 46 dd ff ff       	call   c01017d6 <cprintf>
    cprintf("  ebx  0x%08x\n", regs->reg_ebx);
c0103a90:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a93:	8b 40 10             	mov    0x10(%eax),%eax
c0103a96:	89 44 24 04          	mov    %eax,0x4(%esp)
c0103a9a:	c7 04 24 2d dd 10 c0 	movl   $0xc010dd2d,(%esp)
c0103aa1:	e8 30 dd ff ff       	call   c01017d6 <cprintf>
    cprintf("  edx  0x%08x\n", regs->reg_edx);
c0103aa6:	8b 45 08             	mov    0x8(%ebp),%eax
c0103aa9:	8b 40 14             	mov    0x14(%eax),%eax
c0103aac:	89 44 24 04          	mov    %eax,0x4(%esp)
c0103ab0:	c7 04 24 3c dd 10 c0 	movl   $0xc010dd3c,(%esp)
c0103ab7:	e8 1a dd ff ff       	call   c01017d6 <cprintf>
    cprintf("  ecx  0x%08x\n", regs->reg_ecx);
c0103abc:	8b 45 08             	mov    0x8(%ebp),%eax
c0103abf:	8b 40 18             	mov    0x18(%eax),%eax
c0103ac2:	89 44 24 04          	mov    %eax,0x4(%esp)
c0103ac6:	c7 04 24 4b dd 10 c0 	movl   $0xc010dd4b,(%esp)
c0103acd:	e8 04 dd ff ff       	call   c01017d6 <cprintf>
    cprintf("  eax  0x%08x\n", regs->reg_eax);
c0103ad2:	8b 45 08             	mov    0x8(%ebp),%eax
c0103ad5:	8b 40 1c             	mov    0x1c(%eax),%eax
c0103ad8:	89 44 24 04          	mov    %eax,0x4(%esp)
c0103adc:	c7 04 24 5a dd 10 c0 	movl   $0xc010dd5a,(%esp)
c0103ae3:	e8 ee dc ff ff       	call   c01017d6 <cprintf>
}
c0103ae8:	c9                   	leave  
c0103ae9:	c3                   	ret    

c0103aea <print_pgfault>:

static inline void
print_pgfault(struct trapframe *tf) {
c0103aea:	55                   	push   %ebp
c0103aeb:	89 e5                	mov    %esp,%ebp
c0103aed:	53                   	push   %ebx
c0103aee:	83 ec 34             	sub    $0x34,%esp
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
            (tf->tf_err & 4) ? 'U' : 'K',
            (tf->tf_err & 2) ? 'W' : 'R',
            (tf->tf_err & 1) ? "protection fault" : "no page found");
c0103af1:	8b 45 08             	mov    0x8(%ebp),%eax
c0103af4:	8b 40 34             	mov    0x34(%eax),%eax
c0103af7:	83 e0 01             	and    $0x1,%eax
    /* error_code:
     * bit 0 == 0 means no page found, 1 means protection fault
     * bit 1 == 0 means read, 1 means write
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
c0103afa:	85 c0                	test   %eax,%eax
c0103afc:	74 07                	je     c0103b05 <print_pgfault+0x1b>
c0103afe:	b9 69 dd 10 c0       	mov    $0xc010dd69,%ecx
c0103b03:	eb 05                	jmp    c0103b0a <print_pgfault+0x20>
c0103b05:	b9 7a dd 10 c0       	mov    $0xc010dd7a,%ecx
            (tf->tf_err & 4) ? 'U' : 'K',
            (tf->tf_err & 2) ? 'W' : 'R',
c0103b0a:	8b 45 08             	mov    0x8(%ebp),%eax
c0103b0d:	8b 40 34             	mov    0x34(%eax),%eax
c0103b10:	83 e0 02             	and    $0x2,%eax
    /* error_code:
     * bit 0 == 0 means no page found, 1 means protection fault
     * bit 1 == 0 means read, 1 means write
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
c0103b13:	85 c0                	test   %eax,%eax
c0103b15:	74 07                	je     c0103b1e <print_pgfault+0x34>
c0103b17:	ba 57 00 00 00       	mov    $0x57,%edx
c0103b1c:	eb 05                	jmp    c0103b23 <print_pgfault+0x39>
c0103b1e:	ba 52 00 00 00       	mov    $0x52,%edx
            (tf->tf_err & 4) ? 'U' : 'K',
c0103b23:	8b 45 08             	mov    0x8(%ebp),%eax
c0103b26:	8b 40 34             	mov    0x34(%eax),%eax
c0103b29:	83 e0 04             	and    $0x4,%eax
    /* error_code:
     * bit 0 == 0 means no page found, 1 means protection fault
     * bit 1 == 0 means read, 1 means write
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
c0103b2c:	85 c0                	test   %eax,%eax
c0103b2e:	74 07                	je     c0103b37 <print_pgfault+0x4d>
c0103b30:	b8 55 00 00 00       	mov    $0x55,%eax
c0103b35:	eb 05                	jmp    c0103b3c <print_pgfault+0x52>
c0103b37:	b8 4b 00 00 00       	mov    $0x4b,%eax
}

static inline uintptr_t
rcr2(void) {
    uintptr_t cr2;
    asm volatile ("mov %%cr2, %0" : "=r" (cr2) :: "memory");
c0103b3c:	0f 20 d3             	mov    %cr2,%ebx
c0103b3f:	89 5d f4             	mov    %ebx,-0xc(%ebp)
    return cr2;
c0103b42:	8b 5d f4             	mov    -0xc(%ebp),%ebx
c0103b45:	89 4c 24 10          	mov    %ecx,0x10(%esp)
c0103b49:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0103b4d:	89 44 24 08          	mov    %eax,0x8(%esp)
c0103b51:	89 5c 24 04          	mov    %ebx,0x4(%esp)
c0103b55:	c7 04 24 88 dd 10 c0 	movl   $0xc010dd88,(%esp)
c0103b5c:	e8 75 dc ff ff       	call   c01017d6 <cprintf>
            (tf->tf_err & 4) ? 'U' : 'K',
            (tf->tf_err & 2) ? 'W' : 'R',
            (tf->tf_err & 1) ? "protection fault" : "no page found");
}
c0103b61:	83 c4 34             	add    $0x34,%esp
c0103b64:	5b                   	pop    %ebx
c0103b65:	5d                   	pop    %ebp
c0103b66:	c3                   	ret    

c0103b67 <pgfault_handler>:

static int
pgfault_handler(struct trapframe *tf) {
c0103b67:	55                   	push   %ebp
c0103b68:	89 e5                	mov    %esp,%ebp
c0103b6a:	83 ec 28             	sub    $0x28,%esp
    extern struct mm_struct *check_mm_struct;
    if(check_mm_struct !=NULL) { //used for test check_swap
c0103b6d:	a1 ac 30 1a c0       	mov    0xc01a30ac,%eax
c0103b72:	85 c0                	test   %eax,%eax
c0103b74:	74 0b                	je     c0103b81 <pgfault_handler+0x1a>
            print_pgfault(tf);
c0103b76:	8b 45 08             	mov    0x8(%ebp),%eax
c0103b79:	89 04 24             	mov    %eax,(%esp)
c0103b7c:	e8 69 ff ff ff       	call   c0103aea <print_pgfault>
        }
    struct mm_struct *mm;
    if (check_mm_struct != NULL) {
c0103b81:	a1 ac 30 1a c0       	mov    0xc01a30ac,%eax
c0103b86:	85 c0                	test   %eax,%eax
c0103b88:	74 3d                	je     c0103bc7 <pgfault_handler+0x60>
        assert(current == idleproc);
c0103b8a:	8b 15 88 0f 1a c0    	mov    0xc01a0f88,%edx
c0103b90:	a1 80 0f 1a c0       	mov    0xc01a0f80,%eax
c0103b95:	39 c2                	cmp    %eax,%edx
c0103b97:	74 24                	je     c0103bbd <pgfault_handler+0x56>
c0103b99:	c7 44 24 0c ab dd 10 	movl   $0xc010ddab,0xc(%esp)
c0103ba0:	c0 
c0103ba1:	c7 44 24 08 bf dd 10 	movl   $0xc010ddbf,0x8(%esp)
c0103ba8:	c0 
c0103ba9:	c7 44 24 04 af 00 00 	movl   $0xaf,0x4(%esp)
c0103bb0:	00 
c0103bb1:	c7 04 24 ae db 10 c0 	movl   $0xc010dbae,(%esp)
c0103bb8:	e8 9b e6 ff ff       	call   c0102258 <__panic>
        mm = check_mm_struct;
c0103bbd:	a1 ac 30 1a c0       	mov    0xc01a30ac,%eax
c0103bc2:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0103bc5:	eb 46                	jmp    c0103c0d <pgfault_handler+0xa6>
    }
    else {
        if (current == NULL) {
c0103bc7:	a1 88 0f 1a c0       	mov    0xc01a0f88,%eax
c0103bcc:	85 c0                	test   %eax,%eax
c0103bce:	75 32                	jne    c0103c02 <pgfault_handler+0x9b>
            print_trapframe(tf);
c0103bd0:	8b 45 08             	mov    0x8(%ebp),%eax
c0103bd3:	89 04 24             	mov    %eax,(%esp)
c0103bd6:	e8 93 fc ff ff       	call   c010386e <print_trapframe>
            print_pgfault(tf);
c0103bdb:	8b 45 08             	mov    0x8(%ebp),%eax
c0103bde:	89 04 24             	mov    %eax,(%esp)
c0103be1:	e8 04 ff ff ff       	call   c0103aea <print_pgfault>
            panic("unhandled page fault.\n");
c0103be6:	c7 44 24 08 d4 dd 10 	movl   $0xc010ddd4,0x8(%esp)
c0103bed:	c0 
c0103bee:	c7 44 24 04 b6 00 00 	movl   $0xb6,0x4(%esp)
c0103bf5:	00 
c0103bf6:	c7 04 24 ae db 10 c0 	movl   $0xc010dbae,(%esp)
c0103bfd:	e8 56 e6 ff ff       	call   c0102258 <__panic>
        }
        mm = current->mm;
c0103c02:	a1 88 0f 1a c0       	mov    0xc01a0f88,%eax
c0103c07:	8b 40 18             	mov    0x18(%eax),%eax
c0103c0a:	89 45 f4             	mov    %eax,-0xc(%ebp)
}

static inline uintptr_t
rcr2(void) {
    uintptr_t cr2;
    asm volatile ("mov %%cr2, %0" : "=r" (cr2) :: "memory");
c0103c0d:	0f 20 d0             	mov    %cr2,%eax
c0103c10:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return cr2;
c0103c13:	8b 45 f0             	mov    -0x10(%ebp),%eax
    }
    return do_pgfault(mm, tf->tf_err, rcr2());
c0103c16:	89 c2                	mov    %eax,%edx
c0103c18:	8b 45 08             	mov    0x8(%ebp),%eax
c0103c1b:	8b 40 34             	mov    0x34(%eax),%eax
c0103c1e:	89 54 24 08          	mov    %edx,0x8(%esp)
c0103c22:	89 44 24 04          	mov    %eax,0x4(%esp)
c0103c26:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103c29:	89 04 24             	mov    %eax,(%esp)
c0103c2c:	e8 0a 66 00 00       	call   c010a23b <do_pgfault>
}
c0103c31:	c9                   	leave  
c0103c32:	c3                   	ret    

c0103c33 <trap_dispatch>:

static volatile int in_swap_tick_event = 0;
extern struct mm_struct *check_mm_struct;

static void
trap_dispatch(struct trapframe *tf) {
c0103c33:	55                   	push   %ebp
c0103c34:	89 e5                	mov    %esp,%ebp
c0103c36:	83 ec 28             	sub    $0x28,%esp
    char c;

    int ret=0;
c0103c39:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    switch (tf->tf_trapno) {
c0103c40:	8b 45 08             	mov    0x8(%ebp),%eax
c0103c43:	8b 40 30             	mov    0x30(%eax),%eax
c0103c46:	83 f8 2f             	cmp    $0x2f,%eax
c0103c49:	77 38                	ja     c0103c83 <trap_dispatch+0x50>
c0103c4b:	83 f8 2e             	cmp    $0x2e,%eax
c0103c4e:	0f 83 32 02 00 00    	jae    c0103e86 <trap_dispatch+0x253>
c0103c54:	83 f8 20             	cmp    $0x20,%eax
c0103c57:	0f 84 07 01 00 00    	je     c0103d64 <trap_dispatch+0x131>
c0103c5d:	83 f8 20             	cmp    $0x20,%eax
c0103c60:	77 0a                	ja     c0103c6c <trap_dispatch+0x39>
c0103c62:	83 f8 0e             	cmp    $0xe,%eax
c0103c65:	74 3e                	je     c0103ca5 <trap_dispatch+0x72>
c0103c67:	e9 d2 01 00 00       	jmp    c0103e3e <trap_dispatch+0x20b>
c0103c6c:	83 f8 21             	cmp    $0x21,%eax
c0103c6f:	0f 84 87 01 00 00    	je     c0103dfc <trap_dispatch+0x1c9>
c0103c75:	83 f8 24             	cmp    $0x24,%eax
c0103c78:	0f 84 55 01 00 00    	je     c0103dd3 <trap_dispatch+0x1a0>
c0103c7e:	e9 bb 01 00 00       	jmp    c0103e3e <trap_dispatch+0x20b>
c0103c83:	83 f8 78             	cmp    $0x78,%eax
c0103c86:	0f 82 b2 01 00 00    	jb     c0103e3e <trap_dispatch+0x20b>
c0103c8c:	83 f8 79             	cmp    $0x79,%eax
c0103c8f:	0f 86 8d 01 00 00    	jbe    c0103e22 <trap_dispatch+0x1ef>
c0103c95:	3d 80 00 00 00       	cmp    $0x80,%eax
c0103c9a:	0f 84 ba 00 00 00    	je     c0103d5a <trap_dispatch+0x127>
c0103ca0:	e9 99 01 00 00       	jmp    c0103e3e <trap_dispatch+0x20b>
    case T_PGFLT:  //page fault
        if ((ret = pgfault_handler(tf)) != 0) {
c0103ca5:	8b 45 08             	mov    0x8(%ebp),%eax
c0103ca8:	89 04 24             	mov    %eax,(%esp)
c0103cab:	e8 b7 fe ff ff       	call   c0103b67 <pgfault_handler>
c0103cb0:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0103cb3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0103cb7:	0f 84 98 00 00 00    	je     c0103d55 <trap_dispatch+0x122>
            print_trapframe(tf);
c0103cbd:	8b 45 08             	mov    0x8(%ebp),%eax
c0103cc0:	89 04 24             	mov    %eax,(%esp)
c0103cc3:	e8 a6 fb ff ff       	call   c010386e <print_trapframe>
            if (current == NULL) {
c0103cc8:	a1 88 0f 1a c0       	mov    0xc01a0f88,%eax
c0103ccd:	85 c0                	test   %eax,%eax
c0103ccf:	75 23                	jne    c0103cf4 <trap_dispatch+0xc1>
                panic("handle pgfault failed. ret=%d\n", ret);
c0103cd1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103cd4:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0103cd8:	c7 44 24 08 ec dd 10 	movl   $0xc010ddec,0x8(%esp)
c0103cdf:	c0 
c0103ce0:	c7 44 24 04 cb 00 00 	movl   $0xcb,0x4(%esp)
c0103ce7:	00 
c0103ce8:	c7 04 24 ae db 10 c0 	movl   $0xc010dbae,(%esp)
c0103cef:	e8 64 e5 ff ff       	call   c0102258 <__panic>
            }
            else {
                if (trap_in_kernel(tf)) {
c0103cf4:	8b 45 08             	mov    0x8(%ebp),%eax
c0103cf7:	89 04 24             	mov    %eax,(%esp)
c0103cfa:	e8 59 fb ff ff       	call   c0103858 <trap_in_kernel>
c0103cff:	85 c0                	test   %eax,%eax
c0103d01:	74 23                	je     c0103d26 <trap_dispatch+0xf3>
                    panic("handle pgfault failed in kernel mode. ret=%d\n", ret);
c0103d03:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103d06:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0103d0a:	c7 44 24 08 0c de 10 	movl   $0xc010de0c,0x8(%esp)
c0103d11:	c0 
c0103d12:	c7 44 24 04 cf 00 00 	movl   $0xcf,0x4(%esp)
c0103d19:	00 
c0103d1a:	c7 04 24 ae db 10 c0 	movl   $0xc010dbae,(%esp)
c0103d21:	e8 32 e5 ff ff       	call   c0102258 <__panic>
                }
                cprintf("killed by kernel.\n");
c0103d26:	c7 04 24 3a de 10 c0 	movl   $0xc010de3a,(%esp)
c0103d2d:	e8 a4 da ff ff       	call   c01017d6 <cprintf>
                panic("handle user mode pgfault failed. ret=%d\n", ret); 
c0103d32:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103d35:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0103d39:	c7 44 24 08 50 de 10 	movl   $0xc010de50,0x8(%esp)
c0103d40:	c0 
c0103d41:	c7 44 24 04 d2 00 00 	movl   $0xd2,0x4(%esp)
c0103d48:	00 
c0103d49:	c7 04 24 ae db 10 c0 	movl   $0xc010dbae,(%esp)
c0103d50:	e8 03 e5 ff ff       	call   c0102258 <__panic>
                do_exit(-E_KILLED);
            }
        }
        break;
c0103d55:	e9 2d 01 00 00       	jmp    c0103e87 <trap_dispatch+0x254>
    case T_SYSCALL:
        syscall();
c0103d5a:	e8 75 8a 00 00       	call   c010c7d4 <syscall>
        break;
c0103d5f:	e9 23 01 00 00       	jmp    c0103e87 <trap_dispatch+0x254>
         */
        /* LAB5 YOUR CODE */
        /* you should upate you lab1 code (just add ONE or TWO lines of code):
         *    Every TICK_NUM cycle, you should set current process's current->need_resched = 1
         */
        ticks ++;
c0103d64:	a1 b8 2f 1a c0       	mov    0xc01a2fb8,%eax
c0103d69:	83 c0 01             	add    $0x1,%eax
c0103d6c:	a3 b8 2f 1a c0       	mov    %eax,0xc01a2fb8
        if (ticks % TICK_NUM == 0) {
c0103d71:	8b 0d b8 2f 1a c0    	mov    0xc01a2fb8,%ecx
c0103d77:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
c0103d7c:	89 c8                	mov    %ecx,%eax
c0103d7e:	f7 e2                	mul    %edx
c0103d80:	89 d0                	mov    %edx,%eax
c0103d82:	c1 e8 05             	shr    $0x5,%eax
c0103d85:	6b c0 64             	imul   $0x64,%eax,%eax
c0103d88:	29 c1                	sub    %eax,%ecx
c0103d8a:	89 c8                	mov    %ecx,%eax
c0103d8c:	85 c0                	test   %eax,%eax
c0103d8e:	75 3e                	jne    c0103dce <trap_dispatch+0x19b>
            assert(current != NULL);
c0103d90:	a1 88 0f 1a c0       	mov    0xc01a0f88,%eax
c0103d95:	85 c0                	test   %eax,%eax
c0103d97:	75 24                	jne    c0103dbd <trap_dispatch+0x18a>
c0103d99:	c7 44 24 0c 79 de 10 	movl   $0xc010de79,0xc(%esp)
c0103da0:	c0 
c0103da1:	c7 44 24 08 bf dd 10 	movl   $0xc010ddbf,0x8(%esp)
c0103da8:	c0 
c0103da9:	c7 44 24 04 eb 00 00 	movl   $0xeb,0x4(%esp)
c0103db0:	00 
c0103db1:	c7 04 24 ae db 10 c0 	movl   $0xc010dbae,(%esp)
c0103db8:	e8 9b e4 ff ff       	call   c0102258 <__panic>
            current->need_resched = 1;
c0103dbd:	a1 88 0f 1a c0       	mov    0xc01a0f88,%eax
c0103dc2:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
        }
        break;
c0103dc9:	e9 b9 00 00 00       	jmp    c0103e87 <trap_dispatch+0x254>
c0103dce:	e9 b4 00 00 00       	jmp    c0103e87 <trap_dispatch+0x254>
    case IRQ_OFFSET + IRQ_COM1:
        c = cons_getc();
c0103dd3:	e8 ee ed ff ff       	call   c0102bc6 <cons_getc>
c0103dd8:	88 45 f3             	mov    %al,-0xd(%ebp)
        cprintf("serial [%03d] %c\n", c, c);
c0103ddb:	0f be 55 f3          	movsbl -0xd(%ebp),%edx
c0103ddf:	0f be 45 f3          	movsbl -0xd(%ebp),%eax
c0103de3:	89 54 24 08          	mov    %edx,0x8(%esp)
c0103de7:	89 44 24 04          	mov    %eax,0x4(%esp)
c0103deb:	c7 04 24 89 de 10 c0 	movl   $0xc010de89,(%esp)
c0103df2:	e8 df d9 ff ff       	call   c01017d6 <cprintf>
        break;
c0103df7:	e9 8b 00 00 00       	jmp    c0103e87 <trap_dispatch+0x254>
    case IRQ_OFFSET + IRQ_KBD:
        c = cons_getc();
c0103dfc:	e8 c5 ed ff ff       	call   c0102bc6 <cons_getc>
c0103e01:	88 45 f3             	mov    %al,-0xd(%ebp)
        cprintf("kbd [%03d] %c\n", c, c);
c0103e04:	0f be 55 f3          	movsbl -0xd(%ebp),%edx
c0103e08:	0f be 45 f3          	movsbl -0xd(%ebp),%eax
c0103e0c:	89 54 24 08          	mov    %edx,0x8(%esp)
c0103e10:	89 44 24 04          	mov    %eax,0x4(%esp)
c0103e14:	c7 04 24 9b de 10 c0 	movl   $0xc010de9b,(%esp)
c0103e1b:	e8 b6 d9 ff ff       	call   c01017d6 <cprintf>
        break;
c0103e20:	eb 65                	jmp    c0103e87 <trap_dispatch+0x254>
    //LAB1 CHALLENGE 1 : YOUR CODE you should modify below codes.
    case T_SWITCH_TOU:
    case T_SWITCH_TOK:
        panic("T_SWITCH_** ??\n");
c0103e22:	c7 44 24 08 aa de 10 	movl   $0xc010deaa,0x8(%esp)
c0103e29:	c0 
c0103e2a:	c7 44 24 04 fa 00 00 	movl   $0xfa,0x4(%esp)
c0103e31:	00 
c0103e32:	c7 04 24 ae db 10 c0 	movl   $0xc010dbae,(%esp)
c0103e39:	e8 1a e4 ff ff       	call   c0102258 <__panic>
    case IRQ_OFFSET + IRQ_IDE1:
    case IRQ_OFFSET + IRQ_IDE2:
        /* do nothing */
        break;
    default:
        print_trapframe(tf);
c0103e3e:	8b 45 08             	mov    0x8(%ebp),%eax
c0103e41:	89 04 24             	mov    %eax,(%esp)
c0103e44:	e8 25 fa ff ff       	call   c010386e <print_trapframe>
        if (current != NULL) {
c0103e49:	a1 88 0f 1a c0       	mov    0xc01a0f88,%eax
c0103e4e:	85 c0                	test   %eax,%eax
c0103e50:	74 18                	je     c0103e6a <trap_dispatch+0x237>
            cprintf("unhandled trap.\n");
c0103e52:	c7 04 24 ba de 10 c0 	movl   $0xc010deba,(%esp)
c0103e59:	e8 78 d9 ff ff       	call   c01017d6 <cprintf>
            do_exit(-E_KILLED);
c0103e5e:	c7 04 24 f7 ff ff ff 	movl   $0xfffffff7,(%esp)
c0103e65:	e8 77 75 00 00       	call   c010b3e1 <do_exit>
        }
        // in kernel, it must be a mistake
        panic("unexpected trap in kernel.\n");
c0103e6a:	c7 44 24 08 cb de 10 	movl   $0xc010decb,0x8(%esp)
c0103e71:	c0 
c0103e72:	c7 44 24 04 07 01 00 	movl   $0x107,0x4(%esp)
c0103e79:	00 
c0103e7a:	c7 04 24 ae db 10 c0 	movl   $0xc010dbae,(%esp)
c0103e81:	e8 d2 e3 ff ff       	call   c0102258 <__panic>
        panic("T_SWITCH_** ??\n");
        break;
    case IRQ_OFFSET + IRQ_IDE1:
    case IRQ_OFFSET + IRQ_IDE2:
        /* do nothing */
        break;
c0103e86:	90                   	nop
        }
        // in kernel, it must be a mistake
        panic("unexpected trap in kernel.\n");

    }
}
c0103e87:	c9                   	leave  
c0103e88:	c3                   	ret    

c0103e89 <trap>:
 * trap - handles or dispatches an exception/interrupt. if and when trap() returns,
 * the code in kern/trap/trapentry.S restores the old CPU state saved in the
 * trapframe and then uses the iret instruction to return from the exception.
 * */
void
trap(struct trapframe *tf) {
c0103e89:	55                   	push   %ebp
c0103e8a:	89 e5                	mov    %esp,%ebp
c0103e8c:	83 ec 28             	sub    $0x28,%esp
    // dispatch based on what type of trap occurred
    // used for previous projects
    if (current == NULL) {
c0103e8f:	a1 88 0f 1a c0       	mov    0xc01a0f88,%eax
c0103e94:	85 c0                	test   %eax,%eax
c0103e96:	75 0d                	jne    c0103ea5 <trap+0x1c>
        trap_dispatch(tf);
c0103e98:	8b 45 08             	mov    0x8(%ebp),%eax
c0103e9b:	89 04 24             	mov    %eax,(%esp)
c0103e9e:	e8 90 fd ff ff       	call   c0103c33 <trap_dispatch>
c0103ea3:	eb 6c                	jmp    c0103f11 <trap+0x88>
    }
    else {
        // keep a trapframe chain in stack
        struct trapframe *otf = current->tf;
c0103ea5:	a1 88 0f 1a c0       	mov    0xc01a0f88,%eax
c0103eaa:	8b 40 3c             	mov    0x3c(%eax),%eax
c0103ead:	89 45 f4             	mov    %eax,-0xc(%ebp)
        current->tf = tf;
c0103eb0:	a1 88 0f 1a c0       	mov    0xc01a0f88,%eax
c0103eb5:	8b 55 08             	mov    0x8(%ebp),%edx
c0103eb8:	89 50 3c             	mov    %edx,0x3c(%eax)
    
        bool in_kernel = trap_in_kernel(tf);
c0103ebb:	8b 45 08             	mov    0x8(%ebp),%eax
c0103ebe:	89 04 24             	mov    %eax,(%esp)
c0103ec1:	e8 92 f9 ff ff       	call   c0103858 <trap_in_kernel>
c0103ec6:	89 45 f0             	mov    %eax,-0x10(%ebp)
    
        trap_dispatch(tf);
c0103ec9:	8b 45 08             	mov    0x8(%ebp),%eax
c0103ecc:	89 04 24             	mov    %eax,(%esp)
c0103ecf:	e8 5f fd ff ff       	call   c0103c33 <trap_dispatch>
    
        current->tf = otf;
c0103ed4:	a1 88 0f 1a c0       	mov    0xc01a0f88,%eax
c0103ed9:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0103edc:	89 50 3c             	mov    %edx,0x3c(%eax)
        if (!in_kernel) {
c0103edf:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0103ee3:	75 2c                	jne    c0103f11 <trap+0x88>
            if (current->flags & PF_EXITING) {
c0103ee5:	a1 88 0f 1a c0       	mov    0xc01a0f88,%eax
c0103eea:	8b 40 44             	mov    0x44(%eax),%eax
c0103eed:	83 e0 01             	and    $0x1,%eax
c0103ef0:	85 c0                	test   %eax,%eax
c0103ef2:	74 0c                	je     c0103f00 <trap+0x77>
                do_exit(-E_KILLED);
c0103ef4:	c7 04 24 f7 ff ff ff 	movl   $0xfffffff7,(%esp)
c0103efb:	e8 e1 74 00 00       	call   c010b3e1 <do_exit>
            }
            if (current->need_resched) {
c0103f00:	a1 88 0f 1a c0       	mov    0xc01a0f88,%eax
c0103f05:	8b 40 10             	mov    0x10(%eax),%eax
c0103f08:	85 c0                	test   %eax,%eax
c0103f0a:	74 05                	je     c0103f11 <trap+0x88>
                schedule();
c0103f0c:	e8 cb 86 00 00       	call   c010c5dc <schedule>
            }
        }
    }
}
c0103f11:	c9                   	leave  
c0103f12:	c3                   	ret    

c0103f13 <__alltraps>:
.text
.globl __alltraps
__alltraps:
    # push registers to build a trap frame
    # therefore make the stack look like a struct trapframe
    pushl %ds
c0103f13:	1e                   	push   %ds
    pushl %es
c0103f14:	06                   	push   %es
    pushl %fs
c0103f15:	0f a0                	push   %fs
    pushl %gs
c0103f17:	0f a8                	push   %gs
    pushal
c0103f19:	60                   	pusha  

    # load GD_KDATA into %ds and %es to set up data segments for kernel
    movl $GD_KDATA, %eax
c0103f1a:	b8 10 00 00 00       	mov    $0x10,%eax
    movw %ax, %ds
c0103f1f:	8e d8                	mov    %eax,%ds
    movw %ax, %es
c0103f21:	8e c0                	mov    %eax,%es

    # push %esp to pass a pointer to the trapframe as an argument to trap()
    pushl %esp
c0103f23:	54                   	push   %esp

    # call trap(tf), where tf=%esp
    call trap
c0103f24:	e8 60 ff ff ff       	call   c0103e89 <trap>

    # pop the pushed stack pointer
    popl %esp
c0103f29:	5c                   	pop    %esp

c0103f2a <__trapret>:

    # return falls through to trapret...
.globl __trapret
__trapret:
    # restore registers from stack
    popal
c0103f2a:	61                   	popa   

    # restore %ds, %es, %fs and %gs
    popl %gs
c0103f2b:	0f a9                	pop    %gs
    popl %fs
c0103f2d:	0f a1                	pop    %fs
    popl %es
c0103f2f:	07                   	pop    %es
    popl %ds
c0103f30:	1f                   	pop    %ds

    # get rid of the trap number and error code
    addl $0x8, %esp
c0103f31:	83 c4 08             	add    $0x8,%esp
    iret
c0103f34:	cf                   	iret   

c0103f35 <forkrets>:

.globl forkrets
forkrets:
    # set stack to this new process's trapframe
    movl 4(%esp), %esp
c0103f35:	8b 64 24 04          	mov    0x4(%esp),%esp
    jmp __trapret
c0103f39:	e9 ec ff ff ff       	jmp    c0103f2a <__trapret>

c0103f3e <vector0>:
# handler
.text
.globl __alltraps
.globl vector0
vector0:
  pushl $0
c0103f3e:	6a 00                	push   $0x0
  pushl $0
c0103f40:	6a 00                	push   $0x0
  jmp __alltraps
c0103f42:	e9 cc ff ff ff       	jmp    c0103f13 <__alltraps>

c0103f47 <vector1>:
.globl vector1
vector1:
  pushl $0
c0103f47:	6a 00                	push   $0x0
  pushl $1
c0103f49:	6a 01                	push   $0x1
  jmp __alltraps
c0103f4b:	e9 c3 ff ff ff       	jmp    c0103f13 <__alltraps>

c0103f50 <vector2>:
.globl vector2
vector2:
  pushl $0
c0103f50:	6a 00                	push   $0x0
  pushl $2
c0103f52:	6a 02                	push   $0x2
  jmp __alltraps
c0103f54:	e9 ba ff ff ff       	jmp    c0103f13 <__alltraps>

c0103f59 <vector3>:
.globl vector3
vector3:
  pushl $0
c0103f59:	6a 00                	push   $0x0
  pushl $3
c0103f5b:	6a 03                	push   $0x3
  jmp __alltraps
c0103f5d:	e9 b1 ff ff ff       	jmp    c0103f13 <__alltraps>

c0103f62 <vector4>:
.globl vector4
vector4:
  pushl $0
c0103f62:	6a 00                	push   $0x0
  pushl $4
c0103f64:	6a 04                	push   $0x4
  jmp __alltraps
c0103f66:	e9 a8 ff ff ff       	jmp    c0103f13 <__alltraps>

c0103f6b <vector5>:
.globl vector5
vector5:
  pushl $0
c0103f6b:	6a 00                	push   $0x0
  pushl $5
c0103f6d:	6a 05                	push   $0x5
  jmp __alltraps
c0103f6f:	e9 9f ff ff ff       	jmp    c0103f13 <__alltraps>

c0103f74 <vector6>:
.globl vector6
vector6:
  pushl $0
c0103f74:	6a 00                	push   $0x0
  pushl $6
c0103f76:	6a 06                	push   $0x6
  jmp __alltraps
c0103f78:	e9 96 ff ff ff       	jmp    c0103f13 <__alltraps>

c0103f7d <vector7>:
.globl vector7
vector7:
  pushl $0
c0103f7d:	6a 00                	push   $0x0
  pushl $7
c0103f7f:	6a 07                	push   $0x7
  jmp __alltraps
c0103f81:	e9 8d ff ff ff       	jmp    c0103f13 <__alltraps>

c0103f86 <vector8>:
.globl vector8
vector8:
  pushl $8
c0103f86:	6a 08                	push   $0x8
  jmp __alltraps
c0103f88:	e9 86 ff ff ff       	jmp    c0103f13 <__alltraps>

c0103f8d <vector9>:
.globl vector9
vector9:
  pushl $9
c0103f8d:	6a 09                	push   $0x9
  jmp __alltraps
c0103f8f:	e9 7f ff ff ff       	jmp    c0103f13 <__alltraps>

c0103f94 <vector10>:
.globl vector10
vector10:
  pushl $10
c0103f94:	6a 0a                	push   $0xa
  jmp __alltraps
c0103f96:	e9 78 ff ff ff       	jmp    c0103f13 <__alltraps>

c0103f9b <vector11>:
.globl vector11
vector11:
  pushl $11
c0103f9b:	6a 0b                	push   $0xb
  jmp __alltraps
c0103f9d:	e9 71 ff ff ff       	jmp    c0103f13 <__alltraps>

c0103fa2 <vector12>:
.globl vector12
vector12:
  pushl $12
c0103fa2:	6a 0c                	push   $0xc
  jmp __alltraps
c0103fa4:	e9 6a ff ff ff       	jmp    c0103f13 <__alltraps>

c0103fa9 <vector13>:
.globl vector13
vector13:
  pushl $13
c0103fa9:	6a 0d                	push   $0xd
  jmp __alltraps
c0103fab:	e9 63 ff ff ff       	jmp    c0103f13 <__alltraps>

c0103fb0 <vector14>:
.globl vector14
vector14:
  pushl $14
c0103fb0:	6a 0e                	push   $0xe
  jmp __alltraps
c0103fb2:	e9 5c ff ff ff       	jmp    c0103f13 <__alltraps>

c0103fb7 <vector15>:
.globl vector15
vector15:
  pushl $0
c0103fb7:	6a 00                	push   $0x0
  pushl $15
c0103fb9:	6a 0f                	push   $0xf
  jmp __alltraps
c0103fbb:	e9 53 ff ff ff       	jmp    c0103f13 <__alltraps>

c0103fc0 <vector16>:
.globl vector16
vector16:
  pushl $0
c0103fc0:	6a 00                	push   $0x0
  pushl $16
c0103fc2:	6a 10                	push   $0x10
  jmp __alltraps
c0103fc4:	e9 4a ff ff ff       	jmp    c0103f13 <__alltraps>

c0103fc9 <vector17>:
.globl vector17
vector17:
  pushl $17
c0103fc9:	6a 11                	push   $0x11
  jmp __alltraps
c0103fcb:	e9 43 ff ff ff       	jmp    c0103f13 <__alltraps>

c0103fd0 <vector18>:
.globl vector18
vector18:
  pushl $0
c0103fd0:	6a 00                	push   $0x0
  pushl $18
c0103fd2:	6a 12                	push   $0x12
  jmp __alltraps
c0103fd4:	e9 3a ff ff ff       	jmp    c0103f13 <__alltraps>

c0103fd9 <vector19>:
.globl vector19
vector19:
  pushl $0
c0103fd9:	6a 00                	push   $0x0
  pushl $19
c0103fdb:	6a 13                	push   $0x13
  jmp __alltraps
c0103fdd:	e9 31 ff ff ff       	jmp    c0103f13 <__alltraps>

c0103fe2 <vector20>:
.globl vector20
vector20:
  pushl $0
c0103fe2:	6a 00                	push   $0x0
  pushl $20
c0103fe4:	6a 14                	push   $0x14
  jmp __alltraps
c0103fe6:	e9 28 ff ff ff       	jmp    c0103f13 <__alltraps>

c0103feb <vector21>:
.globl vector21
vector21:
  pushl $0
c0103feb:	6a 00                	push   $0x0
  pushl $21
c0103fed:	6a 15                	push   $0x15
  jmp __alltraps
c0103fef:	e9 1f ff ff ff       	jmp    c0103f13 <__alltraps>

c0103ff4 <vector22>:
.globl vector22
vector22:
  pushl $0
c0103ff4:	6a 00                	push   $0x0
  pushl $22
c0103ff6:	6a 16                	push   $0x16
  jmp __alltraps
c0103ff8:	e9 16 ff ff ff       	jmp    c0103f13 <__alltraps>

c0103ffd <vector23>:
.globl vector23
vector23:
  pushl $0
c0103ffd:	6a 00                	push   $0x0
  pushl $23
c0103fff:	6a 17                	push   $0x17
  jmp __alltraps
c0104001:	e9 0d ff ff ff       	jmp    c0103f13 <__alltraps>

c0104006 <vector24>:
.globl vector24
vector24:
  pushl $0
c0104006:	6a 00                	push   $0x0
  pushl $24
c0104008:	6a 18                	push   $0x18
  jmp __alltraps
c010400a:	e9 04 ff ff ff       	jmp    c0103f13 <__alltraps>

c010400f <vector25>:
.globl vector25
vector25:
  pushl $0
c010400f:	6a 00                	push   $0x0
  pushl $25
c0104011:	6a 19                	push   $0x19
  jmp __alltraps
c0104013:	e9 fb fe ff ff       	jmp    c0103f13 <__alltraps>

c0104018 <vector26>:
.globl vector26
vector26:
  pushl $0
c0104018:	6a 00                	push   $0x0
  pushl $26
c010401a:	6a 1a                	push   $0x1a
  jmp __alltraps
c010401c:	e9 f2 fe ff ff       	jmp    c0103f13 <__alltraps>

c0104021 <vector27>:
.globl vector27
vector27:
  pushl $0
c0104021:	6a 00                	push   $0x0
  pushl $27
c0104023:	6a 1b                	push   $0x1b
  jmp __alltraps
c0104025:	e9 e9 fe ff ff       	jmp    c0103f13 <__alltraps>

c010402a <vector28>:
.globl vector28
vector28:
  pushl $0
c010402a:	6a 00                	push   $0x0
  pushl $28
c010402c:	6a 1c                	push   $0x1c
  jmp __alltraps
c010402e:	e9 e0 fe ff ff       	jmp    c0103f13 <__alltraps>

c0104033 <vector29>:
.globl vector29
vector29:
  pushl $0
c0104033:	6a 00                	push   $0x0
  pushl $29
c0104035:	6a 1d                	push   $0x1d
  jmp __alltraps
c0104037:	e9 d7 fe ff ff       	jmp    c0103f13 <__alltraps>

c010403c <vector30>:
.globl vector30
vector30:
  pushl $0
c010403c:	6a 00                	push   $0x0
  pushl $30
c010403e:	6a 1e                	push   $0x1e
  jmp __alltraps
c0104040:	e9 ce fe ff ff       	jmp    c0103f13 <__alltraps>

c0104045 <vector31>:
.globl vector31
vector31:
  pushl $0
c0104045:	6a 00                	push   $0x0
  pushl $31
c0104047:	6a 1f                	push   $0x1f
  jmp __alltraps
c0104049:	e9 c5 fe ff ff       	jmp    c0103f13 <__alltraps>

c010404e <vector32>:
.globl vector32
vector32:
  pushl $0
c010404e:	6a 00                	push   $0x0
  pushl $32
c0104050:	6a 20                	push   $0x20
  jmp __alltraps
c0104052:	e9 bc fe ff ff       	jmp    c0103f13 <__alltraps>

c0104057 <vector33>:
.globl vector33
vector33:
  pushl $0
c0104057:	6a 00                	push   $0x0
  pushl $33
c0104059:	6a 21                	push   $0x21
  jmp __alltraps
c010405b:	e9 b3 fe ff ff       	jmp    c0103f13 <__alltraps>

c0104060 <vector34>:
.globl vector34
vector34:
  pushl $0
c0104060:	6a 00                	push   $0x0
  pushl $34
c0104062:	6a 22                	push   $0x22
  jmp __alltraps
c0104064:	e9 aa fe ff ff       	jmp    c0103f13 <__alltraps>

c0104069 <vector35>:
.globl vector35
vector35:
  pushl $0
c0104069:	6a 00                	push   $0x0
  pushl $35
c010406b:	6a 23                	push   $0x23
  jmp __alltraps
c010406d:	e9 a1 fe ff ff       	jmp    c0103f13 <__alltraps>

c0104072 <vector36>:
.globl vector36
vector36:
  pushl $0
c0104072:	6a 00                	push   $0x0
  pushl $36
c0104074:	6a 24                	push   $0x24
  jmp __alltraps
c0104076:	e9 98 fe ff ff       	jmp    c0103f13 <__alltraps>

c010407b <vector37>:
.globl vector37
vector37:
  pushl $0
c010407b:	6a 00                	push   $0x0
  pushl $37
c010407d:	6a 25                	push   $0x25
  jmp __alltraps
c010407f:	e9 8f fe ff ff       	jmp    c0103f13 <__alltraps>

c0104084 <vector38>:
.globl vector38
vector38:
  pushl $0
c0104084:	6a 00                	push   $0x0
  pushl $38
c0104086:	6a 26                	push   $0x26
  jmp __alltraps
c0104088:	e9 86 fe ff ff       	jmp    c0103f13 <__alltraps>

c010408d <vector39>:
.globl vector39
vector39:
  pushl $0
c010408d:	6a 00                	push   $0x0
  pushl $39
c010408f:	6a 27                	push   $0x27
  jmp __alltraps
c0104091:	e9 7d fe ff ff       	jmp    c0103f13 <__alltraps>

c0104096 <vector40>:
.globl vector40
vector40:
  pushl $0
c0104096:	6a 00                	push   $0x0
  pushl $40
c0104098:	6a 28                	push   $0x28
  jmp __alltraps
c010409a:	e9 74 fe ff ff       	jmp    c0103f13 <__alltraps>

c010409f <vector41>:
.globl vector41
vector41:
  pushl $0
c010409f:	6a 00                	push   $0x0
  pushl $41
c01040a1:	6a 29                	push   $0x29
  jmp __alltraps
c01040a3:	e9 6b fe ff ff       	jmp    c0103f13 <__alltraps>

c01040a8 <vector42>:
.globl vector42
vector42:
  pushl $0
c01040a8:	6a 00                	push   $0x0
  pushl $42
c01040aa:	6a 2a                	push   $0x2a
  jmp __alltraps
c01040ac:	e9 62 fe ff ff       	jmp    c0103f13 <__alltraps>

c01040b1 <vector43>:
.globl vector43
vector43:
  pushl $0
c01040b1:	6a 00                	push   $0x0
  pushl $43
c01040b3:	6a 2b                	push   $0x2b
  jmp __alltraps
c01040b5:	e9 59 fe ff ff       	jmp    c0103f13 <__alltraps>

c01040ba <vector44>:
.globl vector44
vector44:
  pushl $0
c01040ba:	6a 00                	push   $0x0
  pushl $44
c01040bc:	6a 2c                	push   $0x2c
  jmp __alltraps
c01040be:	e9 50 fe ff ff       	jmp    c0103f13 <__alltraps>

c01040c3 <vector45>:
.globl vector45
vector45:
  pushl $0
c01040c3:	6a 00                	push   $0x0
  pushl $45
c01040c5:	6a 2d                	push   $0x2d
  jmp __alltraps
c01040c7:	e9 47 fe ff ff       	jmp    c0103f13 <__alltraps>

c01040cc <vector46>:
.globl vector46
vector46:
  pushl $0
c01040cc:	6a 00                	push   $0x0
  pushl $46
c01040ce:	6a 2e                	push   $0x2e
  jmp __alltraps
c01040d0:	e9 3e fe ff ff       	jmp    c0103f13 <__alltraps>

c01040d5 <vector47>:
.globl vector47
vector47:
  pushl $0
c01040d5:	6a 00                	push   $0x0
  pushl $47
c01040d7:	6a 2f                	push   $0x2f
  jmp __alltraps
c01040d9:	e9 35 fe ff ff       	jmp    c0103f13 <__alltraps>

c01040de <vector48>:
.globl vector48
vector48:
  pushl $0
c01040de:	6a 00                	push   $0x0
  pushl $48
c01040e0:	6a 30                	push   $0x30
  jmp __alltraps
c01040e2:	e9 2c fe ff ff       	jmp    c0103f13 <__alltraps>

c01040e7 <vector49>:
.globl vector49
vector49:
  pushl $0
c01040e7:	6a 00                	push   $0x0
  pushl $49
c01040e9:	6a 31                	push   $0x31
  jmp __alltraps
c01040eb:	e9 23 fe ff ff       	jmp    c0103f13 <__alltraps>

c01040f0 <vector50>:
.globl vector50
vector50:
  pushl $0
c01040f0:	6a 00                	push   $0x0
  pushl $50
c01040f2:	6a 32                	push   $0x32
  jmp __alltraps
c01040f4:	e9 1a fe ff ff       	jmp    c0103f13 <__alltraps>

c01040f9 <vector51>:
.globl vector51
vector51:
  pushl $0
c01040f9:	6a 00                	push   $0x0
  pushl $51
c01040fb:	6a 33                	push   $0x33
  jmp __alltraps
c01040fd:	e9 11 fe ff ff       	jmp    c0103f13 <__alltraps>

c0104102 <vector52>:
.globl vector52
vector52:
  pushl $0
c0104102:	6a 00                	push   $0x0
  pushl $52
c0104104:	6a 34                	push   $0x34
  jmp __alltraps
c0104106:	e9 08 fe ff ff       	jmp    c0103f13 <__alltraps>

c010410b <vector53>:
.globl vector53
vector53:
  pushl $0
c010410b:	6a 00                	push   $0x0
  pushl $53
c010410d:	6a 35                	push   $0x35
  jmp __alltraps
c010410f:	e9 ff fd ff ff       	jmp    c0103f13 <__alltraps>

c0104114 <vector54>:
.globl vector54
vector54:
  pushl $0
c0104114:	6a 00                	push   $0x0
  pushl $54
c0104116:	6a 36                	push   $0x36
  jmp __alltraps
c0104118:	e9 f6 fd ff ff       	jmp    c0103f13 <__alltraps>

c010411d <vector55>:
.globl vector55
vector55:
  pushl $0
c010411d:	6a 00                	push   $0x0
  pushl $55
c010411f:	6a 37                	push   $0x37
  jmp __alltraps
c0104121:	e9 ed fd ff ff       	jmp    c0103f13 <__alltraps>

c0104126 <vector56>:
.globl vector56
vector56:
  pushl $0
c0104126:	6a 00                	push   $0x0
  pushl $56
c0104128:	6a 38                	push   $0x38
  jmp __alltraps
c010412a:	e9 e4 fd ff ff       	jmp    c0103f13 <__alltraps>

c010412f <vector57>:
.globl vector57
vector57:
  pushl $0
c010412f:	6a 00                	push   $0x0
  pushl $57
c0104131:	6a 39                	push   $0x39
  jmp __alltraps
c0104133:	e9 db fd ff ff       	jmp    c0103f13 <__alltraps>

c0104138 <vector58>:
.globl vector58
vector58:
  pushl $0
c0104138:	6a 00                	push   $0x0
  pushl $58
c010413a:	6a 3a                	push   $0x3a
  jmp __alltraps
c010413c:	e9 d2 fd ff ff       	jmp    c0103f13 <__alltraps>

c0104141 <vector59>:
.globl vector59
vector59:
  pushl $0
c0104141:	6a 00                	push   $0x0
  pushl $59
c0104143:	6a 3b                	push   $0x3b
  jmp __alltraps
c0104145:	e9 c9 fd ff ff       	jmp    c0103f13 <__alltraps>

c010414a <vector60>:
.globl vector60
vector60:
  pushl $0
c010414a:	6a 00                	push   $0x0
  pushl $60
c010414c:	6a 3c                	push   $0x3c
  jmp __alltraps
c010414e:	e9 c0 fd ff ff       	jmp    c0103f13 <__alltraps>

c0104153 <vector61>:
.globl vector61
vector61:
  pushl $0
c0104153:	6a 00                	push   $0x0
  pushl $61
c0104155:	6a 3d                	push   $0x3d
  jmp __alltraps
c0104157:	e9 b7 fd ff ff       	jmp    c0103f13 <__alltraps>

c010415c <vector62>:
.globl vector62
vector62:
  pushl $0
c010415c:	6a 00                	push   $0x0
  pushl $62
c010415e:	6a 3e                	push   $0x3e
  jmp __alltraps
c0104160:	e9 ae fd ff ff       	jmp    c0103f13 <__alltraps>

c0104165 <vector63>:
.globl vector63
vector63:
  pushl $0
c0104165:	6a 00                	push   $0x0
  pushl $63
c0104167:	6a 3f                	push   $0x3f
  jmp __alltraps
c0104169:	e9 a5 fd ff ff       	jmp    c0103f13 <__alltraps>

c010416e <vector64>:
.globl vector64
vector64:
  pushl $0
c010416e:	6a 00                	push   $0x0
  pushl $64
c0104170:	6a 40                	push   $0x40
  jmp __alltraps
c0104172:	e9 9c fd ff ff       	jmp    c0103f13 <__alltraps>

c0104177 <vector65>:
.globl vector65
vector65:
  pushl $0
c0104177:	6a 00                	push   $0x0
  pushl $65
c0104179:	6a 41                	push   $0x41
  jmp __alltraps
c010417b:	e9 93 fd ff ff       	jmp    c0103f13 <__alltraps>

c0104180 <vector66>:
.globl vector66
vector66:
  pushl $0
c0104180:	6a 00                	push   $0x0
  pushl $66
c0104182:	6a 42                	push   $0x42
  jmp __alltraps
c0104184:	e9 8a fd ff ff       	jmp    c0103f13 <__alltraps>

c0104189 <vector67>:
.globl vector67
vector67:
  pushl $0
c0104189:	6a 00                	push   $0x0
  pushl $67
c010418b:	6a 43                	push   $0x43
  jmp __alltraps
c010418d:	e9 81 fd ff ff       	jmp    c0103f13 <__alltraps>

c0104192 <vector68>:
.globl vector68
vector68:
  pushl $0
c0104192:	6a 00                	push   $0x0
  pushl $68
c0104194:	6a 44                	push   $0x44
  jmp __alltraps
c0104196:	e9 78 fd ff ff       	jmp    c0103f13 <__alltraps>

c010419b <vector69>:
.globl vector69
vector69:
  pushl $0
c010419b:	6a 00                	push   $0x0
  pushl $69
c010419d:	6a 45                	push   $0x45
  jmp __alltraps
c010419f:	e9 6f fd ff ff       	jmp    c0103f13 <__alltraps>

c01041a4 <vector70>:
.globl vector70
vector70:
  pushl $0
c01041a4:	6a 00                	push   $0x0
  pushl $70
c01041a6:	6a 46                	push   $0x46
  jmp __alltraps
c01041a8:	e9 66 fd ff ff       	jmp    c0103f13 <__alltraps>

c01041ad <vector71>:
.globl vector71
vector71:
  pushl $0
c01041ad:	6a 00                	push   $0x0
  pushl $71
c01041af:	6a 47                	push   $0x47
  jmp __alltraps
c01041b1:	e9 5d fd ff ff       	jmp    c0103f13 <__alltraps>

c01041b6 <vector72>:
.globl vector72
vector72:
  pushl $0
c01041b6:	6a 00                	push   $0x0
  pushl $72
c01041b8:	6a 48                	push   $0x48
  jmp __alltraps
c01041ba:	e9 54 fd ff ff       	jmp    c0103f13 <__alltraps>

c01041bf <vector73>:
.globl vector73
vector73:
  pushl $0
c01041bf:	6a 00                	push   $0x0
  pushl $73
c01041c1:	6a 49                	push   $0x49
  jmp __alltraps
c01041c3:	e9 4b fd ff ff       	jmp    c0103f13 <__alltraps>

c01041c8 <vector74>:
.globl vector74
vector74:
  pushl $0
c01041c8:	6a 00                	push   $0x0
  pushl $74
c01041ca:	6a 4a                	push   $0x4a
  jmp __alltraps
c01041cc:	e9 42 fd ff ff       	jmp    c0103f13 <__alltraps>

c01041d1 <vector75>:
.globl vector75
vector75:
  pushl $0
c01041d1:	6a 00                	push   $0x0
  pushl $75
c01041d3:	6a 4b                	push   $0x4b
  jmp __alltraps
c01041d5:	e9 39 fd ff ff       	jmp    c0103f13 <__alltraps>

c01041da <vector76>:
.globl vector76
vector76:
  pushl $0
c01041da:	6a 00                	push   $0x0
  pushl $76
c01041dc:	6a 4c                	push   $0x4c
  jmp __alltraps
c01041de:	e9 30 fd ff ff       	jmp    c0103f13 <__alltraps>

c01041e3 <vector77>:
.globl vector77
vector77:
  pushl $0
c01041e3:	6a 00                	push   $0x0
  pushl $77
c01041e5:	6a 4d                	push   $0x4d
  jmp __alltraps
c01041e7:	e9 27 fd ff ff       	jmp    c0103f13 <__alltraps>

c01041ec <vector78>:
.globl vector78
vector78:
  pushl $0
c01041ec:	6a 00                	push   $0x0
  pushl $78
c01041ee:	6a 4e                	push   $0x4e
  jmp __alltraps
c01041f0:	e9 1e fd ff ff       	jmp    c0103f13 <__alltraps>

c01041f5 <vector79>:
.globl vector79
vector79:
  pushl $0
c01041f5:	6a 00                	push   $0x0
  pushl $79
c01041f7:	6a 4f                	push   $0x4f
  jmp __alltraps
c01041f9:	e9 15 fd ff ff       	jmp    c0103f13 <__alltraps>

c01041fe <vector80>:
.globl vector80
vector80:
  pushl $0
c01041fe:	6a 00                	push   $0x0
  pushl $80
c0104200:	6a 50                	push   $0x50
  jmp __alltraps
c0104202:	e9 0c fd ff ff       	jmp    c0103f13 <__alltraps>

c0104207 <vector81>:
.globl vector81
vector81:
  pushl $0
c0104207:	6a 00                	push   $0x0
  pushl $81
c0104209:	6a 51                	push   $0x51
  jmp __alltraps
c010420b:	e9 03 fd ff ff       	jmp    c0103f13 <__alltraps>

c0104210 <vector82>:
.globl vector82
vector82:
  pushl $0
c0104210:	6a 00                	push   $0x0
  pushl $82
c0104212:	6a 52                	push   $0x52
  jmp __alltraps
c0104214:	e9 fa fc ff ff       	jmp    c0103f13 <__alltraps>

c0104219 <vector83>:
.globl vector83
vector83:
  pushl $0
c0104219:	6a 00                	push   $0x0
  pushl $83
c010421b:	6a 53                	push   $0x53
  jmp __alltraps
c010421d:	e9 f1 fc ff ff       	jmp    c0103f13 <__alltraps>

c0104222 <vector84>:
.globl vector84
vector84:
  pushl $0
c0104222:	6a 00                	push   $0x0
  pushl $84
c0104224:	6a 54                	push   $0x54
  jmp __alltraps
c0104226:	e9 e8 fc ff ff       	jmp    c0103f13 <__alltraps>

c010422b <vector85>:
.globl vector85
vector85:
  pushl $0
c010422b:	6a 00                	push   $0x0
  pushl $85
c010422d:	6a 55                	push   $0x55
  jmp __alltraps
c010422f:	e9 df fc ff ff       	jmp    c0103f13 <__alltraps>

c0104234 <vector86>:
.globl vector86
vector86:
  pushl $0
c0104234:	6a 00                	push   $0x0
  pushl $86
c0104236:	6a 56                	push   $0x56
  jmp __alltraps
c0104238:	e9 d6 fc ff ff       	jmp    c0103f13 <__alltraps>

c010423d <vector87>:
.globl vector87
vector87:
  pushl $0
c010423d:	6a 00                	push   $0x0
  pushl $87
c010423f:	6a 57                	push   $0x57
  jmp __alltraps
c0104241:	e9 cd fc ff ff       	jmp    c0103f13 <__alltraps>

c0104246 <vector88>:
.globl vector88
vector88:
  pushl $0
c0104246:	6a 00                	push   $0x0
  pushl $88
c0104248:	6a 58                	push   $0x58
  jmp __alltraps
c010424a:	e9 c4 fc ff ff       	jmp    c0103f13 <__alltraps>

c010424f <vector89>:
.globl vector89
vector89:
  pushl $0
c010424f:	6a 00                	push   $0x0
  pushl $89
c0104251:	6a 59                	push   $0x59
  jmp __alltraps
c0104253:	e9 bb fc ff ff       	jmp    c0103f13 <__alltraps>

c0104258 <vector90>:
.globl vector90
vector90:
  pushl $0
c0104258:	6a 00                	push   $0x0
  pushl $90
c010425a:	6a 5a                	push   $0x5a
  jmp __alltraps
c010425c:	e9 b2 fc ff ff       	jmp    c0103f13 <__alltraps>

c0104261 <vector91>:
.globl vector91
vector91:
  pushl $0
c0104261:	6a 00                	push   $0x0
  pushl $91
c0104263:	6a 5b                	push   $0x5b
  jmp __alltraps
c0104265:	e9 a9 fc ff ff       	jmp    c0103f13 <__alltraps>

c010426a <vector92>:
.globl vector92
vector92:
  pushl $0
c010426a:	6a 00                	push   $0x0
  pushl $92
c010426c:	6a 5c                	push   $0x5c
  jmp __alltraps
c010426e:	e9 a0 fc ff ff       	jmp    c0103f13 <__alltraps>

c0104273 <vector93>:
.globl vector93
vector93:
  pushl $0
c0104273:	6a 00                	push   $0x0
  pushl $93
c0104275:	6a 5d                	push   $0x5d
  jmp __alltraps
c0104277:	e9 97 fc ff ff       	jmp    c0103f13 <__alltraps>

c010427c <vector94>:
.globl vector94
vector94:
  pushl $0
c010427c:	6a 00                	push   $0x0
  pushl $94
c010427e:	6a 5e                	push   $0x5e
  jmp __alltraps
c0104280:	e9 8e fc ff ff       	jmp    c0103f13 <__alltraps>

c0104285 <vector95>:
.globl vector95
vector95:
  pushl $0
c0104285:	6a 00                	push   $0x0
  pushl $95
c0104287:	6a 5f                	push   $0x5f
  jmp __alltraps
c0104289:	e9 85 fc ff ff       	jmp    c0103f13 <__alltraps>

c010428e <vector96>:
.globl vector96
vector96:
  pushl $0
c010428e:	6a 00                	push   $0x0
  pushl $96
c0104290:	6a 60                	push   $0x60
  jmp __alltraps
c0104292:	e9 7c fc ff ff       	jmp    c0103f13 <__alltraps>

c0104297 <vector97>:
.globl vector97
vector97:
  pushl $0
c0104297:	6a 00                	push   $0x0
  pushl $97
c0104299:	6a 61                	push   $0x61
  jmp __alltraps
c010429b:	e9 73 fc ff ff       	jmp    c0103f13 <__alltraps>

c01042a0 <vector98>:
.globl vector98
vector98:
  pushl $0
c01042a0:	6a 00                	push   $0x0
  pushl $98
c01042a2:	6a 62                	push   $0x62
  jmp __alltraps
c01042a4:	e9 6a fc ff ff       	jmp    c0103f13 <__alltraps>

c01042a9 <vector99>:
.globl vector99
vector99:
  pushl $0
c01042a9:	6a 00                	push   $0x0
  pushl $99
c01042ab:	6a 63                	push   $0x63
  jmp __alltraps
c01042ad:	e9 61 fc ff ff       	jmp    c0103f13 <__alltraps>

c01042b2 <vector100>:
.globl vector100
vector100:
  pushl $0
c01042b2:	6a 00                	push   $0x0
  pushl $100
c01042b4:	6a 64                	push   $0x64
  jmp __alltraps
c01042b6:	e9 58 fc ff ff       	jmp    c0103f13 <__alltraps>

c01042bb <vector101>:
.globl vector101
vector101:
  pushl $0
c01042bb:	6a 00                	push   $0x0
  pushl $101
c01042bd:	6a 65                	push   $0x65
  jmp __alltraps
c01042bf:	e9 4f fc ff ff       	jmp    c0103f13 <__alltraps>

c01042c4 <vector102>:
.globl vector102
vector102:
  pushl $0
c01042c4:	6a 00                	push   $0x0
  pushl $102
c01042c6:	6a 66                	push   $0x66
  jmp __alltraps
c01042c8:	e9 46 fc ff ff       	jmp    c0103f13 <__alltraps>

c01042cd <vector103>:
.globl vector103
vector103:
  pushl $0
c01042cd:	6a 00                	push   $0x0
  pushl $103
c01042cf:	6a 67                	push   $0x67
  jmp __alltraps
c01042d1:	e9 3d fc ff ff       	jmp    c0103f13 <__alltraps>

c01042d6 <vector104>:
.globl vector104
vector104:
  pushl $0
c01042d6:	6a 00                	push   $0x0
  pushl $104
c01042d8:	6a 68                	push   $0x68
  jmp __alltraps
c01042da:	e9 34 fc ff ff       	jmp    c0103f13 <__alltraps>

c01042df <vector105>:
.globl vector105
vector105:
  pushl $0
c01042df:	6a 00                	push   $0x0
  pushl $105
c01042e1:	6a 69                	push   $0x69
  jmp __alltraps
c01042e3:	e9 2b fc ff ff       	jmp    c0103f13 <__alltraps>

c01042e8 <vector106>:
.globl vector106
vector106:
  pushl $0
c01042e8:	6a 00                	push   $0x0
  pushl $106
c01042ea:	6a 6a                	push   $0x6a
  jmp __alltraps
c01042ec:	e9 22 fc ff ff       	jmp    c0103f13 <__alltraps>

c01042f1 <vector107>:
.globl vector107
vector107:
  pushl $0
c01042f1:	6a 00                	push   $0x0
  pushl $107
c01042f3:	6a 6b                	push   $0x6b
  jmp __alltraps
c01042f5:	e9 19 fc ff ff       	jmp    c0103f13 <__alltraps>

c01042fa <vector108>:
.globl vector108
vector108:
  pushl $0
c01042fa:	6a 00                	push   $0x0
  pushl $108
c01042fc:	6a 6c                	push   $0x6c
  jmp __alltraps
c01042fe:	e9 10 fc ff ff       	jmp    c0103f13 <__alltraps>

c0104303 <vector109>:
.globl vector109
vector109:
  pushl $0
c0104303:	6a 00                	push   $0x0
  pushl $109
c0104305:	6a 6d                	push   $0x6d
  jmp __alltraps
c0104307:	e9 07 fc ff ff       	jmp    c0103f13 <__alltraps>

c010430c <vector110>:
.globl vector110
vector110:
  pushl $0
c010430c:	6a 00                	push   $0x0
  pushl $110
c010430e:	6a 6e                	push   $0x6e
  jmp __alltraps
c0104310:	e9 fe fb ff ff       	jmp    c0103f13 <__alltraps>

c0104315 <vector111>:
.globl vector111
vector111:
  pushl $0
c0104315:	6a 00                	push   $0x0
  pushl $111
c0104317:	6a 6f                	push   $0x6f
  jmp __alltraps
c0104319:	e9 f5 fb ff ff       	jmp    c0103f13 <__alltraps>

c010431e <vector112>:
.globl vector112
vector112:
  pushl $0
c010431e:	6a 00                	push   $0x0
  pushl $112
c0104320:	6a 70                	push   $0x70
  jmp __alltraps
c0104322:	e9 ec fb ff ff       	jmp    c0103f13 <__alltraps>

c0104327 <vector113>:
.globl vector113
vector113:
  pushl $0
c0104327:	6a 00                	push   $0x0
  pushl $113
c0104329:	6a 71                	push   $0x71
  jmp __alltraps
c010432b:	e9 e3 fb ff ff       	jmp    c0103f13 <__alltraps>

c0104330 <vector114>:
.globl vector114
vector114:
  pushl $0
c0104330:	6a 00                	push   $0x0
  pushl $114
c0104332:	6a 72                	push   $0x72
  jmp __alltraps
c0104334:	e9 da fb ff ff       	jmp    c0103f13 <__alltraps>

c0104339 <vector115>:
.globl vector115
vector115:
  pushl $0
c0104339:	6a 00                	push   $0x0
  pushl $115
c010433b:	6a 73                	push   $0x73
  jmp __alltraps
c010433d:	e9 d1 fb ff ff       	jmp    c0103f13 <__alltraps>

c0104342 <vector116>:
.globl vector116
vector116:
  pushl $0
c0104342:	6a 00                	push   $0x0
  pushl $116
c0104344:	6a 74                	push   $0x74
  jmp __alltraps
c0104346:	e9 c8 fb ff ff       	jmp    c0103f13 <__alltraps>

c010434b <vector117>:
.globl vector117
vector117:
  pushl $0
c010434b:	6a 00                	push   $0x0
  pushl $117
c010434d:	6a 75                	push   $0x75
  jmp __alltraps
c010434f:	e9 bf fb ff ff       	jmp    c0103f13 <__alltraps>

c0104354 <vector118>:
.globl vector118
vector118:
  pushl $0
c0104354:	6a 00                	push   $0x0
  pushl $118
c0104356:	6a 76                	push   $0x76
  jmp __alltraps
c0104358:	e9 b6 fb ff ff       	jmp    c0103f13 <__alltraps>

c010435d <vector119>:
.globl vector119
vector119:
  pushl $0
c010435d:	6a 00                	push   $0x0
  pushl $119
c010435f:	6a 77                	push   $0x77
  jmp __alltraps
c0104361:	e9 ad fb ff ff       	jmp    c0103f13 <__alltraps>

c0104366 <vector120>:
.globl vector120
vector120:
  pushl $0
c0104366:	6a 00                	push   $0x0
  pushl $120
c0104368:	6a 78                	push   $0x78
  jmp __alltraps
c010436a:	e9 a4 fb ff ff       	jmp    c0103f13 <__alltraps>

c010436f <vector121>:
.globl vector121
vector121:
  pushl $0
c010436f:	6a 00                	push   $0x0
  pushl $121
c0104371:	6a 79                	push   $0x79
  jmp __alltraps
c0104373:	e9 9b fb ff ff       	jmp    c0103f13 <__alltraps>

c0104378 <vector122>:
.globl vector122
vector122:
  pushl $0
c0104378:	6a 00                	push   $0x0
  pushl $122
c010437a:	6a 7a                	push   $0x7a
  jmp __alltraps
c010437c:	e9 92 fb ff ff       	jmp    c0103f13 <__alltraps>

c0104381 <vector123>:
.globl vector123
vector123:
  pushl $0
c0104381:	6a 00                	push   $0x0
  pushl $123
c0104383:	6a 7b                	push   $0x7b
  jmp __alltraps
c0104385:	e9 89 fb ff ff       	jmp    c0103f13 <__alltraps>

c010438a <vector124>:
.globl vector124
vector124:
  pushl $0
c010438a:	6a 00                	push   $0x0
  pushl $124
c010438c:	6a 7c                	push   $0x7c
  jmp __alltraps
c010438e:	e9 80 fb ff ff       	jmp    c0103f13 <__alltraps>

c0104393 <vector125>:
.globl vector125
vector125:
  pushl $0
c0104393:	6a 00                	push   $0x0
  pushl $125
c0104395:	6a 7d                	push   $0x7d
  jmp __alltraps
c0104397:	e9 77 fb ff ff       	jmp    c0103f13 <__alltraps>

c010439c <vector126>:
.globl vector126
vector126:
  pushl $0
c010439c:	6a 00                	push   $0x0
  pushl $126
c010439e:	6a 7e                	push   $0x7e
  jmp __alltraps
c01043a0:	e9 6e fb ff ff       	jmp    c0103f13 <__alltraps>

c01043a5 <vector127>:
.globl vector127
vector127:
  pushl $0
c01043a5:	6a 00                	push   $0x0
  pushl $127
c01043a7:	6a 7f                	push   $0x7f
  jmp __alltraps
c01043a9:	e9 65 fb ff ff       	jmp    c0103f13 <__alltraps>

c01043ae <vector128>:
.globl vector128
vector128:
  pushl $0
c01043ae:	6a 00                	push   $0x0
  pushl $128
c01043b0:	68 80 00 00 00       	push   $0x80
  jmp __alltraps
c01043b5:	e9 59 fb ff ff       	jmp    c0103f13 <__alltraps>

c01043ba <vector129>:
.globl vector129
vector129:
  pushl $0
c01043ba:	6a 00                	push   $0x0
  pushl $129
c01043bc:	68 81 00 00 00       	push   $0x81
  jmp __alltraps
c01043c1:	e9 4d fb ff ff       	jmp    c0103f13 <__alltraps>

c01043c6 <vector130>:
.globl vector130
vector130:
  pushl $0
c01043c6:	6a 00                	push   $0x0
  pushl $130
c01043c8:	68 82 00 00 00       	push   $0x82
  jmp __alltraps
c01043cd:	e9 41 fb ff ff       	jmp    c0103f13 <__alltraps>

c01043d2 <vector131>:
.globl vector131
vector131:
  pushl $0
c01043d2:	6a 00                	push   $0x0
  pushl $131
c01043d4:	68 83 00 00 00       	push   $0x83
  jmp __alltraps
c01043d9:	e9 35 fb ff ff       	jmp    c0103f13 <__alltraps>

c01043de <vector132>:
.globl vector132
vector132:
  pushl $0
c01043de:	6a 00                	push   $0x0
  pushl $132
c01043e0:	68 84 00 00 00       	push   $0x84
  jmp __alltraps
c01043e5:	e9 29 fb ff ff       	jmp    c0103f13 <__alltraps>

c01043ea <vector133>:
.globl vector133
vector133:
  pushl $0
c01043ea:	6a 00                	push   $0x0
  pushl $133
c01043ec:	68 85 00 00 00       	push   $0x85
  jmp __alltraps
c01043f1:	e9 1d fb ff ff       	jmp    c0103f13 <__alltraps>

c01043f6 <vector134>:
.globl vector134
vector134:
  pushl $0
c01043f6:	6a 00                	push   $0x0
  pushl $134
c01043f8:	68 86 00 00 00       	push   $0x86
  jmp __alltraps
c01043fd:	e9 11 fb ff ff       	jmp    c0103f13 <__alltraps>

c0104402 <vector135>:
.globl vector135
vector135:
  pushl $0
c0104402:	6a 00                	push   $0x0
  pushl $135
c0104404:	68 87 00 00 00       	push   $0x87
  jmp __alltraps
c0104409:	e9 05 fb ff ff       	jmp    c0103f13 <__alltraps>

c010440e <vector136>:
.globl vector136
vector136:
  pushl $0
c010440e:	6a 00                	push   $0x0
  pushl $136
c0104410:	68 88 00 00 00       	push   $0x88
  jmp __alltraps
c0104415:	e9 f9 fa ff ff       	jmp    c0103f13 <__alltraps>

c010441a <vector137>:
.globl vector137
vector137:
  pushl $0
c010441a:	6a 00                	push   $0x0
  pushl $137
c010441c:	68 89 00 00 00       	push   $0x89
  jmp __alltraps
c0104421:	e9 ed fa ff ff       	jmp    c0103f13 <__alltraps>

c0104426 <vector138>:
.globl vector138
vector138:
  pushl $0
c0104426:	6a 00                	push   $0x0
  pushl $138
c0104428:	68 8a 00 00 00       	push   $0x8a
  jmp __alltraps
c010442d:	e9 e1 fa ff ff       	jmp    c0103f13 <__alltraps>

c0104432 <vector139>:
.globl vector139
vector139:
  pushl $0
c0104432:	6a 00                	push   $0x0
  pushl $139
c0104434:	68 8b 00 00 00       	push   $0x8b
  jmp __alltraps
c0104439:	e9 d5 fa ff ff       	jmp    c0103f13 <__alltraps>

c010443e <vector140>:
.globl vector140
vector140:
  pushl $0
c010443e:	6a 00                	push   $0x0
  pushl $140
c0104440:	68 8c 00 00 00       	push   $0x8c
  jmp __alltraps
c0104445:	e9 c9 fa ff ff       	jmp    c0103f13 <__alltraps>

c010444a <vector141>:
.globl vector141
vector141:
  pushl $0
c010444a:	6a 00                	push   $0x0
  pushl $141
c010444c:	68 8d 00 00 00       	push   $0x8d
  jmp __alltraps
c0104451:	e9 bd fa ff ff       	jmp    c0103f13 <__alltraps>

c0104456 <vector142>:
.globl vector142
vector142:
  pushl $0
c0104456:	6a 00                	push   $0x0
  pushl $142
c0104458:	68 8e 00 00 00       	push   $0x8e
  jmp __alltraps
c010445d:	e9 b1 fa ff ff       	jmp    c0103f13 <__alltraps>

c0104462 <vector143>:
.globl vector143
vector143:
  pushl $0
c0104462:	6a 00                	push   $0x0
  pushl $143
c0104464:	68 8f 00 00 00       	push   $0x8f
  jmp __alltraps
c0104469:	e9 a5 fa ff ff       	jmp    c0103f13 <__alltraps>

c010446e <vector144>:
.globl vector144
vector144:
  pushl $0
c010446e:	6a 00                	push   $0x0
  pushl $144
c0104470:	68 90 00 00 00       	push   $0x90
  jmp __alltraps
c0104475:	e9 99 fa ff ff       	jmp    c0103f13 <__alltraps>

c010447a <vector145>:
.globl vector145
vector145:
  pushl $0
c010447a:	6a 00                	push   $0x0
  pushl $145
c010447c:	68 91 00 00 00       	push   $0x91
  jmp __alltraps
c0104481:	e9 8d fa ff ff       	jmp    c0103f13 <__alltraps>

c0104486 <vector146>:
.globl vector146
vector146:
  pushl $0
c0104486:	6a 00                	push   $0x0
  pushl $146
c0104488:	68 92 00 00 00       	push   $0x92
  jmp __alltraps
c010448d:	e9 81 fa ff ff       	jmp    c0103f13 <__alltraps>

c0104492 <vector147>:
.globl vector147
vector147:
  pushl $0
c0104492:	6a 00                	push   $0x0
  pushl $147
c0104494:	68 93 00 00 00       	push   $0x93
  jmp __alltraps
c0104499:	e9 75 fa ff ff       	jmp    c0103f13 <__alltraps>

c010449e <vector148>:
.globl vector148
vector148:
  pushl $0
c010449e:	6a 00                	push   $0x0
  pushl $148
c01044a0:	68 94 00 00 00       	push   $0x94
  jmp __alltraps
c01044a5:	e9 69 fa ff ff       	jmp    c0103f13 <__alltraps>

c01044aa <vector149>:
.globl vector149
vector149:
  pushl $0
c01044aa:	6a 00                	push   $0x0
  pushl $149
c01044ac:	68 95 00 00 00       	push   $0x95
  jmp __alltraps
c01044b1:	e9 5d fa ff ff       	jmp    c0103f13 <__alltraps>

c01044b6 <vector150>:
.globl vector150
vector150:
  pushl $0
c01044b6:	6a 00                	push   $0x0
  pushl $150
c01044b8:	68 96 00 00 00       	push   $0x96
  jmp __alltraps
c01044bd:	e9 51 fa ff ff       	jmp    c0103f13 <__alltraps>

c01044c2 <vector151>:
.globl vector151
vector151:
  pushl $0
c01044c2:	6a 00                	push   $0x0
  pushl $151
c01044c4:	68 97 00 00 00       	push   $0x97
  jmp __alltraps
c01044c9:	e9 45 fa ff ff       	jmp    c0103f13 <__alltraps>

c01044ce <vector152>:
.globl vector152
vector152:
  pushl $0
c01044ce:	6a 00                	push   $0x0
  pushl $152
c01044d0:	68 98 00 00 00       	push   $0x98
  jmp __alltraps
c01044d5:	e9 39 fa ff ff       	jmp    c0103f13 <__alltraps>

c01044da <vector153>:
.globl vector153
vector153:
  pushl $0
c01044da:	6a 00                	push   $0x0
  pushl $153
c01044dc:	68 99 00 00 00       	push   $0x99
  jmp __alltraps
c01044e1:	e9 2d fa ff ff       	jmp    c0103f13 <__alltraps>

c01044e6 <vector154>:
.globl vector154
vector154:
  pushl $0
c01044e6:	6a 00                	push   $0x0
  pushl $154
c01044e8:	68 9a 00 00 00       	push   $0x9a
  jmp __alltraps
c01044ed:	e9 21 fa ff ff       	jmp    c0103f13 <__alltraps>

c01044f2 <vector155>:
.globl vector155
vector155:
  pushl $0
c01044f2:	6a 00                	push   $0x0
  pushl $155
c01044f4:	68 9b 00 00 00       	push   $0x9b
  jmp __alltraps
c01044f9:	e9 15 fa ff ff       	jmp    c0103f13 <__alltraps>

c01044fe <vector156>:
.globl vector156
vector156:
  pushl $0
c01044fe:	6a 00                	push   $0x0
  pushl $156
c0104500:	68 9c 00 00 00       	push   $0x9c
  jmp __alltraps
c0104505:	e9 09 fa ff ff       	jmp    c0103f13 <__alltraps>

c010450a <vector157>:
.globl vector157
vector157:
  pushl $0
c010450a:	6a 00                	push   $0x0
  pushl $157
c010450c:	68 9d 00 00 00       	push   $0x9d
  jmp __alltraps
c0104511:	e9 fd f9 ff ff       	jmp    c0103f13 <__alltraps>

c0104516 <vector158>:
.globl vector158
vector158:
  pushl $0
c0104516:	6a 00                	push   $0x0
  pushl $158
c0104518:	68 9e 00 00 00       	push   $0x9e
  jmp __alltraps
c010451d:	e9 f1 f9 ff ff       	jmp    c0103f13 <__alltraps>

c0104522 <vector159>:
.globl vector159
vector159:
  pushl $0
c0104522:	6a 00                	push   $0x0
  pushl $159
c0104524:	68 9f 00 00 00       	push   $0x9f
  jmp __alltraps
c0104529:	e9 e5 f9 ff ff       	jmp    c0103f13 <__alltraps>

c010452e <vector160>:
.globl vector160
vector160:
  pushl $0
c010452e:	6a 00                	push   $0x0
  pushl $160
c0104530:	68 a0 00 00 00       	push   $0xa0
  jmp __alltraps
c0104535:	e9 d9 f9 ff ff       	jmp    c0103f13 <__alltraps>

c010453a <vector161>:
.globl vector161
vector161:
  pushl $0
c010453a:	6a 00                	push   $0x0
  pushl $161
c010453c:	68 a1 00 00 00       	push   $0xa1
  jmp __alltraps
c0104541:	e9 cd f9 ff ff       	jmp    c0103f13 <__alltraps>

c0104546 <vector162>:
.globl vector162
vector162:
  pushl $0
c0104546:	6a 00                	push   $0x0
  pushl $162
c0104548:	68 a2 00 00 00       	push   $0xa2
  jmp __alltraps
c010454d:	e9 c1 f9 ff ff       	jmp    c0103f13 <__alltraps>

c0104552 <vector163>:
.globl vector163
vector163:
  pushl $0
c0104552:	6a 00                	push   $0x0
  pushl $163
c0104554:	68 a3 00 00 00       	push   $0xa3
  jmp __alltraps
c0104559:	e9 b5 f9 ff ff       	jmp    c0103f13 <__alltraps>

c010455e <vector164>:
.globl vector164
vector164:
  pushl $0
c010455e:	6a 00                	push   $0x0
  pushl $164
c0104560:	68 a4 00 00 00       	push   $0xa4
  jmp __alltraps
c0104565:	e9 a9 f9 ff ff       	jmp    c0103f13 <__alltraps>

c010456a <vector165>:
.globl vector165
vector165:
  pushl $0
c010456a:	6a 00                	push   $0x0
  pushl $165
c010456c:	68 a5 00 00 00       	push   $0xa5
  jmp __alltraps
c0104571:	e9 9d f9 ff ff       	jmp    c0103f13 <__alltraps>

c0104576 <vector166>:
.globl vector166
vector166:
  pushl $0
c0104576:	6a 00                	push   $0x0
  pushl $166
c0104578:	68 a6 00 00 00       	push   $0xa6
  jmp __alltraps
c010457d:	e9 91 f9 ff ff       	jmp    c0103f13 <__alltraps>

c0104582 <vector167>:
.globl vector167
vector167:
  pushl $0
c0104582:	6a 00                	push   $0x0
  pushl $167
c0104584:	68 a7 00 00 00       	push   $0xa7
  jmp __alltraps
c0104589:	e9 85 f9 ff ff       	jmp    c0103f13 <__alltraps>

c010458e <vector168>:
.globl vector168
vector168:
  pushl $0
c010458e:	6a 00                	push   $0x0
  pushl $168
c0104590:	68 a8 00 00 00       	push   $0xa8
  jmp __alltraps
c0104595:	e9 79 f9 ff ff       	jmp    c0103f13 <__alltraps>

c010459a <vector169>:
.globl vector169
vector169:
  pushl $0
c010459a:	6a 00                	push   $0x0
  pushl $169
c010459c:	68 a9 00 00 00       	push   $0xa9
  jmp __alltraps
c01045a1:	e9 6d f9 ff ff       	jmp    c0103f13 <__alltraps>

c01045a6 <vector170>:
.globl vector170
vector170:
  pushl $0
c01045a6:	6a 00                	push   $0x0
  pushl $170
c01045a8:	68 aa 00 00 00       	push   $0xaa
  jmp __alltraps
c01045ad:	e9 61 f9 ff ff       	jmp    c0103f13 <__alltraps>

c01045b2 <vector171>:
.globl vector171
vector171:
  pushl $0
c01045b2:	6a 00                	push   $0x0
  pushl $171
c01045b4:	68 ab 00 00 00       	push   $0xab
  jmp __alltraps
c01045b9:	e9 55 f9 ff ff       	jmp    c0103f13 <__alltraps>

c01045be <vector172>:
.globl vector172
vector172:
  pushl $0
c01045be:	6a 00                	push   $0x0
  pushl $172
c01045c0:	68 ac 00 00 00       	push   $0xac
  jmp __alltraps
c01045c5:	e9 49 f9 ff ff       	jmp    c0103f13 <__alltraps>

c01045ca <vector173>:
.globl vector173
vector173:
  pushl $0
c01045ca:	6a 00                	push   $0x0
  pushl $173
c01045cc:	68 ad 00 00 00       	push   $0xad
  jmp __alltraps
c01045d1:	e9 3d f9 ff ff       	jmp    c0103f13 <__alltraps>

c01045d6 <vector174>:
.globl vector174
vector174:
  pushl $0
c01045d6:	6a 00                	push   $0x0
  pushl $174
c01045d8:	68 ae 00 00 00       	push   $0xae
  jmp __alltraps
c01045dd:	e9 31 f9 ff ff       	jmp    c0103f13 <__alltraps>

c01045e2 <vector175>:
.globl vector175
vector175:
  pushl $0
c01045e2:	6a 00                	push   $0x0
  pushl $175
c01045e4:	68 af 00 00 00       	push   $0xaf
  jmp __alltraps
c01045e9:	e9 25 f9 ff ff       	jmp    c0103f13 <__alltraps>

c01045ee <vector176>:
.globl vector176
vector176:
  pushl $0
c01045ee:	6a 00                	push   $0x0
  pushl $176
c01045f0:	68 b0 00 00 00       	push   $0xb0
  jmp __alltraps
c01045f5:	e9 19 f9 ff ff       	jmp    c0103f13 <__alltraps>

c01045fa <vector177>:
.globl vector177
vector177:
  pushl $0
c01045fa:	6a 00                	push   $0x0
  pushl $177
c01045fc:	68 b1 00 00 00       	push   $0xb1
  jmp __alltraps
c0104601:	e9 0d f9 ff ff       	jmp    c0103f13 <__alltraps>

c0104606 <vector178>:
.globl vector178
vector178:
  pushl $0
c0104606:	6a 00                	push   $0x0
  pushl $178
c0104608:	68 b2 00 00 00       	push   $0xb2
  jmp __alltraps
c010460d:	e9 01 f9 ff ff       	jmp    c0103f13 <__alltraps>

c0104612 <vector179>:
.globl vector179
vector179:
  pushl $0
c0104612:	6a 00                	push   $0x0
  pushl $179
c0104614:	68 b3 00 00 00       	push   $0xb3
  jmp __alltraps
c0104619:	e9 f5 f8 ff ff       	jmp    c0103f13 <__alltraps>

c010461e <vector180>:
.globl vector180
vector180:
  pushl $0
c010461e:	6a 00                	push   $0x0
  pushl $180
c0104620:	68 b4 00 00 00       	push   $0xb4
  jmp __alltraps
c0104625:	e9 e9 f8 ff ff       	jmp    c0103f13 <__alltraps>

c010462a <vector181>:
.globl vector181
vector181:
  pushl $0
c010462a:	6a 00                	push   $0x0
  pushl $181
c010462c:	68 b5 00 00 00       	push   $0xb5
  jmp __alltraps
c0104631:	e9 dd f8 ff ff       	jmp    c0103f13 <__alltraps>

c0104636 <vector182>:
.globl vector182
vector182:
  pushl $0
c0104636:	6a 00                	push   $0x0
  pushl $182
c0104638:	68 b6 00 00 00       	push   $0xb6
  jmp __alltraps
c010463d:	e9 d1 f8 ff ff       	jmp    c0103f13 <__alltraps>

c0104642 <vector183>:
.globl vector183
vector183:
  pushl $0
c0104642:	6a 00                	push   $0x0
  pushl $183
c0104644:	68 b7 00 00 00       	push   $0xb7
  jmp __alltraps
c0104649:	e9 c5 f8 ff ff       	jmp    c0103f13 <__alltraps>

c010464e <vector184>:
.globl vector184
vector184:
  pushl $0
c010464e:	6a 00                	push   $0x0
  pushl $184
c0104650:	68 b8 00 00 00       	push   $0xb8
  jmp __alltraps
c0104655:	e9 b9 f8 ff ff       	jmp    c0103f13 <__alltraps>

c010465a <vector185>:
.globl vector185
vector185:
  pushl $0
c010465a:	6a 00                	push   $0x0
  pushl $185
c010465c:	68 b9 00 00 00       	push   $0xb9
  jmp __alltraps
c0104661:	e9 ad f8 ff ff       	jmp    c0103f13 <__alltraps>

c0104666 <vector186>:
.globl vector186
vector186:
  pushl $0
c0104666:	6a 00                	push   $0x0
  pushl $186
c0104668:	68 ba 00 00 00       	push   $0xba
  jmp __alltraps
c010466d:	e9 a1 f8 ff ff       	jmp    c0103f13 <__alltraps>

c0104672 <vector187>:
.globl vector187
vector187:
  pushl $0
c0104672:	6a 00                	push   $0x0
  pushl $187
c0104674:	68 bb 00 00 00       	push   $0xbb
  jmp __alltraps
c0104679:	e9 95 f8 ff ff       	jmp    c0103f13 <__alltraps>

c010467e <vector188>:
.globl vector188
vector188:
  pushl $0
c010467e:	6a 00                	push   $0x0
  pushl $188
c0104680:	68 bc 00 00 00       	push   $0xbc
  jmp __alltraps
c0104685:	e9 89 f8 ff ff       	jmp    c0103f13 <__alltraps>

c010468a <vector189>:
.globl vector189
vector189:
  pushl $0
c010468a:	6a 00                	push   $0x0
  pushl $189
c010468c:	68 bd 00 00 00       	push   $0xbd
  jmp __alltraps
c0104691:	e9 7d f8 ff ff       	jmp    c0103f13 <__alltraps>

c0104696 <vector190>:
.globl vector190
vector190:
  pushl $0
c0104696:	6a 00                	push   $0x0
  pushl $190
c0104698:	68 be 00 00 00       	push   $0xbe
  jmp __alltraps
c010469d:	e9 71 f8 ff ff       	jmp    c0103f13 <__alltraps>

c01046a2 <vector191>:
.globl vector191
vector191:
  pushl $0
c01046a2:	6a 00                	push   $0x0
  pushl $191
c01046a4:	68 bf 00 00 00       	push   $0xbf
  jmp __alltraps
c01046a9:	e9 65 f8 ff ff       	jmp    c0103f13 <__alltraps>

c01046ae <vector192>:
.globl vector192
vector192:
  pushl $0
c01046ae:	6a 00                	push   $0x0
  pushl $192
c01046b0:	68 c0 00 00 00       	push   $0xc0
  jmp __alltraps
c01046b5:	e9 59 f8 ff ff       	jmp    c0103f13 <__alltraps>

c01046ba <vector193>:
.globl vector193
vector193:
  pushl $0
c01046ba:	6a 00                	push   $0x0
  pushl $193
c01046bc:	68 c1 00 00 00       	push   $0xc1
  jmp __alltraps
c01046c1:	e9 4d f8 ff ff       	jmp    c0103f13 <__alltraps>

c01046c6 <vector194>:
.globl vector194
vector194:
  pushl $0
c01046c6:	6a 00                	push   $0x0
  pushl $194
c01046c8:	68 c2 00 00 00       	push   $0xc2
  jmp __alltraps
c01046cd:	e9 41 f8 ff ff       	jmp    c0103f13 <__alltraps>

c01046d2 <vector195>:
.globl vector195
vector195:
  pushl $0
c01046d2:	6a 00                	push   $0x0
  pushl $195
c01046d4:	68 c3 00 00 00       	push   $0xc3
  jmp __alltraps
c01046d9:	e9 35 f8 ff ff       	jmp    c0103f13 <__alltraps>

c01046de <vector196>:
.globl vector196
vector196:
  pushl $0
c01046de:	6a 00                	push   $0x0
  pushl $196
c01046e0:	68 c4 00 00 00       	push   $0xc4
  jmp __alltraps
c01046e5:	e9 29 f8 ff ff       	jmp    c0103f13 <__alltraps>

c01046ea <vector197>:
.globl vector197
vector197:
  pushl $0
c01046ea:	6a 00                	push   $0x0
  pushl $197
c01046ec:	68 c5 00 00 00       	push   $0xc5
  jmp __alltraps
c01046f1:	e9 1d f8 ff ff       	jmp    c0103f13 <__alltraps>

c01046f6 <vector198>:
.globl vector198
vector198:
  pushl $0
c01046f6:	6a 00                	push   $0x0
  pushl $198
c01046f8:	68 c6 00 00 00       	push   $0xc6
  jmp __alltraps
c01046fd:	e9 11 f8 ff ff       	jmp    c0103f13 <__alltraps>

c0104702 <vector199>:
.globl vector199
vector199:
  pushl $0
c0104702:	6a 00                	push   $0x0
  pushl $199
c0104704:	68 c7 00 00 00       	push   $0xc7
  jmp __alltraps
c0104709:	e9 05 f8 ff ff       	jmp    c0103f13 <__alltraps>

c010470e <vector200>:
.globl vector200
vector200:
  pushl $0
c010470e:	6a 00                	push   $0x0
  pushl $200
c0104710:	68 c8 00 00 00       	push   $0xc8
  jmp __alltraps
c0104715:	e9 f9 f7 ff ff       	jmp    c0103f13 <__alltraps>

c010471a <vector201>:
.globl vector201
vector201:
  pushl $0
c010471a:	6a 00                	push   $0x0
  pushl $201
c010471c:	68 c9 00 00 00       	push   $0xc9
  jmp __alltraps
c0104721:	e9 ed f7 ff ff       	jmp    c0103f13 <__alltraps>

c0104726 <vector202>:
.globl vector202
vector202:
  pushl $0
c0104726:	6a 00                	push   $0x0
  pushl $202
c0104728:	68 ca 00 00 00       	push   $0xca
  jmp __alltraps
c010472d:	e9 e1 f7 ff ff       	jmp    c0103f13 <__alltraps>

c0104732 <vector203>:
.globl vector203
vector203:
  pushl $0
c0104732:	6a 00                	push   $0x0
  pushl $203
c0104734:	68 cb 00 00 00       	push   $0xcb
  jmp __alltraps
c0104739:	e9 d5 f7 ff ff       	jmp    c0103f13 <__alltraps>

c010473e <vector204>:
.globl vector204
vector204:
  pushl $0
c010473e:	6a 00                	push   $0x0
  pushl $204
c0104740:	68 cc 00 00 00       	push   $0xcc
  jmp __alltraps
c0104745:	e9 c9 f7 ff ff       	jmp    c0103f13 <__alltraps>

c010474a <vector205>:
.globl vector205
vector205:
  pushl $0
c010474a:	6a 00                	push   $0x0
  pushl $205
c010474c:	68 cd 00 00 00       	push   $0xcd
  jmp __alltraps
c0104751:	e9 bd f7 ff ff       	jmp    c0103f13 <__alltraps>

c0104756 <vector206>:
.globl vector206
vector206:
  pushl $0
c0104756:	6a 00                	push   $0x0
  pushl $206
c0104758:	68 ce 00 00 00       	push   $0xce
  jmp __alltraps
c010475d:	e9 b1 f7 ff ff       	jmp    c0103f13 <__alltraps>

c0104762 <vector207>:
.globl vector207
vector207:
  pushl $0
c0104762:	6a 00                	push   $0x0
  pushl $207
c0104764:	68 cf 00 00 00       	push   $0xcf
  jmp __alltraps
c0104769:	e9 a5 f7 ff ff       	jmp    c0103f13 <__alltraps>

c010476e <vector208>:
.globl vector208
vector208:
  pushl $0
c010476e:	6a 00                	push   $0x0
  pushl $208
c0104770:	68 d0 00 00 00       	push   $0xd0
  jmp __alltraps
c0104775:	e9 99 f7 ff ff       	jmp    c0103f13 <__alltraps>

c010477a <vector209>:
.globl vector209
vector209:
  pushl $0
c010477a:	6a 00                	push   $0x0
  pushl $209
c010477c:	68 d1 00 00 00       	push   $0xd1
  jmp __alltraps
c0104781:	e9 8d f7 ff ff       	jmp    c0103f13 <__alltraps>

c0104786 <vector210>:
.globl vector210
vector210:
  pushl $0
c0104786:	6a 00                	push   $0x0
  pushl $210
c0104788:	68 d2 00 00 00       	push   $0xd2
  jmp __alltraps
c010478d:	e9 81 f7 ff ff       	jmp    c0103f13 <__alltraps>

c0104792 <vector211>:
.globl vector211
vector211:
  pushl $0
c0104792:	6a 00                	push   $0x0
  pushl $211
c0104794:	68 d3 00 00 00       	push   $0xd3
  jmp __alltraps
c0104799:	e9 75 f7 ff ff       	jmp    c0103f13 <__alltraps>

c010479e <vector212>:
.globl vector212
vector212:
  pushl $0
c010479e:	6a 00                	push   $0x0
  pushl $212
c01047a0:	68 d4 00 00 00       	push   $0xd4
  jmp __alltraps
c01047a5:	e9 69 f7 ff ff       	jmp    c0103f13 <__alltraps>

c01047aa <vector213>:
.globl vector213
vector213:
  pushl $0
c01047aa:	6a 00                	push   $0x0
  pushl $213
c01047ac:	68 d5 00 00 00       	push   $0xd5
  jmp __alltraps
c01047b1:	e9 5d f7 ff ff       	jmp    c0103f13 <__alltraps>

c01047b6 <vector214>:
.globl vector214
vector214:
  pushl $0
c01047b6:	6a 00                	push   $0x0
  pushl $214
c01047b8:	68 d6 00 00 00       	push   $0xd6
  jmp __alltraps
c01047bd:	e9 51 f7 ff ff       	jmp    c0103f13 <__alltraps>

c01047c2 <vector215>:
.globl vector215
vector215:
  pushl $0
c01047c2:	6a 00                	push   $0x0
  pushl $215
c01047c4:	68 d7 00 00 00       	push   $0xd7
  jmp __alltraps
c01047c9:	e9 45 f7 ff ff       	jmp    c0103f13 <__alltraps>

c01047ce <vector216>:
.globl vector216
vector216:
  pushl $0
c01047ce:	6a 00                	push   $0x0
  pushl $216
c01047d0:	68 d8 00 00 00       	push   $0xd8
  jmp __alltraps
c01047d5:	e9 39 f7 ff ff       	jmp    c0103f13 <__alltraps>

c01047da <vector217>:
.globl vector217
vector217:
  pushl $0
c01047da:	6a 00                	push   $0x0
  pushl $217
c01047dc:	68 d9 00 00 00       	push   $0xd9
  jmp __alltraps
c01047e1:	e9 2d f7 ff ff       	jmp    c0103f13 <__alltraps>

c01047e6 <vector218>:
.globl vector218
vector218:
  pushl $0
c01047e6:	6a 00                	push   $0x0
  pushl $218
c01047e8:	68 da 00 00 00       	push   $0xda
  jmp __alltraps
c01047ed:	e9 21 f7 ff ff       	jmp    c0103f13 <__alltraps>

c01047f2 <vector219>:
.globl vector219
vector219:
  pushl $0
c01047f2:	6a 00                	push   $0x0
  pushl $219
c01047f4:	68 db 00 00 00       	push   $0xdb
  jmp __alltraps
c01047f9:	e9 15 f7 ff ff       	jmp    c0103f13 <__alltraps>

c01047fe <vector220>:
.globl vector220
vector220:
  pushl $0
c01047fe:	6a 00                	push   $0x0
  pushl $220
c0104800:	68 dc 00 00 00       	push   $0xdc
  jmp __alltraps
c0104805:	e9 09 f7 ff ff       	jmp    c0103f13 <__alltraps>

c010480a <vector221>:
.globl vector221
vector221:
  pushl $0
c010480a:	6a 00                	push   $0x0
  pushl $221
c010480c:	68 dd 00 00 00       	push   $0xdd
  jmp __alltraps
c0104811:	e9 fd f6 ff ff       	jmp    c0103f13 <__alltraps>

c0104816 <vector222>:
.globl vector222
vector222:
  pushl $0
c0104816:	6a 00                	push   $0x0
  pushl $222
c0104818:	68 de 00 00 00       	push   $0xde
  jmp __alltraps
c010481d:	e9 f1 f6 ff ff       	jmp    c0103f13 <__alltraps>

c0104822 <vector223>:
.globl vector223
vector223:
  pushl $0
c0104822:	6a 00                	push   $0x0
  pushl $223
c0104824:	68 df 00 00 00       	push   $0xdf
  jmp __alltraps
c0104829:	e9 e5 f6 ff ff       	jmp    c0103f13 <__alltraps>

c010482e <vector224>:
.globl vector224
vector224:
  pushl $0
c010482e:	6a 00                	push   $0x0
  pushl $224
c0104830:	68 e0 00 00 00       	push   $0xe0
  jmp __alltraps
c0104835:	e9 d9 f6 ff ff       	jmp    c0103f13 <__alltraps>

c010483a <vector225>:
.globl vector225
vector225:
  pushl $0
c010483a:	6a 00                	push   $0x0
  pushl $225
c010483c:	68 e1 00 00 00       	push   $0xe1
  jmp __alltraps
c0104841:	e9 cd f6 ff ff       	jmp    c0103f13 <__alltraps>

c0104846 <vector226>:
.globl vector226
vector226:
  pushl $0
c0104846:	6a 00                	push   $0x0
  pushl $226
c0104848:	68 e2 00 00 00       	push   $0xe2
  jmp __alltraps
c010484d:	e9 c1 f6 ff ff       	jmp    c0103f13 <__alltraps>

c0104852 <vector227>:
.globl vector227
vector227:
  pushl $0
c0104852:	6a 00                	push   $0x0
  pushl $227
c0104854:	68 e3 00 00 00       	push   $0xe3
  jmp __alltraps
c0104859:	e9 b5 f6 ff ff       	jmp    c0103f13 <__alltraps>

c010485e <vector228>:
.globl vector228
vector228:
  pushl $0
c010485e:	6a 00                	push   $0x0
  pushl $228
c0104860:	68 e4 00 00 00       	push   $0xe4
  jmp __alltraps
c0104865:	e9 a9 f6 ff ff       	jmp    c0103f13 <__alltraps>

c010486a <vector229>:
.globl vector229
vector229:
  pushl $0
c010486a:	6a 00                	push   $0x0
  pushl $229
c010486c:	68 e5 00 00 00       	push   $0xe5
  jmp __alltraps
c0104871:	e9 9d f6 ff ff       	jmp    c0103f13 <__alltraps>

c0104876 <vector230>:
.globl vector230
vector230:
  pushl $0
c0104876:	6a 00                	push   $0x0
  pushl $230
c0104878:	68 e6 00 00 00       	push   $0xe6
  jmp __alltraps
c010487d:	e9 91 f6 ff ff       	jmp    c0103f13 <__alltraps>

c0104882 <vector231>:
.globl vector231
vector231:
  pushl $0
c0104882:	6a 00                	push   $0x0
  pushl $231
c0104884:	68 e7 00 00 00       	push   $0xe7
  jmp __alltraps
c0104889:	e9 85 f6 ff ff       	jmp    c0103f13 <__alltraps>

c010488e <vector232>:
.globl vector232
vector232:
  pushl $0
c010488e:	6a 00                	push   $0x0
  pushl $232
c0104890:	68 e8 00 00 00       	push   $0xe8
  jmp __alltraps
c0104895:	e9 79 f6 ff ff       	jmp    c0103f13 <__alltraps>

c010489a <vector233>:
.globl vector233
vector233:
  pushl $0
c010489a:	6a 00                	push   $0x0
  pushl $233
c010489c:	68 e9 00 00 00       	push   $0xe9
  jmp __alltraps
c01048a1:	e9 6d f6 ff ff       	jmp    c0103f13 <__alltraps>

c01048a6 <vector234>:
.globl vector234
vector234:
  pushl $0
c01048a6:	6a 00                	push   $0x0
  pushl $234
c01048a8:	68 ea 00 00 00       	push   $0xea
  jmp __alltraps
c01048ad:	e9 61 f6 ff ff       	jmp    c0103f13 <__alltraps>

c01048b2 <vector235>:
.globl vector235
vector235:
  pushl $0
c01048b2:	6a 00                	push   $0x0
  pushl $235
c01048b4:	68 eb 00 00 00       	push   $0xeb
  jmp __alltraps
c01048b9:	e9 55 f6 ff ff       	jmp    c0103f13 <__alltraps>

c01048be <vector236>:
.globl vector236
vector236:
  pushl $0
c01048be:	6a 00                	push   $0x0
  pushl $236
c01048c0:	68 ec 00 00 00       	push   $0xec
  jmp __alltraps
c01048c5:	e9 49 f6 ff ff       	jmp    c0103f13 <__alltraps>

c01048ca <vector237>:
.globl vector237
vector237:
  pushl $0
c01048ca:	6a 00                	push   $0x0
  pushl $237
c01048cc:	68 ed 00 00 00       	push   $0xed
  jmp __alltraps
c01048d1:	e9 3d f6 ff ff       	jmp    c0103f13 <__alltraps>

c01048d6 <vector238>:
.globl vector238
vector238:
  pushl $0
c01048d6:	6a 00                	push   $0x0
  pushl $238
c01048d8:	68 ee 00 00 00       	push   $0xee
  jmp __alltraps
c01048dd:	e9 31 f6 ff ff       	jmp    c0103f13 <__alltraps>

c01048e2 <vector239>:
.globl vector239
vector239:
  pushl $0
c01048e2:	6a 00                	push   $0x0
  pushl $239
c01048e4:	68 ef 00 00 00       	push   $0xef
  jmp __alltraps
c01048e9:	e9 25 f6 ff ff       	jmp    c0103f13 <__alltraps>

c01048ee <vector240>:
.globl vector240
vector240:
  pushl $0
c01048ee:	6a 00                	push   $0x0
  pushl $240
c01048f0:	68 f0 00 00 00       	push   $0xf0
  jmp __alltraps
c01048f5:	e9 19 f6 ff ff       	jmp    c0103f13 <__alltraps>

c01048fa <vector241>:
.globl vector241
vector241:
  pushl $0
c01048fa:	6a 00                	push   $0x0
  pushl $241
c01048fc:	68 f1 00 00 00       	push   $0xf1
  jmp __alltraps
c0104901:	e9 0d f6 ff ff       	jmp    c0103f13 <__alltraps>

c0104906 <vector242>:
.globl vector242
vector242:
  pushl $0
c0104906:	6a 00                	push   $0x0
  pushl $242
c0104908:	68 f2 00 00 00       	push   $0xf2
  jmp __alltraps
c010490d:	e9 01 f6 ff ff       	jmp    c0103f13 <__alltraps>

c0104912 <vector243>:
.globl vector243
vector243:
  pushl $0
c0104912:	6a 00                	push   $0x0
  pushl $243
c0104914:	68 f3 00 00 00       	push   $0xf3
  jmp __alltraps
c0104919:	e9 f5 f5 ff ff       	jmp    c0103f13 <__alltraps>

c010491e <vector244>:
.globl vector244
vector244:
  pushl $0
c010491e:	6a 00                	push   $0x0
  pushl $244
c0104920:	68 f4 00 00 00       	push   $0xf4
  jmp __alltraps
c0104925:	e9 e9 f5 ff ff       	jmp    c0103f13 <__alltraps>

c010492a <vector245>:
.globl vector245
vector245:
  pushl $0
c010492a:	6a 00                	push   $0x0
  pushl $245
c010492c:	68 f5 00 00 00       	push   $0xf5
  jmp __alltraps
c0104931:	e9 dd f5 ff ff       	jmp    c0103f13 <__alltraps>

c0104936 <vector246>:
.globl vector246
vector246:
  pushl $0
c0104936:	6a 00                	push   $0x0
  pushl $246
c0104938:	68 f6 00 00 00       	push   $0xf6
  jmp __alltraps
c010493d:	e9 d1 f5 ff ff       	jmp    c0103f13 <__alltraps>

c0104942 <vector247>:
.globl vector247
vector247:
  pushl $0
c0104942:	6a 00                	push   $0x0
  pushl $247
c0104944:	68 f7 00 00 00       	push   $0xf7
  jmp __alltraps
c0104949:	e9 c5 f5 ff ff       	jmp    c0103f13 <__alltraps>

c010494e <vector248>:
.globl vector248
vector248:
  pushl $0
c010494e:	6a 00                	push   $0x0
  pushl $248
c0104950:	68 f8 00 00 00       	push   $0xf8
  jmp __alltraps
c0104955:	e9 b9 f5 ff ff       	jmp    c0103f13 <__alltraps>

c010495a <vector249>:
.globl vector249
vector249:
  pushl $0
c010495a:	6a 00                	push   $0x0
  pushl $249
c010495c:	68 f9 00 00 00       	push   $0xf9
  jmp __alltraps
c0104961:	e9 ad f5 ff ff       	jmp    c0103f13 <__alltraps>

c0104966 <vector250>:
.globl vector250
vector250:
  pushl $0
c0104966:	6a 00                	push   $0x0
  pushl $250
c0104968:	68 fa 00 00 00       	push   $0xfa
  jmp __alltraps
c010496d:	e9 a1 f5 ff ff       	jmp    c0103f13 <__alltraps>

c0104972 <vector251>:
.globl vector251
vector251:
  pushl $0
c0104972:	6a 00                	push   $0x0
  pushl $251
c0104974:	68 fb 00 00 00       	push   $0xfb
  jmp __alltraps
c0104979:	e9 95 f5 ff ff       	jmp    c0103f13 <__alltraps>

c010497e <vector252>:
.globl vector252
vector252:
  pushl $0
c010497e:	6a 00                	push   $0x0
  pushl $252
c0104980:	68 fc 00 00 00       	push   $0xfc
  jmp __alltraps
c0104985:	e9 89 f5 ff ff       	jmp    c0103f13 <__alltraps>

c010498a <vector253>:
.globl vector253
vector253:
  pushl $0
c010498a:	6a 00                	push   $0x0
  pushl $253
c010498c:	68 fd 00 00 00       	push   $0xfd
  jmp __alltraps
c0104991:	e9 7d f5 ff ff       	jmp    c0103f13 <__alltraps>

c0104996 <vector254>:
.globl vector254
vector254:
  pushl $0
c0104996:	6a 00                	push   $0x0
  pushl $254
c0104998:	68 fe 00 00 00       	push   $0xfe
  jmp __alltraps
c010499d:	e9 71 f5 ff ff       	jmp    c0103f13 <__alltraps>

c01049a2 <vector255>:
.globl vector255
vector255:
  pushl $0
c01049a2:	6a 00                	push   $0x0
  pushl $255
c01049a4:	68 ff 00 00 00       	push   $0xff
  jmp __alltraps
c01049a9:	e9 65 f5 ff ff       	jmp    c0103f13 <__alltraps>

c01049ae <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c01049ae:	55                   	push   %ebp
c01049af:	89 e5                	mov    %esp,%ebp
    return page - pages;
c01049b1:	8b 55 08             	mov    0x8(%ebp),%edx
c01049b4:	a1 d0 2f 1a c0       	mov    0xc01a2fd0,%eax
c01049b9:	29 c2                	sub    %eax,%edx
c01049bb:	89 d0                	mov    %edx,%eax
c01049bd:	c1 f8 02             	sar    $0x2,%eax
c01049c0:	69 c0 39 8e e3 38    	imul   $0x38e38e39,%eax,%eax
}
c01049c6:	5d                   	pop    %ebp
c01049c7:	c3                   	ret    

c01049c8 <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c01049c8:	55                   	push   %ebp
c01049c9:	89 e5                	mov    %esp,%ebp
c01049cb:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c01049ce:	8b 45 08             	mov    0x8(%ebp),%eax
c01049d1:	89 04 24             	mov    %eax,(%esp)
c01049d4:	e8 d5 ff ff ff       	call   c01049ae <page2ppn>
c01049d9:	c1 e0 0c             	shl    $0xc,%eax
}
c01049dc:	c9                   	leave  
c01049dd:	c3                   	ret    

c01049de <page_ref>:
pde2page(pde_t pde) {
    return pa2page(PDE_ADDR(pde));
}

static inline int
page_ref(struct Page *page) {
c01049de:	55                   	push   %ebp
c01049df:	89 e5                	mov    %esp,%ebp
    return page->ref;
c01049e1:	8b 45 08             	mov    0x8(%ebp),%eax
c01049e4:	8b 00                	mov    (%eax),%eax
}
c01049e6:	5d                   	pop    %ebp
c01049e7:	c3                   	ret    

c01049e8 <set_page_ref>:

static inline void
set_page_ref(struct Page *page, int val) {
c01049e8:	55                   	push   %ebp
c01049e9:	89 e5                	mov    %esp,%ebp
    page->ref = val;
c01049eb:	8b 45 08             	mov    0x8(%ebp),%eax
c01049ee:	8b 55 0c             	mov    0xc(%ebp),%edx
c01049f1:	89 10                	mov    %edx,(%eax)
}
c01049f3:	5d                   	pop    %ebp
c01049f4:	c3                   	ret    

c01049f5 <default_init>:

#define free_list (free_area.free_list)
#define nr_free (free_area.nr_free)

static void
default_init(void) {
c01049f5:	55                   	push   %ebp
c01049f6:	89 e5                	mov    %esp,%ebp
c01049f8:	83 ec 10             	sub    $0x10,%esp
c01049fb:	c7 45 fc bc 2f 1a c0 	movl   $0xc01a2fbc,-0x4(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0104a02:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0104a05:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0104a08:	89 50 04             	mov    %edx,0x4(%eax)
c0104a0b:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0104a0e:	8b 50 04             	mov    0x4(%eax),%edx
c0104a11:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0104a14:	89 10                	mov    %edx,(%eax)
    list_init(&free_list);
    nr_free = 0;
c0104a16:	c7 05 c4 2f 1a c0 00 	movl   $0x0,0xc01a2fc4
c0104a1d:	00 00 00 
}
c0104a20:	c9                   	leave  
c0104a21:	c3                   	ret    

c0104a22 <default_init_memmap>:

static void
default_init_memmap(struct Page *base, size_t n) {
c0104a22:	55                   	push   %ebp
c0104a23:	89 e5                	mov    %esp,%ebp
c0104a25:	83 ec 48             	sub    $0x48,%esp
    assert(n > 0);
c0104a28:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0104a2c:	75 24                	jne    c0104a52 <default_init_memmap+0x30>
c0104a2e:	c7 44 24 0c 90 e0 10 	movl   $0xc010e090,0xc(%esp)
c0104a35:	c0 
c0104a36:	c7 44 24 08 96 e0 10 	movl   $0xc010e096,0x8(%esp)
c0104a3d:	c0 
c0104a3e:	c7 44 24 04 46 00 00 	movl   $0x46,0x4(%esp)
c0104a45:	00 
c0104a46:	c7 04 24 ab e0 10 c0 	movl   $0xc010e0ab,(%esp)
c0104a4d:	e8 06 d8 ff ff       	call   c0102258 <__panic>
    struct Page *p = base;
c0104a52:	8b 45 08             	mov    0x8(%ebp),%eax
c0104a55:	89 45 f4             	mov    %eax,-0xc(%ebp)
    for (; p != base + n; p ++) {
c0104a58:	e9 dc 00 00 00       	jmp    c0104b39 <default_init_memmap+0x117>
        assert(PageReserved(p));
c0104a5d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104a60:	83 c0 04             	add    $0x4,%eax
c0104a63:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c0104a6a:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0104a6d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104a70:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104a73:	0f a3 10             	bt     %edx,(%eax)
c0104a76:	19 c0                	sbb    %eax,%eax
c0104a78:	89 45 e8             	mov    %eax,-0x18(%ebp)
    return oldbit != 0;
c0104a7b:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0104a7f:	0f 95 c0             	setne  %al
c0104a82:	0f b6 c0             	movzbl %al,%eax
c0104a85:	85 c0                	test   %eax,%eax
c0104a87:	75 24                	jne    c0104aad <default_init_memmap+0x8b>
c0104a89:	c7 44 24 0c c1 e0 10 	movl   $0xc010e0c1,0xc(%esp)
c0104a90:	c0 
c0104a91:	c7 44 24 08 96 e0 10 	movl   $0xc010e096,0x8(%esp)
c0104a98:	c0 
c0104a99:	c7 44 24 04 49 00 00 	movl   $0x49,0x4(%esp)
c0104aa0:	00 
c0104aa1:	c7 04 24 ab e0 10 c0 	movl   $0xc010e0ab,(%esp)
c0104aa8:	e8 ab d7 ff ff       	call   c0102258 <__panic>
        p->flags = 0;
c0104aad:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104ab0:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
        SetPageProperty(p);
c0104ab7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104aba:	83 c0 04             	add    $0x4,%eax
c0104abd:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
c0104ac4:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * Note that @nr may be almost arbitrarily large; this function is not
 * restricted to acting on a single-word quantity.
 * */
static inline void
set_bit(int nr, volatile void *addr) {
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c0104ac7:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0104aca:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0104acd:	0f ab 10             	bts    %edx,(%eax)
        p->property = 0;
c0104ad0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104ad3:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        set_page_ref(p, 0);
c0104ada:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0104ae1:	00 
c0104ae2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104ae5:	89 04 24             	mov    %eax,(%esp)
c0104ae8:	e8 fb fe ff ff       	call   c01049e8 <set_page_ref>
        list_add_before(&free_list, &(p->page_link));
c0104aed:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104af0:	83 c0 10             	add    $0x10,%eax
c0104af3:	c7 45 dc bc 2f 1a c0 	movl   $0xc01a2fbc,-0x24(%ebp)
c0104afa:	89 45 d8             	mov    %eax,-0x28(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c0104afd:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0104b00:	8b 00                	mov    (%eax),%eax
c0104b02:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0104b05:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c0104b08:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0104b0b:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0104b0e:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0104b11:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0104b14:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0104b17:	89 10                	mov    %edx,(%eax)
c0104b19:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0104b1c:	8b 10                	mov    (%eax),%edx
c0104b1e:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0104b21:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0104b24:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0104b27:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0104b2a:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0104b2d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0104b30:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0104b33:	89 10                	mov    %edx,(%eax)

static void
default_init_memmap(struct Page *base, size_t n) {
    assert(n > 0);
    struct Page *p = base;
    for (; p != base + n; p ++) {
c0104b35:	83 45 f4 24          	addl   $0x24,-0xc(%ebp)
c0104b39:	8b 55 0c             	mov    0xc(%ebp),%edx
c0104b3c:	89 d0                	mov    %edx,%eax
c0104b3e:	c1 e0 03             	shl    $0x3,%eax
c0104b41:	01 d0                	add    %edx,%eax
c0104b43:	c1 e0 02             	shl    $0x2,%eax
c0104b46:	89 c2                	mov    %eax,%edx
c0104b48:	8b 45 08             	mov    0x8(%ebp),%eax
c0104b4b:	01 d0                	add    %edx,%eax
c0104b4d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0104b50:	0f 85 07 ff ff ff    	jne    c0104a5d <default_init_memmap+0x3b>
        SetPageProperty(p);
        p->property = 0;
        set_page_ref(p, 0);
        list_add_before(&free_list, &(p->page_link));
    }
    nr_free += n;
c0104b56:	8b 15 c4 2f 1a c0    	mov    0xc01a2fc4,%edx
c0104b5c:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104b5f:	01 d0                	add    %edx,%eax
c0104b61:	a3 c4 2f 1a c0       	mov    %eax,0xc01a2fc4
    //first block
    base->property = n;
c0104b66:	8b 45 08             	mov    0x8(%ebp),%eax
c0104b69:	8b 55 0c             	mov    0xc(%ebp),%edx
c0104b6c:	89 50 08             	mov    %edx,0x8(%eax)
}
c0104b6f:	c9                   	leave  
c0104b70:	c3                   	ret    

c0104b71 <default_alloc_pages>:

static struct Page *
default_alloc_pages(size_t n) {
c0104b71:	55                   	push   %ebp
c0104b72:	89 e5                	mov    %esp,%ebp
c0104b74:	83 ec 68             	sub    $0x68,%esp
    assert(n > 0);
c0104b77:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0104b7b:	75 24                	jne    c0104ba1 <default_alloc_pages+0x30>
c0104b7d:	c7 44 24 0c 90 e0 10 	movl   $0xc010e090,0xc(%esp)
c0104b84:	c0 
c0104b85:	c7 44 24 08 96 e0 10 	movl   $0xc010e096,0x8(%esp)
c0104b8c:	c0 
c0104b8d:	c7 44 24 04 57 00 00 	movl   $0x57,0x4(%esp)
c0104b94:	00 
c0104b95:	c7 04 24 ab e0 10 c0 	movl   $0xc010e0ab,(%esp)
c0104b9c:	e8 b7 d6 ff ff       	call   c0102258 <__panic>
    if (n > nr_free) {
c0104ba1:	a1 c4 2f 1a c0       	mov    0xc01a2fc4,%eax
c0104ba6:	3b 45 08             	cmp    0x8(%ebp),%eax
c0104ba9:	73 0a                	jae    c0104bb5 <default_alloc_pages+0x44>
        return NULL;
c0104bab:	b8 00 00 00 00       	mov    $0x0,%eax
c0104bb0:	e9 37 01 00 00       	jmp    c0104cec <default_alloc_pages+0x17b>
    }
    list_entry_t *le, *len;
    le = &free_list;
c0104bb5:	c7 45 f4 bc 2f 1a c0 	movl   $0xc01a2fbc,-0xc(%ebp)

    while((le=list_next(le)) != &free_list) {
c0104bbc:	e9 0a 01 00 00       	jmp    c0104ccb <default_alloc_pages+0x15a>
      struct Page *p = le2page(le, page_link);
c0104bc1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104bc4:	83 e8 10             	sub    $0x10,%eax
c0104bc7:	89 45 ec             	mov    %eax,-0x14(%ebp)
      if(p->property >= n){
c0104bca:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104bcd:	8b 40 08             	mov    0x8(%eax),%eax
c0104bd0:	3b 45 08             	cmp    0x8(%ebp),%eax
c0104bd3:	0f 82 f2 00 00 00    	jb     c0104ccb <default_alloc_pages+0x15a>
        int i;
        for(i=0;i<n;i++){
c0104bd9:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c0104be0:	eb 7c                	jmp    c0104c5e <default_alloc_pages+0xed>
c0104be2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104be5:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0104be8:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0104beb:	8b 40 04             	mov    0x4(%eax),%eax
          len = list_next(le);
c0104bee:	89 45 e8             	mov    %eax,-0x18(%ebp)
          struct Page *pp = le2page(le, page_link);
c0104bf1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104bf4:	83 e8 10             	sub    $0x10,%eax
c0104bf7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
          SetPageReserved(pp);
c0104bfa:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104bfd:	83 c0 04             	add    $0x4,%eax
c0104c00:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c0104c07:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0104c0a:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0104c0d:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0104c10:	0f ab 10             	bts    %edx,(%eax)
          ClearPageProperty(pp);
c0104c13:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104c16:	83 c0 04             	add    $0x4,%eax
c0104c19:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%ebp)
c0104c20:	89 45 d0             	mov    %eax,-0x30(%ebp)
 * @nr:     the bit to clear
 * @addr:   the address to start counting from
 * */
static inline void
clear_bit(int nr, volatile void *addr) {
    asm volatile ("btrl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c0104c23:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0104c26:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0104c29:	0f b3 10             	btr    %edx,(%eax)
c0104c2c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104c2f:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c0104c32:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0104c35:	8b 40 04             	mov    0x4(%eax),%eax
c0104c38:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0104c3b:	8b 12                	mov    (%edx),%edx
c0104c3d:	89 55 c8             	mov    %edx,-0x38(%ebp)
c0104c40:	89 45 c4             	mov    %eax,-0x3c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c0104c43:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0104c46:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c0104c49:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0104c4c:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0104c4f:	8b 55 c8             	mov    -0x38(%ebp),%edx
c0104c52:	89 10                	mov    %edx,(%eax)
          list_del(le);
          le = len;
c0104c54:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0104c57:	89 45 f4             	mov    %eax,-0xc(%ebp)

    while((le=list_next(le)) != &free_list) {
      struct Page *p = le2page(le, page_link);
      if(p->property >= n){
        int i;
        for(i=0;i<n;i++){
c0104c5a:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c0104c5e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104c61:	3b 45 08             	cmp    0x8(%ebp),%eax
c0104c64:	0f 82 78 ff ff ff    	jb     c0104be2 <default_alloc_pages+0x71>
          SetPageReserved(pp);
          ClearPageProperty(pp);
          list_del(le);
          le = len;
        }
        if(p->property>n){
c0104c6a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104c6d:	8b 40 08             	mov    0x8(%eax),%eax
c0104c70:	3b 45 08             	cmp    0x8(%ebp),%eax
c0104c73:	76 12                	jbe    c0104c87 <default_alloc_pages+0x116>
          (le2page(le,page_link))->property = p->property - n;
c0104c75:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104c78:	8d 50 f0             	lea    -0x10(%eax),%edx
c0104c7b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104c7e:	8b 40 08             	mov    0x8(%eax),%eax
c0104c81:	2b 45 08             	sub    0x8(%ebp),%eax
c0104c84:	89 42 08             	mov    %eax,0x8(%edx)
        }
        ClearPageProperty(p);
c0104c87:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104c8a:	83 c0 04             	add    $0x4,%eax
c0104c8d:	c7 45 c0 01 00 00 00 	movl   $0x1,-0x40(%ebp)
c0104c94:	89 45 bc             	mov    %eax,-0x44(%ebp)
c0104c97:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0104c9a:	8b 55 c0             	mov    -0x40(%ebp),%edx
c0104c9d:	0f b3 10             	btr    %edx,(%eax)
        SetPageReserved(p);
c0104ca0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104ca3:	83 c0 04             	add    $0x4,%eax
c0104ca6:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)
c0104cad:	89 45 b4             	mov    %eax,-0x4c(%ebp)
 * Note that @nr may be almost arbitrarily large; this function is not
 * restricted to acting on a single-word quantity.
 * */
static inline void
set_bit(int nr, volatile void *addr) {
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c0104cb0:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0104cb3:	8b 55 b8             	mov    -0x48(%ebp),%edx
c0104cb6:	0f ab 10             	bts    %edx,(%eax)
        nr_free -= n;
c0104cb9:	a1 c4 2f 1a c0       	mov    0xc01a2fc4,%eax
c0104cbe:	2b 45 08             	sub    0x8(%ebp),%eax
c0104cc1:	a3 c4 2f 1a c0       	mov    %eax,0xc01a2fc4
        return p;
c0104cc6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104cc9:	eb 21                	jmp    c0104cec <default_alloc_pages+0x17b>
c0104ccb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104cce:	89 45 b0             	mov    %eax,-0x50(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0104cd1:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0104cd4:	8b 40 04             	mov    0x4(%eax),%eax
        return NULL;
    }
    list_entry_t *le, *len;
    le = &free_list;

    while((le=list_next(le)) != &free_list) {
c0104cd7:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104cda:	81 7d f4 bc 2f 1a c0 	cmpl   $0xc01a2fbc,-0xc(%ebp)
c0104ce1:	0f 85 da fe ff ff    	jne    c0104bc1 <default_alloc_pages+0x50>
        SetPageReserved(p);
        nr_free -= n;
        return p;
      }
    }
    return NULL;
c0104ce7:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0104cec:	c9                   	leave  
c0104ced:	c3                   	ret    

c0104cee <default_free_pages>:

static void
default_free_pages(struct Page *base, size_t n) {
c0104cee:	55                   	push   %ebp
c0104cef:	89 e5                	mov    %esp,%ebp
c0104cf1:	83 ec 68             	sub    $0x68,%esp
    assert(n > 0);
c0104cf4:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0104cf8:	75 24                	jne    c0104d1e <default_free_pages+0x30>
c0104cfa:	c7 44 24 0c 90 e0 10 	movl   $0xc010e090,0xc(%esp)
c0104d01:	c0 
c0104d02:	c7 44 24 08 96 e0 10 	movl   $0xc010e096,0x8(%esp)
c0104d09:	c0 
c0104d0a:	c7 44 24 04 78 00 00 	movl   $0x78,0x4(%esp)
c0104d11:	00 
c0104d12:	c7 04 24 ab e0 10 c0 	movl   $0xc010e0ab,(%esp)
c0104d19:	e8 3a d5 ff ff       	call   c0102258 <__panic>
    assert(PageReserved(base));
c0104d1e:	8b 45 08             	mov    0x8(%ebp),%eax
c0104d21:	83 c0 04             	add    $0x4,%eax
c0104d24:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0104d2b:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0104d2e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0104d31:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0104d34:	0f a3 10             	bt     %edx,(%eax)
c0104d37:	19 c0                	sbb    %eax,%eax
c0104d39:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    return oldbit != 0;
c0104d3c:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0104d40:	0f 95 c0             	setne  %al
c0104d43:	0f b6 c0             	movzbl %al,%eax
c0104d46:	85 c0                	test   %eax,%eax
c0104d48:	75 24                	jne    c0104d6e <default_free_pages+0x80>
c0104d4a:	c7 44 24 0c d1 e0 10 	movl   $0xc010e0d1,0xc(%esp)
c0104d51:	c0 
c0104d52:	c7 44 24 08 96 e0 10 	movl   $0xc010e096,0x8(%esp)
c0104d59:	c0 
c0104d5a:	c7 44 24 04 79 00 00 	movl   $0x79,0x4(%esp)
c0104d61:	00 
c0104d62:	c7 04 24 ab e0 10 c0 	movl   $0xc010e0ab,(%esp)
c0104d69:	e8 ea d4 ff ff       	call   c0102258 <__panic>

    list_entry_t *le = &free_list;
c0104d6e:	c7 45 f4 bc 2f 1a c0 	movl   $0xc01a2fbc,-0xc(%ebp)
    struct Page * p;
    while((le=list_next(le)) != &free_list) {
c0104d75:	eb 13                	jmp    c0104d8a <default_free_pages+0x9c>
      p = le2page(le, page_link);
c0104d77:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104d7a:	83 e8 10             	sub    $0x10,%eax
c0104d7d:	89 45 f0             	mov    %eax,-0x10(%ebp)
      if(p>base){
c0104d80:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104d83:	3b 45 08             	cmp    0x8(%ebp),%eax
c0104d86:	76 02                	jbe    c0104d8a <default_free_pages+0x9c>
        break;
c0104d88:	eb 18                	jmp    c0104da2 <default_free_pages+0xb4>
c0104d8a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104d8d:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0104d90:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0104d93:	8b 40 04             	mov    0x4(%eax),%eax
    assert(n > 0);
    assert(PageReserved(base));

    list_entry_t *le = &free_list;
    struct Page * p;
    while((le=list_next(le)) != &free_list) {
c0104d96:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104d99:	81 7d f4 bc 2f 1a c0 	cmpl   $0xc01a2fbc,-0xc(%ebp)
c0104da0:	75 d5                	jne    c0104d77 <default_free_pages+0x89>
      if(p>base){
        break;
      }
    }
    //list_add_before(le, base->page_link);
    for(p=base;p<base+n;p++){
c0104da2:	8b 45 08             	mov    0x8(%ebp),%eax
c0104da5:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0104da8:	eb 4b                	jmp    c0104df5 <default_free_pages+0x107>
      list_add_before(le, &(p->page_link));
c0104daa:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104dad:	8d 50 10             	lea    0x10(%eax),%edx
c0104db0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104db3:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0104db6:	89 55 d8             	mov    %edx,-0x28(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c0104db9:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0104dbc:	8b 00                	mov    (%eax),%eax
c0104dbe:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0104dc1:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c0104dc4:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0104dc7:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0104dca:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0104dcd:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0104dd0:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0104dd3:	89 10                	mov    %edx,(%eax)
c0104dd5:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0104dd8:	8b 10                	mov    (%eax),%edx
c0104dda:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0104ddd:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0104de0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0104de3:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0104de6:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0104de9:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0104dec:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0104def:	89 10                	mov    %edx,(%eax)
      if(p>base){
        break;
      }
    }
    //list_add_before(le, base->page_link);
    for(p=base;p<base+n;p++){
c0104df1:	83 45 f0 24          	addl   $0x24,-0x10(%ebp)
c0104df5:	8b 55 0c             	mov    0xc(%ebp),%edx
c0104df8:	89 d0                	mov    %edx,%eax
c0104dfa:	c1 e0 03             	shl    $0x3,%eax
c0104dfd:	01 d0                	add    %edx,%eax
c0104dff:	c1 e0 02             	shl    $0x2,%eax
c0104e02:	89 c2                	mov    %eax,%edx
c0104e04:	8b 45 08             	mov    0x8(%ebp),%eax
c0104e07:	01 d0                	add    %edx,%eax
c0104e09:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0104e0c:	77 9c                	ja     c0104daa <default_free_pages+0xbc>
      list_add_before(le, &(p->page_link));
    }
    base->flags = 0;
c0104e0e:	8b 45 08             	mov    0x8(%ebp),%eax
c0104e11:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    set_page_ref(base, 0);
c0104e18:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0104e1f:	00 
c0104e20:	8b 45 08             	mov    0x8(%ebp),%eax
c0104e23:	89 04 24             	mov    %eax,(%esp)
c0104e26:	e8 bd fb ff ff       	call   c01049e8 <set_page_ref>
    ClearPageProperty(base);
c0104e2b:	8b 45 08             	mov    0x8(%ebp),%eax
c0104e2e:	83 c0 04             	add    $0x4,%eax
c0104e31:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
c0104e38:	89 45 c4             	mov    %eax,-0x3c(%ebp)
 * @nr:     the bit to clear
 * @addr:   the address to start counting from
 * */
static inline void
clear_bit(int nr, volatile void *addr) {
    asm volatile ("btrl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c0104e3b:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0104e3e:	8b 55 c8             	mov    -0x38(%ebp),%edx
c0104e41:	0f b3 10             	btr    %edx,(%eax)
    SetPageProperty(base);
c0104e44:	8b 45 08             	mov    0x8(%ebp),%eax
c0104e47:	83 c0 04             	add    $0x4,%eax
c0104e4a:	c7 45 c0 01 00 00 00 	movl   $0x1,-0x40(%ebp)
c0104e51:	89 45 bc             	mov    %eax,-0x44(%ebp)
 * Note that @nr may be almost arbitrarily large; this function is not
 * restricted to acting on a single-word quantity.
 * */
static inline void
set_bit(int nr, volatile void *addr) {
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c0104e54:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0104e57:	8b 55 c0             	mov    -0x40(%ebp),%edx
c0104e5a:	0f ab 10             	bts    %edx,(%eax)
    base->property = n;
c0104e5d:	8b 45 08             	mov    0x8(%ebp),%eax
c0104e60:	8b 55 0c             	mov    0xc(%ebp),%edx
c0104e63:	89 50 08             	mov    %edx,0x8(%eax)
    
    p = le2page(le,page_link) ;
c0104e66:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104e69:	83 e8 10             	sub    $0x10,%eax
c0104e6c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if( base+n == p ){
c0104e6f:	8b 55 0c             	mov    0xc(%ebp),%edx
c0104e72:	89 d0                	mov    %edx,%eax
c0104e74:	c1 e0 03             	shl    $0x3,%eax
c0104e77:	01 d0                	add    %edx,%eax
c0104e79:	c1 e0 02             	shl    $0x2,%eax
c0104e7c:	89 c2                	mov    %eax,%edx
c0104e7e:	8b 45 08             	mov    0x8(%ebp),%eax
c0104e81:	01 d0                	add    %edx,%eax
c0104e83:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0104e86:	75 1e                	jne    c0104ea6 <default_free_pages+0x1b8>
      base->property += p->property;
c0104e88:	8b 45 08             	mov    0x8(%ebp),%eax
c0104e8b:	8b 50 08             	mov    0x8(%eax),%edx
c0104e8e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104e91:	8b 40 08             	mov    0x8(%eax),%eax
c0104e94:	01 c2                	add    %eax,%edx
c0104e96:	8b 45 08             	mov    0x8(%ebp),%eax
c0104e99:	89 50 08             	mov    %edx,0x8(%eax)
      p->property = 0;
c0104e9c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104e9f:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
    }
    le = list_prev(&(base->page_link));
c0104ea6:	8b 45 08             	mov    0x8(%ebp),%eax
c0104ea9:	83 c0 10             	add    $0x10,%eax
c0104eac:	89 45 b8             	mov    %eax,-0x48(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c0104eaf:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0104eb2:	8b 00                	mov    (%eax),%eax
c0104eb4:	89 45 f4             	mov    %eax,-0xc(%ebp)
    p = le2page(le, page_link);
c0104eb7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104eba:	83 e8 10             	sub    $0x10,%eax
c0104ebd:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if(le!=&free_list && p==base-1){
c0104ec0:	81 7d f4 bc 2f 1a c0 	cmpl   $0xc01a2fbc,-0xc(%ebp)
c0104ec7:	74 57                	je     c0104f20 <default_free_pages+0x232>
c0104ec9:	8b 45 08             	mov    0x8(%ebp),%eax
c0104ecc:	83 e8 24             	sub    $0x24,%eax
c0104ecf:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0104ed2:	75 4c                	jne    c0104f20 <default_free_pages+0x232>
      while(le!=&free_list){
c0104ed4:	eb 41                	jmp    c0104f17 <default_free_pages+0x229>
        if(p->property){
c0104ed6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104ed9:	8b 40 08             	mov    0x8(%eax),%eax
c0104edc:	85 c0                	test   %eax,%eax
c0104ede:	74 20                	je     c0104f00 <default_free_pages+0x212>
          p->property += base->property;
c0104ee0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104ee3:	8b 50 08             	mov    0x8(%eax),%edx
c0104ee6:	8b 45 08             	mov    0x8(%ebp),%eax
c0104ee9:	8b 40 08             	mov    0x8(%eax),%eax
c0104eec:	01 c2                	add    %eax,%edx
c0104eee:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104ef1:	89 50 08             	mov    %edx,0x8(%eax)
          base->property = 0;
c0104ef4:	8b 45 08             	mov    0x8(%ebp),%eax
c0104ef7:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
          break;
c0104efe:	eb 20                	jmp    c0104f20 <default_free_pages+0x232>
c0104f00:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104f03:	89 45 b4             	mov    %eax,-0x4c(%ebp)
c0104f06:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0104f09:	8b 00                	mov    (%eax),%eax
        }
        le = list_prev(le);
c0104f0b:	89 45 f4             	mov    %eax,-0xc(%ebp)
        p = le2page(le,page_link);
c0104f0e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104f11:	83 e8 10             	sub    $0x10,%eax
c0104f14:	89 45 f0             	mov    %eax,-0x10(%ebp)
      p->property = 0;
    }
    le = list_prev(&(base->page_link));
    p = le2page(le, page_link);
    if(le!=&free_list && p==base-1){
      while(le!=&free_list){
c0104f17:	81 7d f4 bc 2f 1a c0 	cmpl   $0xc01a2fbc,-0xc(%ebp)
c0104f1e:	75 b6                	jne    c0104ed6 <default_free_pages+0x1e8>
        le = list_prev(le);
        p = le2page(le,page_link);
      }
    }

    nr_free += n;
c0104f20:	8b 15 c4 2f 1a c0    	mov    0xc01a2fc4,%edx
c0104f26:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104f29:	01 d0                	add    %edx,%eax
c0104f2b:	a3 c4 2f 1a c0       	mov    %eax,0xc01a2fc4
    return ;
c0104f30:	90                   	nop
}
c0104f31:	c9                   	leave  
c0104f32:	c3                   	ret    

c0104f33 <default_nr_free_pages>:

static size_t
default_nr_free_pages(void) {
c0104f33:	55                   	push   %ebp
c0104f34:	89 e5                	mov    %esp,%ebp
    return nr_free;
c0104f36:	a1 c4 2f 1a c0       	mov    0xc01a2fc4,%eax
}
c0104f3b:	5d                   	pop    %ebp
c0104f3c:	c3                   	ret    

c0104f3d <basic_check>:

static void
basic_check(void) {
c0104f3d:	55                   	push   %ebp
c0104f3e:	89 e5                	mov    %esp,%ebp
c0104f40:	83 ec 48             	sub    $0x48,%esp
    struct Page *p0, *p1, *p2;
    p0 = p1 = p2 = NULL;
c0104f43:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0104f4a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104f4d:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0104f50:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104f53:	89 45 ec             	mov    %eax,-0x14(%ebp)
    assert((p0 = alloc_page()) != NULL);
c0104f56:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0104f5d:	e8 47 16 00 00       	call   c01065a9 <alloc_pages>
c0104f62:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0104f65:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0104f69:	75 24                	jne    c0104f8f <basic_check+0x52>
c0104f6b:	c7 44 24 0c e4 e0 10 	movl   $0xc010e0e4,0xc(%esp)
c0104f72:	c0 
c0104f73:	c7 44 24 08 96 e0 10 	movl   $0xc010e096,0x8(%esp)
c0104f7a:	c0 
c0104f7b:	c7 44 24 04 ad 00 00 	movl   $0xad,0x4(%esp)
c0104f82:	00 
c0104f83:	c7 04 24 ab e0 10 c0 	movl   $0xc010e0ab,(%esp)
c0104f8a:	e8 c9 d2 ff ff       	call   c0102258 <__panic>
    assert((p1 = alloc_page()) != NULL);
c0104f8f:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0104f96:	e8 0e 16 00 00       	call   c01065a9 <alloc_pages>
c0104f9b:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0104f9e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0104fa2:	75 24                	jne    c0104fc8 <basic_check+0x8b>
c0104fa4:	c7 44 24 0c 00 e1 10 	movl   $0xc010e100,0xc(%esp)
c0104fab:	c0 
c0104fac:	c7 44 24 08 96 e0 10 	movl   $0xc010e096,0x8(%esp)
c0104fb3:	c0 
c0104fb4:	c7 44 24 04 ae 00 00 	movl   $0xae,0x4(%esp)
c0104fbb:	00 
c0104fbc:	c7 04 24 ab e0 10 c0 	movl   $0xc010e0ab,(%esp)
c0104fc3:	e8 90 d2 ff ff       	call   c0102258 <__panic>
    assert((p2 = alloc_page()) != NULL);
c0104fc8:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0104fcf:	e8 d5 15 00 00       	call   c01065a9 <alloc_pages>
c0104fd4:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104fd7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0104fdb:	75 24                	jne    c0105001 <basic_check+0xc4>
c0104fdd:	c7 44 24 0c 1c e1 10 	movl   $0xc010e11c,0xc(%esp)
c0104fe4:	c0 
c0104fe5:	c7 44 24 08 96 e0 10 	movl   $0xc010e096,0x8(%esp)
c0104fec:	c0 
c0104fed:	c7 44 24 04 af 00 00 	movl   $0xaf,0x4(%esp)
c0104ff4:	00 
c0104ff5:	c7 04 24 ab e0 10 c0 	movl   $0xc010e0ab,(%esp)
c0104ffc:	e8 57 d2 ff ff       	call   c0102258 <__panic>

    assert(p0 != p1 && p0 != p2 && p1 != p2);
c0105001:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105004:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0105007:	74 10                	je     c0105019 <basic_check+0xdc>
c0105009:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010500c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c010500f:	74 08                	je     c0105019 <basic_check+0xdc>
c0105011:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105014:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0105017:	75 24                	jne    c010503d <basic_check+0x100>
c0105019:	c7 44 24 0c 38 e1 10 	movl   $0xc010e138,0xc(%esp)
c0105020:	c0 
c0105021:	c7 44 24 08 96 e0 10 	movl   $0xc010e096,0x8(%esp)
c0105028:	c0 
c0105029:	c7 44 24 04 b1 00 00 	movl   $0xb1,0x4(%esp)
c0105030:	00 
c0105031:	c7 04 24 ab e0 10 c0 	movl   $0xc010e0ab,(%esp)
c0105038:	e8 1b d2 ff ff       	call   c0102258 <__panic>
    assert(page_ref(p0) == 0 && page_ref(p1) == 0 && page_ref(p2) == 0);
c010503d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105040:	89 04 24             	mov    %eax,(%esp)
c0105043:	e8 96 f9 ff ff       	call   c01049de <page_ref>
c0105048:	85 c0                	test   %eax,%eax
c010504a:	75 1e                	jne    c010506a <basic_check+0x12d>
c010504c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010504f:	89 04 24             	mov    %eax,(%esp)
c0105052:	e8 87 f9 ff ff       	call   c01049de <page_ref>
c0105057:	85 c0                	test   %eax,%eax
c0105059:	75 0f                	jne    c010506a <basic_check+0x12d>
c010505b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010505e:	89 04 24             	mov    %eax,(%esp)
c0105061:	e8 78 f9 ff ff       	call   c01049de <page_ref>
c0105066:	85 c0                	test   %eax,%eax
c0105068:	74 24                	je     c010508e <basic_check+0x151>
c010506a:	c7 44 24 0c 5c e1 10 	movl   $0xc010e15c,0xc(%esp)
c0105071:	c0 
c0105072:	c7 44 24 08 96 e0 10 	movl   $0xc010e096,0x8(%esp)
c0105079:	c0 
c010507a:	c7 44 24 04 b2 00 00 	movl   $0xb2,0x4(%esp)
c0105081:	00 
c0105082:	c7 04 24 ab e0 10 c0 	movl   $0xc010e0ab,(%esp)
c0105089:	e8 ca d1 ff ff       	call   c0102258 <__panic>

    assert(page2pa(p0) < npage * PGSIZE);
c010508e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105091:	89 04 24             	mov    %eax,(%esp)
c0105094:	e8 2f f9 ff ff       	call   c01049c8 <page2pa>
c0105099:	8b 15 e0 0e 1a c0    	mov    0xc01a0ee0,%edx
c010509f:	c1 e2 0c             	shl    $0xc,%edx
c01050a2:	39 d0                	cmp    %edx,%eax
c01050a4:	72 24                	jb     c01050ca <basic_check+0x18d>
c01050a6:	c7 44 24 0c 98 e1 10 	movl   $0xc010e198,0xc(%esp)
c01050ad:	c0 
c01050ae:	c7 44 24 08 96 e0 10 	movl   $0xc010e096,0x8(%esp)
c01050b5:	c0 
c01050b6:	c7 44 24 04 b4 00 00 	movl   $0xb4,0x4(%esp)
c01050bd:	00 
c01050be:	c7 04 24 ab e0 10 c0 	movl   $0xc010e0ab,(%esp)
c01050c5:	e8 8e d1 ff ff       	call   c0102258 <__panic>
    assert(page2pa(p1) < npage * PGSIZE);
c01050ca:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01050cd:	89 04 24             	mov    %eax,(%esp)
c01050d0:	e8 f3 f8 ff ff       	call   c01049c8 <page2pa>
c01050d5:	8b 15 e0 0e 1a c0    	mov    0xc01a0ee0,%edx
c01050db:	c1 e2 0c             	shl    $0xc,%edx
c01050de:	39 d0                	cmp    %edx,%eax
c01050e0:	72 24                	jb     c0105106 <basic_check+0x1c9>
c01050e2:	c7 44 24 0c b5 e1 10 	movl   $0xc010e1b5,0xc(%esp)
c01050e9:	c0 
c01050ea:	c7 44 24 08 96 e0 10 	movl   $0xc010e096,0x8(%esp)
c01050f1:	c0 
c01050f2:	c7 44 24 04 b5 00 00 	movl   $0xb5,0x4(%esp)
c01050f9:	00 
c01050fa:	c7 04 24 ab e0 10 c0 	movl   $0xc010e0ab,(%esp)
c0105101:	e8 52 d1 ff ff       	call   c0102258 <__panic>
    assert(page2pa(p2) < npage * PGSIZE);
c0105106:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105109:	89 04 24             	mov    %eax,(%esp)
c010510c:	e8 b7 f8 ff ff       	call   c01049c8 <page2pa>
c0105111:	8b 15 e0 0e 1a c0    	mov    0xc01a0ee0,%edx
c0105117:	c1 e2 0c             	shl    $0xc,%edx
c010511a:	39 d0                	cmp    %edx,%eax
c010511c:	72 24                	jb     c0105142 <basic_check+0x205>
c010511e:	c7 44 24 0c d2 e1 10 	movl   $0xc010e1d2,0xc(%esp)
c0105125:	c0 
c0105126:	c7 44 24 08 96 e0 10 	movl   $0xc010e096,0x8(%esp)
c010512d:	c0 
c010512e:	c7 44 24 04 b6 00 00 	movl   $0xb6,0x4(%esp)
c0105135:	00 
c0105136:	c7 04 24 ab e0 10 c0 	movl   $0xc010e0ab,(%esp)
c010513d:	e8 16 d1 ff ff       	call   c0102258 <__panic>

    list_entry_t free_list_store = free_list;
c0105142:	a1 bc 2f 1a c0       	mov    0xc01a2fbc,%eax
c0105147:	8b 15 c0 2f 1a c0    	mov    0xc01a2fc0,%edx
c010514d:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0105150:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c0105153:	c7 45 e0 bc 2f 1a c0 	movl   $0xc01a2fbc,-0x20(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010515a:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010515d:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0105160:	89 50 04             	mov    %edx,0x4(%eax)
c0105163:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105166:	8b 50 04             	mov    0x4(%eax),%edx
c0105169:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010516c:	89 10                	mov    %edx,(%eax)
c010516e:	c7 45 dc bc 2f 1a c0 	movl   $0xc01a2fbc,-0x24(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0105175:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0105178:	8b 40 04             	mov    0x4(%eax),%eax
c010517b:	39 45 dc             	cmp    %eax,-0x24(%ebp)
c010517e:	0f 94 c0             	sete   %al
c0105181:	0f b6 c0             	movzbl %al,%eax
    list_init(&free_list);
    assert(list_empty(&free_list));
c0105184:	85 c0                	test   %eax,%eax
c0105186:	75 24                	jne    c01051ac <basic_check+0x26f>
c0105188:	c7 44 24 0c ef e1 10 	movl   $0xc010e1ef,0xc(%esp)
c010518f:	c0 
c0105190:	c7 44 24 08 96 e0 10 	movl   $0xc010e096,0x8(%esp)
c0105197:	c0 
c0105198:	c7 44 24 04 ba 00 00 	movl   $0xba,0x4(%esp)
c010519f:	00 
c01051a0:	c7 04 24 ab e0 10 c0 	movl   $0xc010e0ab,(%esp)
c01051a7:	e8 ac d0 ff ff       	call   c0102258 <__panic>

    unsigned int nr_free_store = nr_free;
c01051ac:	a1 c4 2f 1a c0       	mov    0xc01a2fc4,%eax
c01051b1:	89 45 e8             	mov    %eax,-0x18(%ebp)
    nr_free = 0;
c01051b4:	c7 05 c4 2f 1a c0 00 	movl   $0x0,0xc01a2fc4
c01051bb:	00 00 00 

    assert(alloc_page() == NULL);
c01051be:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01051c5:	e8 df 13 00 00       	call   c01065a9 <alloc_pages>
c01051ca:	85 c0                	test   %eax,%eax
c01051cc:	74 24                	je     c01051f2 <basic_check+0x2b5>
c01051ce:	c7 44 24 0c 06 e2 10 	movl   $0xc010e206,0xc(%esp)
c01051d5:	c0 
c01051d6:	c7 44 24 08 96 e0 10 	movl   $0xc010e096,0x8(%esp)
c01051dd:	c0 
c01051de:	c7 44 24 04 bf 00 00 	movl   $0xbf,0x4(%esp)
c01051e5:	00 
c01051e6:	c7 04 24 ab e0 10 c0 	movl   $0xc010e0ab,(%esp)
c01051ed:	e8 66 d0 ff ff       	call   c0102258 <__panic>

    free_page(p0);
c01051f2:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01051f9:	00 
c01051fa:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01051fd:	89 04 24             	mov    %eax,(%esp)
c0105200:	e8 20 14 00 00       	call   c0106625 <free_pages>
    free_page(p1);
c0105205:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010520c:	00 
c010520d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105210:	89 04 24             	mov    %eax,(%esp)
c0105213:	e8 0d 14 00 00       	call   c0106625 <free_pages>
    free_page(p2);
c0105218:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010521f:	00 
c0105220:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105223:	89 04 24             	mov    %eax,(%esp)
c0105226:	e8 fa 13 00 00       	call   c0106625 <free_pages>
    assert(nr_free == 3);
c010522b:	a1 c4 2f 1a c0       	mov    0xc01a2fc4,%eax
c0105230:	83 f8 03             	cmp    $0x3,%eax
c0105233:	74 24                	je     c0105259 <basic_check+0x31c>
c0105235:	c7 44 24 0c 1b e2 10 	movl   $0xc010e21b,0xc(%esp)
c010523c:	c0 
c010523d:	c7 44 24 08 96 e0 10 	movl   $0xc010e096,0x8(%esp)
c0105244:	c0 
c0105245:	c7 44 24 04 c4 00 00 	movl   $0xc4,0x4(%esp)
c010524c:	00 
c010524d:	c7 04 24 ab e0 10 c0 	movl   $0xc010e0ab,(%esp)
c0105254:	e8 ff cf ff ff       	call   c0102258 <__panic>

    assert((p0 = alloc_page()) != NULL);
c0105259:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0105260:	e8 44 13 00 00       	call   c01065a9 <alloc_pages>
c0105265:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0105268:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010526c:	75 24                	jne    c0105292 <basic_check+0x355>
c010526e:	c7 44 24 0c e4 e0 10 	movl   $0xc010e0e4,0xc(%esp)
c0105275:	c0 
c0105276:	c7 44 24 08 96 e0 10 	movl   $0xc010e096,0x8(%esp)
c010527d:	c0 
c010527e:	c7 44 24 04 c6 00 00 	movl   $0xc6,0x4(%esp)
c0105285:	00 
c0105286:	c7 04 24 ab e0 10 c0 	movl   $0xc010e0ab,(%esp)
c010528d:	e8 c6 cf ff ff       	call   c0102258 <__panic>
    assert((p1 = alloc_page()) != NULL);
c0105292:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0105299:	e8 0b 13 00 00       	call   c01065a9 <alloc_pages>
c010529e:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01052a1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01052a5:	75 24                	jne    c01052cb <basic_check+0x38e>
c01052a7:	c7 44 24 0c 00 e1 10 	movl   $0xc010e100,0xc(%esp)
c01052ae:	c0 
c01052af:	c7 44 24 08 96 e0 10 	movl   $0xc010e096,0x8(%esp)
c01052b6:	c0 
c01052b7:	c7 44 24 04 c7 00 00 	movl   $0xc7,0x4(%esp)
c01052be:	00 
c01052bf:	c7 04 24 ab e0 10 c0 	movl   $0xc010e0ab,(%esp)
c01052c6:	e8 8d cf ff ff       	call   c0102258 <__panic>
    assert((p2 = alloc_page()) != NULL);
c01052cb:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01052d2:	e8 d2 12 00 00       	call   c01065a9 <alloc_pages>
c01052d7:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01052da:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01052de:	75 24                	jne    c0105304 <basic_check+0x3c7>
c01052e0:	c7 44 24 0c 1c e1 10 	movl   $0xc010e11c,0xc(%esp)
c01052e7:	c0 
c01052e8:	c7 44 24 08 96 e0 10 	movl   $0xc010e096,0x8(%esp)
c01052ef:	c0 
c01052f0:	c7 44 24 04 c8 00 00 	movl   $0xc8,0x4(%esp)
c01052f7:	00 
c01052f8:	c7 04 24 ab e0 10 c0 	movl   $0xc010e0ab,(%esp)
c01052ff:	e8 54 cf ff ff       	call   c0102258 <__panic>

    assert(alloc_page() == NULL);
c0105304:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010530b:	e8 99 12 00 00       	call   c01065a9 <alloc_pages>
c0105310:	85 c0                	test   %eax,%eax
c0105312:	74 24                	je     c0105338 <basic_check+0x3fb>
c0105314:	c7 44 24 0c 06 e2 10 	movl   $0xc010e206,0xc(%esp)
c010531b:	c0 
c010531c:	c7 44 24 08 96 e0 10 	movl   $0xc010e096,0x8(%esp)
c0105323:	c0 
c0105324:	c7 44 24 04 ca 00 00 	movl   $0xca,0x4(%esp)
c010532b:	00 
c010532c:	c7 04 24 ab e0 10 c0 	movl   $0xc010e0ab,(%esp)
c0105333:	e8 20 cf ff ff       	call   c0102258 <__panic>

    free_page(p0);
c0105338:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010533f:	00 
c0105340:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105343:	89 04 24             	mov    %eax,(%esp)
c0105346:	e8 da 12 00 00       	call   c0106625 <free_pages>
c010534b:	c7 45 d8 bc 2f 1a c0 	movl   $0xc01a2fbc,-0x28(%ebp)
c0105352:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0105355:	8b 40 04             	mov    0x4(%eax),%eax
c0105358:	39 45 d8             	cmp    %eax,-0x28(%ebp)
c010535b:	0f 94 c0             	sete   %al
c010535e:	0f b6 c0             	movzbl %al,%eax
    assert(!list_empty(&free_list));
c0105361:	85 c0                	test   %eax,%eax
c0105363:	74 24                	je     c0105389 <basic_check+0x44c>
c0105365:	c7 44 24 0c 28 e2 10 	movl   $0xc010e228,0xc(%esp)
c010536c:	c0 
c010536d:	c7 44 24 08 96 e0 10 	movl   $0xc010e096,0x8(%esp)
c0105374:	c0 
c0105375:	c7 44 24 04 cd 00 00 	movl   $0xcd,0x4(%esp)
c010537c:	00 
c010537d:	c7 04 24 ab e0 10 c0 	movl   $0xc010e0ab,(%esp)
c0105384:	e8 cf ce ff ff       	call   c0102258 <__panic>

    struct Page *p;
    assert((p = alloc_page()) == p0);
c0105389:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0105390:	e8 14 12 00 00       	call   c01065a9 <alloc_pages>
c0105395:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0105398:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010539b:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c010539e:	74 24                	je     c01053c4 <basic_check+0x487>
c01053a0:	c7 44 24 0c 40 e2 10 	movl   $0xc010e240,0xc(%esp)
c01053a7:	c0 
c01053a8:	c7 44 24 08 96 e0 10 	movl   $0xc010e096,0x8(%esp)
c01053af:	c0 
c01053b0:	c7 44 24 04 d0 00 00 	movl   $0xd0,0x4(%esp)
c01053b7:	00 
c01053b8:	c7 04 24 ab e0 10 c0 	movl   $0xc010e0ab,(%esp)
c01053bf:	e8 94 ce ff ff       	call   c0102258 <__panic>
    assert(alloc_page() == NULL);
c01053c4:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01053cb:	e8 d9 11 00 00       	call   c01065a9 <alloc_pages>
c01053d0:	85 c0                	test   %eax,%eax
c01053d2:	74 24                	je     c01053f8 <basic_check+0x4bb>
c01053d4:	c7 44 24 0c 06 e2 10 	movl   $0xc010e206,0xc(%esp)
c01053db:	c0 
c01053dc:	c7 44 24 08 96 e0 10 	movl   $0xc010e096,0x8(%esp)
c01053e3:	c0 
c01053e4:	c7 44 24 04 d1 00 00 	movl   $0xd1,0x4(%esp)
c01053eb:	00 
c01053ec:	c7 04 24 ab e0 10 c0 	movl   $0xc010e0ab,(%esp)
c01053f3:	e8 60 ce ff ff       	call   c0102258 <__panic>

    assert(nr_free == 0);
c01053f8:	a1 c4 2f 1a c0       	mov    0xc01a2fc4,%eax
c01053fd:	85 c0                	test   %eax,%eax
c01053ff:	74 24                	je     c0105425 <basic_check+0x4e8>
c0105401:	c7 44 24 0c 59 e2 10 	movl   $0xc010e259,0xc(%esp)
c0105408:	c0 
c0105409:	c7 44 24 08 96 e0 10 	movl   $0xc010e096,0x8(%esp)
c0105410:	c0 
c0105411:	c7 44 24 04 d3 00 00 	movl   $0xd3,0x4(%esp)
c0105418:	00 
c0105419:	c7 04 24 ab e0 10 c0 	movl   $0xc010e0ab,(%esp)
c0105420:	e8 33 ce ff ff       	call   c0102258 <__panic>
    free_list = free_list_store;
c0105425:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0105428:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010542b:	a3 bc 2f 1a c0       	mov    %eax,0xc01a2fbc
c0105430:	89 15 c0 2f 1a c0    	mov    %edx,0xc01a2fc0
    nr_free = nr_free_store;
c0105436:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105439:	a3 c4 2f 1a c0       	mov    %eax,0xc01a2fc4

    free_page(p);
c010543e:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0105445:	00 
c0105446:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105449:	89 04 24             	mov    %eax,(%esp)
c010544c:	e8 d4 11 00 00       	call   c0106625 <free_pages>
    free_page(p1);
c0105451:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0105458:	00 
c0105459:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010545c:	89 04 24             	mov    %eax,(%esp)
c010545f:	e8 c1 11 00 00       	call   c0106625 <free_pages>
    free_page(p2);
c0105464:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010546b:	00 
c010546c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010546f:	89 04 24             	mov    %eax,(%esp)
c0105472:	e8 ae 11 00 00       	call   c0106625 <free_pages>
}
c0105477:	c9                   	leave  
c0105478:	c3                   	ret    

c0105479 <default_check>:

// LAB2: below code is used to check the first fit allocation algorithm (your EXERCISE 1) 
// NOTICE: You SHOULD NOT CHANGE basic_check, default_check functions!
static void
default_check(void) {
c0105479:	55                   	push   %ebp
c010547a:	89 e5                	mov    %esp,%ebp
c010547c:	53                   	push   %ebx
c010547d:	81 ec 94 00 00 00    	sub    $0x94,%esp
    int count = 0, total = 0;
c0105483:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010548a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    list_entry_t *le = &free_list;
c0105491:	c7 45 ec bc 2f 1a c0 	movl   $0xc01a2fbc,-0x14(%ebp)
    while ((le = list_next(le)) != &free_list) {
c0105498:	eb 6b                	jmp    c0105505 <default_check+0x8c>
        struct Page *p = le2page(le, page_link);
c010549a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010549d:	83 e8 10             	sub    $0x10,%eax
c01054a0:	89 45 e8             	mov    %eax,-0x18(%ebp)
        assert(PageProperty(p));
c01054a3:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01054a6:	83 c0 04             	add    $0x4,%eax
c01054a9:	c7 45 d0 01 00 00 00 	movl   $0x1,-0x30(%ebp)
c01054b0:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c01054b3:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01054b6:	8b 55 d0             	mov    -0x30(%ebp),%edx
c01054b9:	0f a3 10             	bt     %edx,(%eax)
c01054bc:	19 c0                	sbb    %eax,%eax
c01054be:	89 45 c8             	mov    %eax,-0x38(%ebp)
    return oldbit != 0;
c01054c1:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
c01054c5:	0f 95 c0             	setne  %al
c01054c8:	0f b6 c0             	movzbl %al,%eax
c01054cb:	85 c0                	test   %eax,%eax
c01054cd:	75 24                	jne    c01054f3 <default_check+0x7a>
c01054cf:	c7 44 24 0c 66 e2 10 	movl   $0xc010e266,0xc(%esp)
c01054d6:	c0 
c01054d7:	c7 44 24 08 96 e0 10 	movl   $0xc010e096,0x8(%esp)
c01054de:	c0 
c01054df:	c7 44 24 04 e4 00 00 	movl   $0xe4,0x4(%esp)
c01054e6:	00 
c01054e7:	c7 04 24 ab e0 10 c0 	movl   $0xc010e0ab,(%esp)
c01054ee:	e8 65 cd ff ff       	call   c0102258 <__panic>
        count ++, total += p->property;
c01054f3:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01054f7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01054fa:	8b 50 08             	mov    0x8(%eax),%edx
c01054fd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105500:	01 d0                	add    %edx,%eax
c0105502:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0105505:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105508:	89 45 c4             	mov    %eax,-0x3c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010550b:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010550e:	8b 40 04             	mov    0x4(%eax),%eax
// NOTICE: You SHOULD NOT CHANGE basic_check, default_check functions!
static void
default_check(void) {
    int count = 0, total = 0;
    list_entry_t *le = &free_list;
    while ((le = list_next(le)) != &free_list) {
c0105511:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0105514:	81 7d ec bc 2f 1a c0 	cmpl   $0xc01a2fbc,-0x14(%ebp)
c010551b:	0f 85 79 ff ff ff    	jne    c010549a <default_check+0x21>
        struct Page *p = le2page(le, page_link);
        assert(PageProperty(p));
        count ++, total += p->property;
    }
    assert(total == nr_free_pages());
c0105521:	8b 5d f0             	mov    -0x10(%ebp),%ebx
c0105524:	e8 3b 11 00 00       	call   c0106664 <nr_free_pages>
c0105529:	39 c3                	cmp    %eax,%ebx
c010552b:	74 24                	je     c0105551 <default_check+0xd8>
c010552d:	c7 44 24 0c 76 e2 10 	movl   $0xc010e276,0xc(%esp)
c0105534:	c0 
c0105535:	c7 44 24 08 96 e0 10 	movl   $0xc010e096,0x8(%esp)
c010553c:	c0 
c010553d:	c7 44 24 04 e7 00 00 	movl   $0xe7,0x4(%esp)
c0105544:	00 
c0105545:	c7 04 24 ab e0 10 c0 	movl   $0xc010e0ab,(%esp)
c010554c:	e8 07 cd ff ff       	call   c0102258 <__panic>

    basic_check();
c0105551:	e8 e7 f9 ff ff       	call   c0104f3d <basic_check>

    struct Page *p0 = alloc_pages(5), *p1, *p2;
c0105556:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
c010555d:	e8 47 10 00 00       	call   c01065a9 <alloc_pages>
c0105562:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    assert(p0 != NULL);
c0105565:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0105569:	75 24                	jne    c010558f <default_check+0x116>
c010556b:	c7 44 24 0c 8f e2 10 	movl   $0xc010e28f,0xc(%esp)
c0105572:	c0 
c0105573:	c7 44 24 08 96 e0 10 	movl   $0xc010e096,0x8(%esp)
c010557a:	c0 
c010557b:	c7 44 24 04 ec 00 00 	movl   $0xec,0x4(%esp)
c0105582:	00 
c0105583:	c7 04 24 ab e0 10 c0 	movl   $0xc010e0ab,(%esp)
c010558a:	e8 c9 cc ff ff       	call   c0102258 <__panic>
    assert(!PageProperty(p0));
c010558f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105592:	83 c0 04             	add    $0x4,%eax
c0105595:	c7 45 c0 01 00 00 00 	movl   $0x1,-0x40(%ebp)
c010559c:	89 45 bc             	mov    %eax,-0x44(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c010559f:	8b 45 bc             	mov    -0x44(%ebp),%eax
c01055a2:	8b 55 c0             	mov    -0x40(%ebp),%edx
c01055a5:	0f a3 10             	bt     %edx,(%eax)
c01055a8:	19 c0                	sbb    %eax,%eax
c01055aa:	89 45 b8             	mov    %eax,-0x48(%ebp)
    return oldbit != 0;
c01055ad:	83 7d b8 00          	cmpl   $0x0,-0x48(%ebp)
c01055b1:	0f 95 c0             	setne  %al
c01055b4:	0f b6 c0             	movzbl %al,%eax
c01055b7:	85 c0                	test   %eax,%eax
c01055b9:	74 24                	je     c01055df <default_check+0x166>
c01055bb:	c7 44 24 0c 9a e2 10 	movl   $0xc010e29a,0xc(%esp)
c01055c2:	c0 
c01055c3:	c7 44 24 08 96 e0 10 	movl   $0xc010e096,0x8(%esp)
c01055ca:	c0 
c01055cb:	c7 44 24 04 ed 00 00 	movl   $0xed,0x4(%esp)
c01055d2:	00 
c01055d3:	c7 04 24 ab e0 10 c0 	movl   $0xc010e0ab,(%esp)
c01055da:	e8 79 cc ff ff       	call   c0102258 <__panic>

    list_entry_t free_list_store = free_list;
c01055df:	a1 bc 2f 1a c0       	mov    0xc01a2fbc,%eax
c01055e4:	8b 15 c0 2f 1a c0    	mov    0xc01a2fc0,%edx
c01055ea:	89 45 80             	mov    %eax,-0x80(%ebp)
c01055ed:	89 55 84             	mov    %edx,-0x7c(%ebp)
c01055f0:	c7 45 b4 bc 2f 1a c0 	movl   $0xc01a2fbc,-0x4c(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c01055f7:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c01055fa:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c01055fd:	89 50 04             	mov    %edx,0x4(%eax)
c0105600:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0105603:	8b 50 04             	mov    0x4(%eax),%edx
c0105606:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0105609:	89 10                	mov    %edx,(%eax)
c010560b:	c7 45 b0 bc 2f 1a c0 	movl   $0xc01a2fbc,-0x50(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0105612:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0105615:	8b 40 04             	mov    0x4(%eax),%eax
c0105618:	39 45 b0             	cmp    %eax,-0x50(%ebp)
c010561b:	0f 94 c0             	sete   %al
c010561e:	0f b6 c0             	movzbl %al,%eax
    list_init(&free_list);
    assert(list_empty(&free_list));
c0105621:	85 c0                	test   %eax,%eax
c0105623:	75 24                	jne    c0105649 <default_check+0x1d0>
c0105625:	c7 44 24 0c ef e1 10 	movl   $0xc010e1ef,0xc(%esp)
c010562c:	c0 
c010562d:	c7 44 24 08 96 e0 10 	movl   $0xc010e096,0x8(%esp)
c0105634:	c0 
c0105635:	c7 44 24 04 f1 00 00 	movl   $0xf1,0x4(%esp)
c010563c:	00 
c010563d:	c7 04 24 ab e0 10 c0 	movl   $0xc010e0ab,(%esp)
c0105644:	e8 0f cc ff ff       	call   c0102258 <__panic>
    assert(alloc_page() == NULL);
c0105649:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0105650:	e8 54 0f 00 00       	call   c01065a9 <alloc_pages>
c0105655:	85 c0                	test   %eax,%eax
c0105657:	74 24                	je     c010567d <default_check+0x204>
c0105659:	c7 44 24 0c 06 e2 10 	movl   $0xc010e206,0xc(%esp)
c0105660:	c0 
c0105661:	c7 44 24 08 96 e0 10 	movl   $0xc010e096,0x8(%esp)
c0105668:	c0 
c0105669:	c7 44 24 04 f2 00 00 	movl   $0xf2,0x4(%esp)
c0105670:	00 
c0105671:	c7 04 24 ab e0 10 c0 	movl   $0xc010e0ab,(%esp)
c0105678:	e8 db cb ff ff       	call   c0102258 <__panic>

    unsigned int nr_free_store = nr_free;
c010567d:	a1 c4 2f 1a c0       	mov    0xc01a2fc4,%eax
c0105682:	89 45 e0             	mov    %eax,-0x20(%ebp)
    nr_free = 0;
c0105685:	c7 05 c4 2f 1a c0 00 	movl   $0x0,0xc01a2fc4
c010568c:	00 00 00 

    free_pages(p0 + 2, 3);
c010568f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105692:	83 c0 48             	add    $0x48,%eax
c0105695:	c7 44 24 04 03 00 00 	movl   $0x3,0x4(%esp)
c010569c:	00 
c010569d:	89 04 24             	mov    %eax,(%esp)
c01056a0:	e8 80 0f 00 00       	call   c0106625 <free_pages>
    assert(alloc_pages(4) == NULL);
c01056a5:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
c01056ac:	e8 f8 0e 00 00       	call   c01065a9 <alloc_pages>
c01056b1:	85 c0                	test   %eax,%eax
c01056b3:	74 24                	je     c01056d9 <default_check+0x260>
c01056b5:	c7 44 24 0c ac e2 10 	movl   $0xc010e2ac,0xc(%esp)
c01056bc:	c0 
c01056bd:	c7 44 24 08 96 e0 10 	movl   $0xc010e096,0x8(%esp)
c01056c4:	c0 
c01056c5:	c7 44 24 04 f8 00 00 	movl   $0xf8,0x4(%esp)
c01056cc:	00 
c01056cd:	c7 04 24 ab e0 10 c0 	movl   $0xc010e0ab,(%esp)
c01056d4:	e8 7f cb ff ff       	call   c0102258 <__panic>
    assert(PageProperty(p0 + 2) && p0[2].property == 3);
c01056d9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01056dc:	83 c0 48             	add    $0x48,%eax
c01056df:	83 c0 04             	add    $0x4,%eax
c01056e2:	c7 45 ac 01 00 00 00 	movl   $0x1,-0x54(%ebp)
c01056e9:	89 45 a8             	mov    %eax,-0x58(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c01056ec:	8b 45 a8             	mov    -0x58(%ebp),%eax
c01056ef:	8b 55 ac             	mov    -0x54(%ebp),%edx
c01056f2:	0f a3 10             	bt     %edx,(%eax)
c01056f5:	19 c0                	sbb    %eax,%eax
c01056f7:	89 45 a4             	mov    %eax,-0x5c(%ebp)
    return oldbit != 0;
c01056fa:	83 7d a4 00          	cmpl   $0x0,-0x5c(%ebp)
c01056fe:	0f 95 c0             	setne  %al
c0105701:	0f b6 c0             	movzbl %al,%eax
c0105704:	85 c0                	test   %eax,%eax
c0105706:	74 0e                	je     c0105716 <default_check+0x29d>
c0105708:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010570b:	83 c0 48             	add    $0x48,%eax
c010570e:	8b 40 08             	mov    0x8(%eax),%eax
c0105711:	83 f8 03             	cmp    $0x3,%eax
c0105714:	74 24                	je     c010573a <default_check+0x2c1>
c0105716:	c7 44 24 0c c4 e2 10 	movl   $0xc010e2c4,0xc(%esp)
c010571d:	c0 
c010571e:	c7 44 24 08 96 e0 10 	movl   $0xc010e096,0x8(%esp)
c0105725:	c0 
c0105726:	c7 44 24 04 f9 00 00 	movl   $0xf9,0x4(%esp)
c010572d:	00 
c010572e:	c7 04 24 ab e0 10 c0 	movl   $0xc010e0ab,(%esp)
c0105735:	e8 1e cb ff ff       	call   c0102258 <__panic>
    assert((p1 = alloc_pages(3)) != NULL);
c010573a:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
c0105741:	e8 63 0e 00 00       	call   c01065a9 <alloc_pages>
c0105746:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0105749:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c010574d:	75 24                	jne    c0105773 <default_check+0x2fa>
c010574f:	c7 44 24 0c f0 e2 10 	movl   $0xc010e2f0,0xc(%esp)
c0105756:	c0 
c0105757:	c7 44 24 08 96 e0 10 	movl   $0xc010e096,0x8(%esp)
c010575e:	c0 
c010575f:	c7 44 24 04 fa 00 00 	movl   $0xfa,0x4(%esp)
c0105766:	00 
c0105767:	c7 04 24 ab e0 10 c0 	movl   $0xc010e0ab,(%esp)
c010576e:	e8 e5 ca ff ff       	call   c0102258 <__panic>
    assert(alloc_page() == NULL);
c0105773:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010577a:	e8 2a 0e 00 00       	call   c01065a9 <alloc_pages>
c010577f:	85 c0                	test   %eax,%eax
c0105781:	74 24                	je     c01057a7 <default_check+0x32e>
c0105783:	c7 44 24 0c 06 e2 10 	movl   $0xc010e206,0xc(%esp)
c010578a:	c0 
c010578b:	c7 44 24 08 96 e0 10 	movl   $0xc010e096,0x8(%esp)
c0105792:	c0 
c0105793:	c7 44 24 04 fb 00 00 	movl   $0xfb,0x4(%esp)
c010579a:	00 
c010579b:	c7 04 24 ab e0 10 c0 	movl   $0xc010e0ab,(%esp)
c01057a2:	e8 b1 ca ff ff       	call   c0102258 <__panic>
    assert(p0 + 2 == p1);
c01057a7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01057aa:	83 c0 48             	add    $0x48,%eax
c01057ad:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c01057b0:	74 24                	je     c01057d6 <default_check+0x35d>
c01057b2:	c7 44 24 0c 0e e3 10 	movl   $0xc010e30e,0xc(%esp)
c01057b9:	c0 
c01057ba:	c7 44 24 08 96 e0 10 	movl   $0xc010e096,0x8(%esp)
c01057c1:	c0 
c01057c2:	c7 44 24 04 fc 00 00 	movl   $0xfc,0x4(%esp)
c01057c9:	00 
c01057ca:	c7 04 24 ab e0 10 c0 	movl   $0xc010e0ab,(%esp)
c01057d1:	e8 82 ca ff ff       	call   c0102258 <__panic>

    p2 = p0 + 1;
c01057d6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01057d9:	83 c0 24             	add    $0x24,%eax
c01057dc:	89 45 d8             	mov    %eax,-0x28(%ebp)
    free_page(p0);
c01057df:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01057e6:	00 
c01057e7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01057ea:	89 04 24             	mov    %eax,(%esp)
c01057ed:	e8 33 0e 00 00       	call   c0106625 <free_pages>
    free_pages(p1, 3);
c01057f2:	c7 44 24 04 03 00 00 	movl   $0x3,0x4(%esp)
c01057f9:	00 
c01057fa:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01057fd:	89 04 24             	mov    %eax,(%esp)
c0105800:	e8 20 0e 00 00       	call   c0106625 <free_pages>
    assert(PageProperty(p0) && p0->property == 1);
c0105805:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105808:	83 c0 04             	add    $0x4,%eax
c010580b:	c7 45 a0 01 00 00 00 	movl   $0x1,-0x60(%ebp)
c0105812:	89 45 9c             	mov    %eax,-0x64(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0105815:	8b 45 9c             	mov    -0x64(%ebp),%eax
c0105818:	8b 55 a0             	mov    -0x60(%ebp),%edx
c010581b:	0f a3 10             	bt     %edx,(%eax)
c010581e:	19 c0                	sbb    %eax,%eax
c0105820:	89 45 98             	mov    %eax,-0x68(%ebp)
    return oldbit != 0;
c0105823:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
c0105827:	0f 95 c0             	setne  %al
c010582a:	0f b6 c0             	movzbl %al,%eax
c010582d:	85 c0                	test   %eax,%eax
c010582f:	74 0b                	je     c010583c <default_check+0x3c3>
c0105831:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105834:	8b 40 08             	mov    0x8(%eax),%eax
c0105837:	83 f8 01             	cmp    $0x1,%eax
c010583a:	74 24                	je     c0105860 <default_check+0x3e7>
c010583c:	c7 44 24 0c 1c e3 10 	movl   $0xc010e31c,0xc(%esp)
c0105843:	c0 
c0105844:	c7 44 24 08 96 e0 10 	movl   $0xc010e096,0x8(%esp)
c010584b:	c0 
c010584c:	c7 44 24 04 01 01 00 	movl   $0x101,0x4(%esp)
c0105853:	00 
c0105854:	c7 04 24 ab e0 10 c0 	movl   $0xc010e0ab,(%esp)
c010585b:	e8 f8 c9 ff ff       	call   c0102258 <__panic>
    assert(PageProperty(p1) && p1->property == 3);
c0105860:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0105863:	83 c0 04             	add    $0x4,%eax
c0105866:	c7 45 94 01 00 00 00 	movl   $0x1,-0x6c(%ebp)
c010586d:	89 45 90             	mov    %eax,-0x70(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0105870:	8b 45 90             	mov    -0x70(%ebp),%eax
c0105873:	8b 55 94             	mov    -0x6c(%ebp),%edx
c0105876:	0f a3 10             	bt     %edx,(%eax)
c0105879:	19 c0                	sbb    %eax,%eax
c010587b:	89 45 8c             	mov    %eax,-0x74(%ebp)
    return oldbit != 0;
c010587e:	83 7d 8c 00          	cmpl   $0x0,-0x74(%ebp)
c0105882:	0f 95 c0             	setne  %al
c0105885:	0f b6 c0             	movzbl %al,%eax
c0105888:	85 c0                	test   %eax,%eax
c010588a:	74 0b                	je     c0105897 <default_check+0x41e>
c010588c:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010588f:	8b 40 08             	mov    0x8(%eax),%eax
c0105892:	83 f8 03             	cmp    $0x3,%eax
c0105895:	74 24                	je     c01058bb <default_check+0x442>
c0105897:	c7 44 24 0c 44 e3 10 	movl   $0xc010e344,0xc(%esp)
c010589e:	c0 
c010589f:	c7 44 24 08 96 e0 10 	movl   $0xc010e096,0x8(%esp)
c01058a6:	c0 
c01058a7:	c7 44 24 04 02 01 00 	movl   $0x102,0x4(%esp)
c01058ae:	00 
c01058af:	c7 04 24 ab e0 10 c0 	movl   $0xc010e0ab,(%esp)
c01058b6:	e8 9d c9 ff ff       	call   c0102258 <__panic>

    assert((p0 = alloc_page()) == p2 - 1);
c01058bb:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01058c2:	e8 e2 0c 00 00       	call   c01065a9 <alloc_pages>
c01058c7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01058ca:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01058cd:	83 e8 24             	sub    $0x24,%eax
c01058d0:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
c01058d3:	74 24                	je     c01058f9 <default_check+0x480>
c01058d5:	c7 44 24 0c 6a e3 10 	movl   $0xc010e36a,0xc(%esp)
c01058dc:	c0 
c01058dd:	c7 44 24 08 96 e0 10 	movl   $0xc010e096,0x8(%esp)
c01058e4:	c0 
c01058e5:	c7 44 24 04 04 01 00 	movl   $0x104,0x4(%esp)
c01058ec:	00 
c01058ed:	c7 04 24 ab e0 10 c0 	movl   $0xc010e0ab,(%esp)
c01058f4:	e8 5f c9 ff ff       	call   c0102258 <__panic>
    free_page(p0);
c01058f9:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0105900:	00 
c0105901:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105904:	89 04 24             	mov    %eax,(%esp)
c0105907:	e8 19 0d 00 00       	call   c0106625 <free_pages>
    assert((p0 = alloc_pages(2)) == p2 + 1);
c010590c:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
c0105913:	e8 91 0c 00 00       	call   c01065a9 <alloc_pages>
c0105918:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010591b:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010591e:	83 c0 24             	add    $0x24,%eax
c0105921:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
c0105924:	74 24                	je     c010594a <default_check+0x4d1>
c0105926:	c7 44 24 0c 88 e3 10 	movl   $0xc010e388,0xc(%esp)
c010592d:	c0 
c010592e:	c7 44 24 08 96 e0 10 	movl   $0xc010e096,0x8(%esp)
c0105935:	c0 
c0105936:	c7 44 24 04 06 01 00 	movl   $0x106,0x4(%esp)
c010593d:	00 
c010593e:	c7 04 24 ab e0 10 c0 	movl   $0xc010e0ab,(%esp)
c0105945:	e8 0e c9 ff ff       	call   c0102258 <__panic>

    free_pages(p0, 2);
c010594a:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
c0105951:	00 
c0105952:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105955:	89 04 24             	mov    %eax,(%esp)
c0105958:	e8 c8 0c 00 00       	call   c0106625 <free_pages>
    free_page(p2);
c010595d:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0105964:	00 
c0105965:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0105968:	89 04 24             	mov    %eax,(%esp)
c010596b:	e8 b5 0c 00 00       	call   c0106625 <free_pages>

    assert((p0 = alloc_pages(5)) != NULL);
c0105970:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
c0105977:	e8 2d 0c 00 00       	call   c01065a9 <alloc_pages>
c010597c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010597f:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0105983:	75 24                	jne    c01059a9 <default_check+0x530>
c0105985:	c7 44 24 0c a8 e3 10 	movl   $0xc010e3a8,0xc(%esp)
c010598c:	c0 
c010598d:	c7 44 24 08 96 e0 10 	movl   $0xc010e096,0x8(%esp)
c0105994:	c0 
c0105995:	c7 44 24 04 0b 01 00 	movl   $0x10b,0x4(%esp)
c010599c:	00 
c010599d:	c7 04 24 ab e0 10 c0 	movl   $0xc010e0ab,(%esp)
c01059a4:	e8 af c8 ff ff       	call   c0102258 <__panic>
    assert(alloc_page() == NULL);
c01059a9:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01059b0:	e8 f4 0b 00 00       	call   c01065a9 <alloc_pages>
c01059b5:	85 c0                	test   %eax,%eax
c01059b7:	74 24                	je     c01059dd <default_check+0x564>
c01059b9:	c7 44 24 0c 06 e2 10 	movl   $0xc010e206,0xc(%esp)
c01059c0:	c0 
c01059c1:	c7 44 24 08 96 e0 10 	movl   $0xc010e096,0x8(%esp)
c01059c8:	c0 
c01059c9:	c7 44 24 04 0c 01 00 	movl   $0x10c,0x4(%esp)
c01059d0:	00 
c01059d1:	c7 04 24 ab e0 10 c0 	movl   $0xc010e0ab,(%esp)
c01059d8:	e8 7b c8 ff ff       	call   c0102258 <__panic>

    assert(nr_free == 0);
c01059dd:	a1 c4 2f 1a c0       	mov    0xc01a2fc4,%eax
c01059e2:	85 c0                	test   %eax,%eax
c01059e4:	74 24                	je     c0105a0a <default_check+0x591>
c01059e6:	c7 44 24 0c 59 e2 10 	movl   $0xc010e259,0xc(%esp)
c01059ed:	c0 
c01059ee:	c7 44 24 08 96 e0 10 	movl   $0xc010e096,0x8(%esp)
c01059f5:	c0 
c01059f6:	c7 44 24 04 0e 01 00 	movl   $0x10e,0x4(%esp)
c01059fd:	00 
c01059fe:	c7 04 24 ab e0 10 c0 	movl   $0xc010e0ab,(%esp)
c0105a05:	e8 4e c8 ff ff       	call   c0102258 <__panic>
    nr_free = nr_free_store;
c0105a0a:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105a0d:	a3 c4 2f 1a c0       	mov    %eax,0xc01a2fc4

    free_list = free_list_store;
c0105a12:	8b 45 80             	mov    -0x80(%ebp),%eax
c0105a15:	8b 55 84             	mov    -0x7c(%ebp),%edx
c0105a18:	a3 bc 2f 1a c0       	mov    %eax,0xc01a2fbc
c0105a1d:	89 15 c0 2f 1a c0    	mov    %edx,0xc01a2fc0
    free_pages(p0, 5);
c0105a23:	c7 44 24 04 05 00 00 	movl   $0x5,0x4(%esp)
c0105a2a:	00 
c0105a2b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105a2e:	89 04 24             	mov    %eax,(%esp)
c0105a31:	e8 ef 0b 00 00       	call   c0106625 <free_pages>

    le = &free_list;
c0105a36:	c7 45 ec bc 2f 1a c0 	movl   $0xc01a2fbc,-0x14(%ebp)
    while ((le = list_next(le)) != &free_list) {
c0105a3d:	eb 1d                	jmp    c0105a5c <default_check+0x5e3>
        struct Page *p = le2page(le, page_link);
c0105a3f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105a42:	83 e8 10             	sub    $0x10,%eax
c0105a45:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        count --, total -= p->property;
c0105a48:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c0105a4c:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0105a4f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0105a52:	8b 40 08             	mov    0x8(%eax),%eax
c0105a55:	29 c2                	sub    %eax,%edx
c0105a57:	89 d0                	mov    %edx,%eax
c0105a59:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0105a5c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105a5f:	89 45 88             	mov    %eax,-0x78(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0105a62:	8b 45 88             	mov    -0x78(%ebp),%eax
c0105a65:	8b 40 04             	mov    0x4(%eax),%eax

    free_list = free_list_store;
    free_pages(p0, 5);

    le = &free_list;
    while ((le = list_next(le)) != &free_list) {
c0105a68:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0105a6b:	81 7d ec bc 2f 1a c0 	cmpl   $0xc01a2fbc,-0x14(%ebp)
c0105a72:	75 cb                	jne    c0105a3f <default_check+0x5c6>
        struct Page *p = le2page(le, page_link);
        count --, total -= p->property;
    }
    assert(count == 0);
c0105a74:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105a78:	74 24                	je     c0105a9e <default_check+0x625>
c0105a7a:	c7 44 24 0c c6 e3 10 	movl   $0xc010e3c6,0xc(%esp)
c0105a81:	c0 
c0105a82:	c7 44 24 08 96 e0 10 	movl   $0xc010e096,0x8(%esp)
c0105a89:	c0 
c0105a8a:	c7 44 24 04 19 01 00 	movl   $0x119,0x4(%esp)
c0105a91:	00 
c0105a92:	c7 04 24 ab e0 10 c0 	movl   $0xc010e0ab,(%esp)
c0105a99:	e8 ba c7 ff ff       	call   c0102258 <__panic>
    assert(total == 0);
c0105a9e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0105aa2:	74 24                	je     c0105ac8 <default_check+0x64f>
c0105aa4:	c7 44 24 0c d1 e3 10 	movl   $0xc010e3d1,0xc(%esp)
c0105aab:	c0 
c0105aac:	c7 44 24 08 96 e0 10 	movl   $0xc010e096,0x8(%esp)
c0105ab3:	c0 
c0105ab4:	c7 44 24 04 1a 01 00 	movl   $0x11a,0x4(%esp)
c0105abb:	00 
c0105abc:	c7 04 24 ab e0 10 c0 	movl   $0xc010e0ab,(%esp)
c0105ac3:	e8 90 c7 ff ff       	call   c0102258 <__panic>
}
c0105ac8:	81 c4 94 00 00 00    	add    $0x94,%esp
c0105ace:	5b                   	pop    %ebx
c0105acf:	5d                   	pop    %ebp
c0105ad0:	c3                   	ret    

c0105ad1 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c0105ad1:	55                   	push   %ebp
c0105ad2:	89 e5                	mov    %esp,%ebp
c0105ad4:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c0105ad7:	9c                   	pushf  
c0105ad8:	58                   	pop    %eax
c0105ad9:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c0105adc:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c0105adf:	25 00 02 00 00       	and    $0x200,%eax
c0105ae4:	85 c0                	test   %eax,%eax
c0105ae6:	74 0c                	je     c0105af4 <__intr_save+0x23>
        intr_disable();
c0105ae8:	e8 c3 d9 ff ff       	call   c01034b0 <intr_disable>
        return 1;
c0105aed:	b8 01 00 00 00       	mov    $0x1,%eax
c0105af2:	eb 05                	jmp    c0105af9 <__intr_save+0x28>
    }
    return 0;
c0105af4:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0105af9:	c9                   	leave  
c0105afa:	c3                   	ret    

c0105afb <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c0105afb:	55                   	push   %ebp
c0105afc:	89 e5                	mov    %esp,%ebp
c0105afe:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c0105b01:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0105b05:	74 05                	je     c0105b0c <__intr_restore+0x11>
        intr_enable();
c0105b07:	e8 9e d9 ff ff       	call   c01034aa <intr_enable>
    }
}
c0105b0c:	c9                   	leave  
c0105b0d:	c3                   	ret    

c0105b0e <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c0105b0e:	55                   	push   %ebp
c0105b0f:	89 e5                	mov    %esp,%ebp
    return page - pages;
c0105b11:	8b 55 08             	mov    0x8(%ebp),%edx
c0105b14:	a1 d0 2f 1a c0       	mov    0xc01a2fd0,%eax
c0105b19:	29 c2                	sub    %eax,%edx
c0105b1b:	89 d0                	mov    %edx,%eax
c0105b1d:	c1 f8 02             	sar    $0x2,%eax
c0105b20:	69 c0 39 8e e3 38    	imul   $0x38e38e39,%eax,%eax
}
c0105b26:	5d                   	pop    %ebp
c0105b27:	c3                   	ret    

c0105b28 <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c0105b28:	55                   	push   %ebp
c0105b29:	89 e5                	mov    %esp,%ebp
c0105b2b:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c0105b2e:	8b 45 08             	mov    0x8(%ebp),%eax
c0105b31:	89 04 24             	mov    %eax,(%esp)
c0105b34:	e8 d5 ff ff ff       	call   c0105b0e <page2ppn>
c0105b39:	c1 e0 0c             	shl    $0xc,%eax
}
c0105b3c:	c9                   	leave  
c0105b3d:	c3                   	ret    

c0105b3e <pa2page>:

static inline struct Page *
pa2page(uintptr_t pa) {
c0105b3e:	55                   	push   %ebp
c0105b3f:	89 e5                	mov    %esp,%ebp
c0105b41:	83 ec 18             	sub    $0x18,%esp
    if (PPN(pa) >= npage) {
c0105b44:	8b 45 08             	mov    0x8(%ebp),%eax
c0105b47:	c1 e8 0c             	shr    $0xc,%eax
c0105b4a:	89 c2                	mov    %eax,%edx
c0105b4c:	a1 e0 0e 1a c0       	mov    0xc01a0ee0,%eax
c0105b51:	39 c2                	cmp    %eax,%edx
c0105b53:	72 1c                	jb     c0105b71 <pa2page+0x33>
        panic("pa2page called with invalid pa");
c0105b55:	c7 44 24 08 0c e4 10 	movl   $0xc010e40c,0x8(%esp)
c0105b5c:	c0 
c0105b5d:	c7 44 24 04 60 00 00 	movl   $0x60,0x4(%esp)
c0105b64:	00 
c0105b65:	c7 04 24 2b e4 10 c0 	movl   $0xc010e42b,(%esp)
c0105b6c:	e8 e7 c6 ff ff       	call   c0102258 <__panic>
    }
    return &pages[PPN(pa)];
c0105b71:	8b 0d d0 2f 1a c0    	mov    0xc01a2fd0,%ecx
c0105b77:	8b 45 08             	mov    0x8(%ebp),%eax
c0105b7a:	c1 e8 0c             	shr    $0xc,%eax
c0105b7d:	89 c2                	mov    %eax,%edx
c0105b7f:	89 d0                	mov    %edx,%eax
c0105b81:	c1 e0 03             	shl    $0x3,%eax
c0105b84:	01 d0                	add    %edx,%eax
c0105b86:	c1 e0 02             	shl    $0x2,%eax
c0105b89:	01 c8                	add    %ecx,%eax
}
c0105b8b:	c9                   	leave  
c0105b8c:	c3                   	ret    

c0105b8d <page2kva>:

static inline void *
page2kva(struct Page *page) {
c0105b8d:	55                   	push   %ebp
c0105b8e:	89 e5                	mov    %esp,%ebp
c0105b90:	83 ec 28             	sub    $0x28,%esp
    return KADDR(page2pa(page));
c0105b93:	8b 45 08             	mov    0x8(%ebp),%eax
c0105b96:	89 04 24             	mov    %eax,(%esp)
c0105b99:	e8 8a ff ff ff       	call   c0105b28 <page2pa>
c0105b9e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0105ba1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105ba4:	c1 e8 0c             	shr    $0xc,%eax
c0105ba7:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0105baa:	a1 e0 0e 1a c0       	mov    0xc01a0ee0,%eax
c0105baf:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0105bb2:	72 23                	jb     c0105bd7 <page2kva+0x4a>
c0105bb4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105bb7:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0105bbb:	c7 44 24 08 3c e4 10 	movl   $0xc010e43c,0x8(%esp)
c0105bc2:	c0 
c0105bc3:	c7 44 24 04 67 00 00 	movl   $0x67,0x4(%esp)
c0105bca:	00 
c0105bcb:	c7 04 24 2b e4 10 c0 	movl   $0xc010e42b,(%esp)
c0105bd2:	e8 81 c6 ff ff       	call   c0102258 <__panic>
c0105bd7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105bda:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c0105bdf:	c9                   	leave  
c0105be0:	c3                   	ret    

c0105be1 <kva2page>:

static inline struct Page *
kva2page(void *kva) {
c0105be1:	55                   	push   %ebp
c0105be2:	89 e5                	mov    %esp,%ebp
c0105be4:	83 ec 28             	sub    $0x28,%esp
    return pa2page(PADDR(kva));
c0105be7:	8b 45 08             	mov    0x8(%ebp),%eax
c0105bea:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0105bed:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c0105bf4:	77 23                	ja     c0105c19 <kva2page+0x38>
c0105bf6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105bf9:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0105bfd:	c7 44 24 08 60 e4 10 	movl   $0xc010e460,0x8(%esp)
c0105c04:	c0 
c0105c05:	c7 44 24 04 6c 00 00 	movl   $0x6c,0x4(%esp)
c0105c0c:	00 
c0105c0d:	c7 04 24 2b e4 10 c0 	movl   $0xc010e42b,(%esp)
c0105c14:	e8 3f c6 ff ff       	call   c0102258 <__panic>
c0105c19:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105c1c:	05 00 00 00 40       	add    $0x40000000,%eax
c0105c21:	89 04 24             	mov    %eax,(%esp)
c0105c24:	e8 15 ff ff ff       	call   c0105b3e <pa2page>
}
c0105c29:	c9                   	leave  
c0105c2a:	c3                   	ret    

c0105c2b <__slob_get_free_pages>:
static slob_t *slobfree = &arena;
static bigblock_t *bigblocks;


static void* __slob_get_free_pages(gfp_t gfp, int order)
{
c0105c2b:	55                   	push   %ebp
c0105c2c:	89 e5                	mov    %esp,%ebp
c0105c2e:	83 ec 28             	sub    $0x28,%esp
  struct Page * page = alloc_pages(1 << order);
c0105c31:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105c34:	ba 01 00 00 00       	mov    $0x1,%edx
c0105c39:	89 c1                	mov    %eax,%ecx
c0105c3b:	d3 e2                	shl    %cl,%edx
c0105c3d:	89 d0                	mov    %edx,%eax
c0105c3f:	89 04 24             	mov    %eax,(%esp)
c0105c42:	e8 62 09 00 00       	call   c01065a9 <alloc_pages>
c0105c47:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if(!page)
c0105c4a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105c4e:	75 07                	jne    c0105c57 <__slob_get_free_pages+0x2c>
    return NULL;
c0105c50:	b8 00 00 00 00       	mov    $0x0,%eax
c0105c55:	eb 0b                	jmp    c0105c62 <__slob_get_free_pages+0x37>
  return page2kva(page);
c0105c57:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105c5a:	89 04 24             	mov    %eax,(%esp)
c0105c5d:	e8 2b ff ff ff       	call   c0105b8d <page2kva>
}
c0105c62:	c9                   	leave  
c0105c63:	c3                   	ret    

c0105c64 <__slob_free_pages>:

#define __slob_get_free_page(gfp) __slob_get_free_pages(gfp, 0)

static inline void __slob_free_pages(unsigned long kva, int order)
{
c0105c64:	55                   	push   %ebp
c0105c65:	89 e5                	mov    %esp,%ebp
c0105c67:	53                   	push   %ebx
c0105c68:	83 ec 14             	sub    $0x14,%esp
  free_pages(kva2page(kva), 1 << order);
c0105c6b:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105c6e:	ba 01 00 00 00       	mov    $0x1,%edx
c0105c73:	89 c1                	mov    %eax,%ecx
c0105c75:	d3 e2                	shl    %cl,%edx
c0105c77:	89 d0                	mov    %edx,%eax
c0105c79:	89 c3                	mov    %eax,%ebx
c0105c7b:	8b 45 08             	mov    0x8(%ebp),%eax
c0105c7e:	89 04 24             	mov    %eax,(%esp)
c0105c81:	e8 5b ff ff ff       	call   c0105be1 <kva2page>
c0105c86:	89 5c 24 04          	mov    %ebx,0x4(%esp)
c0105c8a:	89 04 24             	mov    %eax,(%esp)
c0105c8d:	e8 93 09 00 00       	call   c0106625 <free_pages>
}
c0105c92:	83 c4 14             	add    $0x14,%esp
c0105c95:	5b                   	pop    %ebx
c0105c96:	5d                   	pop    %ebp
c0105c97:	c3                   	ret    

c0105c98 <slob_alloc>:

static void slob_free(void *b, int size);

static void *slob_alloc(size_t size, gfp_t gfp, int align)
{
c0105c98:	55                   	push   %ebp
c0105c99:	89 e5                	mov    %esp,%ebp
c0105c9b:	83 ec 38             	sub    $0x38,%esp
  assert( (size + SLOB_UNIT) < PAGE_SIZE );
c0105c9e:	8b 45 08             	mov    0x8(%ebp),%eax
c0105ca1:	83 c0 08             	add    $0x8,%eax
c0105ca4:	3d ff 0f 00 00       	cmp    $0xfff,%eax
c0105ca9:	76 24                	jbe    c0105ccf <slob_alloc+0x37>
c0105cab:	c7 44 24 0c 84 e4 10 	movl   $0xc010e484,0xc(%esp)
c0105cb2:	c0 
c0105cb3:	c7 44 24 08 a3 e4 10 	movl   $0xc010e4a3,0x8(%esp)
c0105cba:	c0 
c0105cbb:	c7 44 24 04 64 00 00 	movl   $0x64,0x4(%esp)
c0105cc2:	00 
c0105cc3:	c7 04 24 b8 e4 10 c0 	movl   $0xc010e4b8,(%esp)
c0105cca:	e8 89 c5 ff ff       	call   c0102258 <__panic>

	slob_t *prev, *cur, *aligned = 0;
c0105ccf:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	int delta = 0, units = SLOB_UNITS(size);
c0105cd6:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c0105cdd:	8b 45 08             	mov    0x8(%ebp),%eax
c0105ce0:	83 c0 07             	add    $0x7,%eax
c0105ce3:	c1 e8 03             	shr    $0x3,%eax
c0105ce6:	89 45 e0             	mov    %eax,-0x20(%ebp)
	unsigned long flags;

	spin_lock_irqsave(&slob_lock, flags);
c0105ce9:	e8 e3 fd ff ff       	call   c0105ad1 <__intr_save>
c0105cee:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	prev = slobfree;
c0105cf1:	a1 08 ea 12 c0       	mov    0xc012ea08,%eax
c0105cf6:	89 45 f4             	mov    %eax,-0xc(%ebp)
	for (cur = prev->next; ; prev = cur, cur = cur->next) {
c0105cf9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105cfc:	8b 40 04             	mov    0x4(%eax),%eax
c0105cff:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if (align) {
c0105d02:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0105d06:	74 25                	je     c0105d2d <slob_alloc+0x95>
			aligned = (slob_t *)ALIGN((unsigned long)cur, align);
c0105d08:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0105d0b:	8b 45 10             	mov    0x10(%ebp),%eax
c0105d0e:	01 d0                	add    %edx,%eax
c0105d10:	8d 50 ff             	lea    -0x1(%eax),%edx
c0105d13:	8b 45 10             	mov    0x10(%ebp),%eax
c0105d16:	f7 d8                	neg    %eax
c0105d18:	21 d0                	and    %edx,%eax
c0105d1a:	89 45 ec             	mov    %eax,-0x14(%ebp)
			delta = aligned - cur;
c0105d1d:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0105d20:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105d23:	29 c2                	sub    %eax,%edx
c0105d25:	89 d0                	mov    %edx,%eax
c0105d27:	c1 f8 03             	sar    $0x3,%eax
c0105d2a:	89 45 e8             	mov    %eax,-0x18(%ebp)
		}
		if (cur->units >= units + delta) { /* room enough? */
c0105d2d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105d30:	8b 00                	mov    (%eax),%eax
c0105d32:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0105d35:	8b 4d e0             	mov    -0x20(%ebp),%ecx
c0105d38:	01 ca                	add    %ecx,%edx
c0105d3a:	39 d0                	cmp    %edx,%eax
c0105d3c:	0f 8c aa 00 00 00    	jl     c0105dec <slob_alloc+0x154>
			if (delta) { /* need to fragment head to align? */
c0105d42:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0105d46:	74 38                	je     c0105d80 <slob_alloc+0xe8>
				aligned->units = cur->units - delta;
c0105d48:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105d4b:	8b 00                	mov    (%eax),%eax
c0105d4d:	2b 45 e8             	sub    -0x18(%ebp),%eax
c0105d50:	89 c2                	mov    %eax,%edx
c0105d52:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105d55:	89 10                	mov    %edx,(%eax)
				aligned->next = cur->next;
c0105d57:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105d5a:	8b 50 04             	mov    0x4(%eax),%edx
c0105d5d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105d60:	89 50 04             	mov    %edx,0x4(%eax)
				cur->next = aligned;
c0105d63:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105d66:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0105d69:	89 50 04             	mov    %edx,0x4(%eax)
				cur->units = delta;
c0105d6c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105d6f:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0105d72:	89 10                	mov    %edx,(%eax)
				prev = cur;
c0105d74:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105d77:	89 45 f4             	mov    %eax,-0xc(%ebp)
				cur = aligned;
c0105d7a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105d7d:	89 45 f0             	mov    %eax,-0x10(%ebp)
			}

			if (cur->units == units) /* exact fit? */
c0105d80:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105d83:	8b 00                	mov    (%eax),%eax
c0105d85:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0105d88:	75 0e                	jne    c0105d98 <slob_alloc+0x100>
				prev->next = cur->next; /* unlink */
c0105d8a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105d8d:	8b 50 04             	mov    0x4(%eax),%edx
c0105d90:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105d93:	89 50 04             	mov    %edx,0x4(%eax)
c0105d96:	eb 3c                	jmp    c0105dd4 <slob_alloc+0x13c>
			else { /* fragment */
				prev->next = cur + units;
c0105d98:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105d9b:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0105da2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105da5:	01 c2                	add    %eax,%edx
c0105da7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105daa:	89 50 04             	mov    %edx,0x4(%eax)
				prev->next->units = cur->units - units;
c0105dad:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105db0:	8b 40 04             	mov    0x4(%eax),%eax
c0105db3:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0105db6:	8b 12                	mov    (%edx),%edx
c0105db8:	2b 55 e0             	sub    -0x20(%ebp),%edx
c0105dbb:	89 10                	mov    %edx,(%eax)
				prev->next->next = cur->next;
c0105dbd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105dc0:	8b 40 04             	mov    0x4(%eax),%eax
c0105dc3:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0105dc6:	8b 52 04             	mov    0x4(%edx),%edx
c0105dc9:	89 50 04             	mov    %edx,0x4(%eax)
				cur->units = units;
c0105dcc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105dcf:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0105dd2:	89 10                	mov    %edx,(%eax)
			}

			slobfree = prev;
c0105dd4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105dd7:	a3 08 ea 12 c0       	mov    %eax,0xc012ea08
			spin_unlock_irqrestore(&slob_lock, flags);
c0105ddc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105ddf:	89 04 24             	mov    %eax,(%esp)
c0105de2:	e8 14 fd ff ff       	call   c0105afb <__intr_restore>
			return cur;
c0105de7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105dea:	eb 7f                	jmp    c0105e6b <slob_alloc+0x1d3>
		}
		if (cur == slobfree) {
c0105dec:	a1 08 ea 12 c0       	mov    0xc012ea08,%eax
c0105df1:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0105df4:	75 61                	jne    c0105e57 <slob_alloc+0x1bf>
			spin_unlock_irqrestore(&slob_lock, flags);
c0105df6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105df9:	89 04 24             	mov    %eax,(%esp)
c0105dfc:	e8 fa fc ff ff       	call   c0105afb <__intr_restore>

			if (size == PAGE_SIZE) /* trying to shrink arena? */
c0105e01:	81 7d 08 00 10 00 00 	cmpl   $0x1000,0x8(%ebp)
c0105e08:	75 07                	jne    c0105e11 <slob_alloc+0x179>
				return 0;
c0105e0a:	b8 00 00 00 00       	mov    $0x0,%eax
c0105e0f:	eb 5a                	jmp    c0105e6b <slob_alloc+0x1d3>

			cur = (slob_t *)__slob_get_free_page(gfp);
c0105e11:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0105e18:	00 
c0105e19:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105e1c:	89 04 24             	mov    %eax,(%esp)
c0105e1f:	e8 07 fe ff ff       	call   c0105c2b <__slob_get_free_pages>
c0105e24:	89 45 f0             	mov    %eax,-0x10(%ebp)
			if (!cur)
c0105e27:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0105e2b:	75 07                	jne    c0105e34 <slob_alloc+0x19c>
				return 0;
c0105e2d:	b8 00 00 00 00       	mov    $0x0,%eax
c0105e32:	eb 37                	jmp    c0105e6b <slob_alloc+0x1d3>

			slob_free(cur, PAGE_SIZE);
c0105e34:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c0105e3b:	00 
c0105e3c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105e3f:	89 04 24             	mov    %eax,(%esp)
c0105e42:	e8 26 00 00 00       	call   c0105e6d <slob_free>
			spin_lock_irqsave(&slob_lock, flags);
c0105e47:	e8 85 fc ff ff       	call   c0105ad1 <__intr_save>
c0105e4c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
			cur = slobfree;
c0105e4f:	a1 08 ea 12 c0       	mov    0xc012ea08,%eax
c0105e54:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int delta = 0, units = SLOB_UNITS(size);
	unsigned long flags;

	spin_lock_irqsave(&slob_lock, flags);
	prev = slobfree;
	for (cur = prev->next; ; prev = cur, cur = cur->next) {
c0105e57:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105e5a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0105e5d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105e60:	8b 40 04             	mov    0x4(%eax),%eax
c0105e63:	89 45 f0             	mov    %eax,-0x10(%ebp)

			slob_free(cur, PAGE_SIZE);
			spin_lock_irqsave(&slob_lock, flags);
			cur = slobfree;
		}
	}
c0105e66:	e9 97 fe ff ff       	jmp    c0105d02 <slob_alloc+0x6a>
}
c0105e6b:	c9                   	leave  
c0105e6c:	c3                   	ret    

c0105e6d <slob_free>:

static void slob_free(void *block, int size)
{
c0105e6d:	55                   	push   %ebp
c0105e6e:	89 e5                	mov    %esp,%ebp
c0105e70:	83 ec 28             	sub    $0x28,%esp
	slob_t *cur, *b = (slob_t *)block;
c0105e73:	8b 45 08             	mov    0x8(%ebp),%eax
c0105e76:	89 45 f0             	mov    %eax,-0x10(%ebp)
	unsigned long flags;

	if (!block)
c0105e79:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0105e7d:	75 05                	jne    c0105e84 <slob_free+0x17>
		return;
c0105e7f:	e9 ff 00 00 00       	jmp    c0105f83 <slob_free+0x116>

	if (size)
c0105e84:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0105e88:	74 10                	je     c0105e9a <slob_free+0x2d>
		b->units = SLOB_UNITS(size);
c0105e8a:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105e8d:	83 c0 07             	add    $0x7,%eax
c0105e90:	c1 e8 03             	shr    $0x3,%eax
c0105e93:	89 c2                	mov    %eax,%edx
c0105e95:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105e98:	89 10                	mov    %edx,(%eax)

	/* Find reinsertion point */
	spin_lock_irqsave(&slob_lock, flags);
c0105e9a:	e8 32 fc ff ff       	call   c0105ad1 <__intr_save>
c0105e9f:	89 45 ec             	mov    %eax,-0x14(%ebp)
	for (cur = slobfree; !(b > cur && b < cur->next); cur = cur->next)
c0105ea2:	a1 08 ea 12 c0       	mov    0xc012ea08,%eax
c0105ea7:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0105eaa:	eb 27                	jmp    c0105ed3 <slob_free+0x66>
		if (cur >= cur->next && (b > cur || b < cur->next))
c0105eac:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105eaf:	8b 40 04             	mov    0x4(%eax),%eax
c0105eb2:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0105eb5:	77 13                	ja     c0105eca <slob_free+0x5d>
c0105eb7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105eba:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0105ebd:	77 27                	ja     c0105ee6 <slob_free+0x79>
c0105ebf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105ec2:	8b 40 04             	mov    0x4(%eax),%eax
c0105ec5:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0105ec8:	77 1c                	ja     c0105ee6 <slob_free+0x79>
	if (size)
		b->units = SLOB_UNITS(size);

	/* Find reinsertion point */
	spin_lock_irqsave(&slob_lock, flags);
	for (cur = slobfree; !(b > cur && b < cur->next); cur = cur->next)
c0105eca:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105ecd:	8b 40 04             	mov    0x4(%eax),%eax
c0105ed0:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0105ed3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105ed6:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0105ed9:	76 d1                	jbe    c0105eac <slob_free+0x3f>
c0105edb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105ede:	8b 40 04             	mov    0x4(%eax),%eax
c0105ee1:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0105ee4:	76 c6                	jbe    c0105eac <slob_free+0x3f>
		if (cur >= cur->next && (b > cur || b < cur->next))
			break;

	if (b + b->units == cur->next) {
c0105ee6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105ee9:	8b 00                	mov    (%eax),%eax
c0105eeb:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0105ef2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105ef5:	01 c2                	add    %eax,%edx
c0105ef7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105efa:	8b 40 04             	mov    0x4(%eax),%eax
c0105efd:	39 c2                	cmp    %eax,%edx
c0105eff:	75 25                	jne    c0105f26 <slob_free+0xb9>
		b->units += cur->next->units;
c0105f01:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105f04:	8b 10                	mov    (%eax),%edx
c0105f06:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105f09:	8b 40 04             	mov    0x4(%eax),%eax
c0105f0c:	8b 00                	mov    (%eax),%eax
c0105f0e:	01 c2                	add    %eax,%edx
c0105f10:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105f13:	89 10                	mov    %edx,(%eax)
		b->next = cur->next->next;
c0105f15:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105f18:	8b 40 04             	mov    0x4(%eax),%eax
c0105f1b:	8b 50 04             	mov    0x4(%eax),%edx
c0105f1e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105f21:	89 50 04             	mov    %edx,0x4(%eax)
c0105f24:	eb 0c                	jmp    c0105f32 <slob_free+0xc5>
	} else
		b->next = cur->next;
c0105f26:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105f29:	8b 50 04             	mov    0x4(%eax),%edx
c0105f2c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105f2f:	89 50 04             	mov    %edx,0x4(%eax)

	if (cur + cur->units == b) {
c0105f32:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105f35:	8b 00                	mov    (%eax),%eax
c0105f37:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0105f3e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105f41:	01 d0                	add    %edx,%eax
c0105f43:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0105f46:	75 1f                	jne    c0105f67 <slob_free+0xfa>
		cur->units += b->units;
c0105f48:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105f4b:	8b 10                	mov    (%eax),%edx
c0105f4d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105f50:	8b 00                	mov    (%eax),%eax
c0105f52:	01 c2                	add    %eax,%edx
c0105f54:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105f57:	89 10                	mov    %edx,(%eax)
		cur->next = b->next;
c0105f59:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105f5c:	8b 50 04             	mov    0x4(%eax),%edx
c0105f5f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105f62:	89 50 04             	mov    %edx,0x4(%eax)
c0105f65:	eb 09                	jmp    c0105f70 <slob_free+0x103>
	} else
		cur->next = b;
c0105f67:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105f6a:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0105f6d:	89 50 04             	mov    %edx,0x4(%eax)

	slobfree = cur;
c0105f70:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105f73:	a3 08 ea 12 c0       	mov    %eax,0xc012ea08

	spin_unlock_irqrestore(&slob_lock, flags);
c0105f78:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105f7b:	89 04 24             	mov    %eax,(%esp)
c0105f7e:	e8 78 fb ff ff       	call   c0105afb <__intr_restore>
}
c0105f83:	c9                   	leave  
c0105f84:	c3                   	ret    

c0105f85 <check_slab>:



void check_slab(void) {
c0105f85:	55                   	push   %ebp
c0105f86:	89 e5                	mov    %esp,%ebp
c0105f88:	83 ec 18             	sub    $0x18,%esp
  cprintf("check_slab() success\n");
c0105f8b:	c7 04 24 ca e4 10 c0 	movl   $0xc010e4ca,(%esp)
c0105f92:	e8 3f b8 ff ff       	call   c01017d6 <cprintf>
}
c0105f97:	c9                   	leave  
c0105f98:	c3                   	ret    

c0105f99 <slab_init>:

void
slab_init(void) {
c0105f99:	55                   	push   %ebp
c0105f9a:	89 e5                	mov    %esp,%ebp
c0105f9c:	83 ec 18             	sub    $0x18,%esp
  cprintf("use SLOB allocator\n");
c0105f9f:	c7 04 24 e0 e4 10 c0 	movl   $0xc010e4e0,(%esp)
c0105fa6:	e8 2b b8 ff ff       	call   c01017d6 <cprintf>
  check_slab();
c0105fab:	e8 d5 ff ff ff       	call   c0105f85 <check_slab>
}
c0105fb0:	c9                   	leave  
c0105fb1:	c3                   	ret    

c0105fb2 <kmalloc_init>:

inline void 
kmalloc_init(void) {
c0105fb2:	55                   	push   %ebp
c0105fb3:	89 e5                	mov    %esp,%ebp
c0105fb5:	83 ec 18             	sub    $0x18,%esp
    slab_init();
c0105fb8:	e8 dc ff ff ff       	call   c0105f99 <slab_init>
    cprintf("kmalloc_init() succeeded!\n");
c0105fbd:	c7 04 24 f4 e4 10 c0 	movl   $0xc010e4f4,(%esp)
c0105fc4:	e8 0d b8 ff ff       	call   c01017d6 <cprintf>
}
c0105fc9:	c9                   	leave  
c0105fca:	c3                   	ret    

c0105fcb <slab_allocated>:

size_t
slab_allocated(void) {
c0105fcb:	55                   	push   %ebp
c0105fcc:	89 e5                	mov    %esp,%ebp
  return 0;
c0105fce:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0105fd3:	5d                   	pop    %ebp
c0105fd4:	c3                   	ret    

c0105fd5 <kallocated>:

size_t
kallocated(void) {
c0105fd5:	55                   	push   %ebp
c0105fd6:	89 e5                	mov    %esp,%ebp
   return slab_allocated();
c0105fd8:	e8 ee ff ff ff       	call   c0105fcb <slab_allocated>
}
c0105fdd:	5d                   	pop    %ebp
c0105fde:	c3                   	ret    

c0105fdf <find_order>:

static int find_order(int size)
{
c0105fdf:	55                   	push   %ebp
c0105fe0:	89 e5                	mov    %esp,%ebp
c0105fe2:	83 ec 10             	sub    $0x10,%esp
	int order = 0;
c0105fe5:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	for ( ; size > 4096 ; size >>=1)
c0105fec:	eb 07                	jmp    c0105ff5 <find_order+0x16>
		order++;
c0105fee:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
}

static int find_order(int size)
{
	int order = 0;
	for ( ; size > 4096 ; size >>=1)
c0105ff2:	d1 7d 08             	sarl   0x8(%ebp)
c0105ff5:	81 7d 08 00 10 00 00 	cmpl   $0x1000,0x8(%ebp)
c0105ffc:	7f f0                	jg     c0105fee <find_order+0xf>
		order++;
	return order;
c0105ffe:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0106001:	c9                   	leave  
c0106002:	c3                   	ret    

c0106003 <__kmalloc>:

static void *__kmalloc(size_t size, gfp_t gfp)
{
c0106003:	55                   	push   %ebp
c0106004:	89 e5                	mov    %esp,%ebp
c0106006:	83 ec 28             	sub    $0x28,%esp
	slob_t *m;
	bigblock_t *bb;
	unsigned long flags;

	if (size < PAGE_SIZE - SLOB_UNIT) {
c0106009:	81 7d 08 f7 0f 00 00 	cmpl   $0xff7,0x8(%ebp)
c0106010:	77 38                	ja     c010604a <__kmalloc+0x47>
		m = slob_alloc(size + SLOB_UNIT, gfp, 0);
c0106012:	8b 45 08             	mov    0x8(%ebp),%eax
c0106015:	8d 50 08             	lea    0x8(%eax),%edx
c0106018:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010601f:	00 
c0106020:	8b 45 0c             	mov    0xc(%ebp),%eax
c0106023:	89 44 24 04          	mov    %eax,0x4(%esp)
c0106027:	89 14 24             	mov    %edx,(%esp)
c010602a:	e8 69 fc ff ff       	call   c0105c98 <slob_alloc>
c010602f:	89 45 f4             	mov    %eax,-0xc(%ebp)
		return m ? (void *)(m + 1) : 0;
c0106032:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0106036:	74 08                	je     c0106040 <__kmalloc+0x3d>
c0106038:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010603b:	83 c0 08             	add    $0x8,%eax
c010603e:	eb 05                	jmp    c0106045 <__kmalloc+0x42>
c0106040:	b8 00 00 00 00       	mov    $0x0,%eax
c0106045:	e9 a6 00 00 00       	jmp    c01060f0 <__kmalloc+0xed>
	}

	bb = slob_alloc(sizeof(bigblock_t), gfp, 0);
c010604a:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0106051:	00 
c0106052:	8b 45 0c             	mov    0xc(%ebp),%eax
c0106055:	89 44 24 04          	mov    %eax,0x4(%esp)
c0106059:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
c0106060:	e8 33 fc ff ff       	call   c0105c98 <slob_alloc>
c0106065:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (!bb)
c0106068:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010606c:	75 07                	jne    c0106075 <__kmalloc+0x72>
		return 0;
c010606e:	b8 00 00 00 00       	mov    $0x0,%eax
c0106073:	eb 7b                	jmp    c01060f0 <__kmalloc+0xed>

	bb->order = find_order(size);
c0106075:	8b 45 08             	mov    0x8(%ebp),%eax
c0106078:	89 04 24             	mov    %eax,(%esp)
c010607b:	e8 5f ff ff ff       	call   c0105fdf <find_order>
c0106080:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0106083:	89 02                	mov    %eax,(%edx)
	bb->pages = (void *)__slob_get_free_pages(gfp, bb->order);
c0106085:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106088:	8b 00                	mov    (%eax),%eax
c010608a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010608e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0106091:	89 04 24             	mov    %eax,(%esp)
c0106094:	e8 92 fb ff ff       	call   c0105c2b <__slob_get_free_pages>
c0106099:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010609c:	89 42 04             	mov    %eax,0x4(%edx)

	if (bb->pages) {
c010609f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01060a2:	8b 40 04             	mov    0x4(%eax),%eax
c01060a5:	85 c0                	test   %eax,%eax
c01060a7:	74 2f                	je     c01060d8 <__kmalloc+0xd5>
		spin_lock_irqsave(&block_lock, flags);
c01060a9:	e8 23 fa ff ff       	call   c0105ad1 <__intr_save>
c01060ae:	89 45 ec             	mov    %eax,-0x14(%ebp)
		bb->next = bigblocks;
c01060b1:	8b 15 c4 0e 1a c0    	mov    0xc01a0ec4,%edx
c01060b7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01060ba:	89 50 08             	mov    %edx,0x8(%eax)
		bigblocks = bb;
c01060bd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01060c0:	a3 c4 0e 1a c0       	mov    %eax,0xc01a0ec4
		spin_unlock_irqrestore(&block_lock, flags);
c01060c5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01060c8:	89 04 24             	mov    %eax,(%esp)
c01060cb:	e8 2b fa ff ff       	call   c0105afb <__intr_restore>
		return bb->pages;
c01060d0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01060d3:	8b 40 04             	mov    0x4(%eax),%eax
c01060d6:	eb 18                	jmp    c01060f0 <__kmalloc+0xed>
	}

	slob_free(bb, sizeof(bigblock_t));
c01060d8:	c7 44 24 04 0c 00 00 	movl   $0xc,0x4(%esp)
c01060df:	00 
c01060e0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01060e3:	89 04 24             	mov    %eax,(%esp)
c01060e6:	e8 82 fd ff ff       	call   c0105e6d <slob_free>
	return 0;
c01060eb:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01060f0:	c9                   	leave  
c01060f1:	c3                   	ret    

c01060f2 <kmalloc>:

void *
kmalloc(size_t size)
{
c01060f2:	55                   	push   %ebp
c01060f3:	89 e5                	mov    %esp,%ebp
c01060f5:	83 ec 18             	sub    $0x18,%esp
  return __kmalloc(size, 0);
c01060f8:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01060ff:	00 
c0106100:	8b 45 08             	mov    0x8(%ebp),%eax
c0106103:	89 04 24             	mov    %eax,(%esp)
c0106106:	e8 f8 fe ff ff       	call   c0106003 <__kmalloc>
}
c010610b:	c9                   	leave  
c010610c:	c3                   	ret    

c010610d <kfree>:


void kfree(void *block)
{
c010610d:	55                   	push   %ebp
c010610e:	89 e5                	mov    %esp,%ebp
c0106110:	83 ec 28             	sub    $0x28,%esp
	bigblock_t *bb, **last = &bigblocks;
c0106113:	c7 45 f0 c4 0e 1a c0 	movl   $0xc01a0ec4,-0x10(%ebp)
	unsigned long flags;

	if (!block)
c010611a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010611e:	75 05                	jne    c0106125 <kfree+0x18>
		return;
c0106120:	e9 a2 00 00 00       	jmp    c01061c7 <kfree+0xba>

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
c0106125:	8b 45 08             	mov    0x8(%ebp),%eax
c0106128:	25 ff 0f 00 00       	and    $0xfff,%eax
c010612d:	85 c0                	test   %eax,%eax
c010612f:	75 7f                	jne    c01061b0 <kfree+0xa3>
		/* might be on the big block list */
		spin_lock_irqsave(&block_lock, flags);
c0106131:	e8 9b f9 ff ff       	call   c0105ad1 <__intr_save>
c0106136:	89 45 ec             	mov    %eax,-0x14(%ebp)
		for (bb = bigblocks; bb; last = &bb->next, bb = bb->next) {
c0106139:	a1 c4 0e 1a c0       	mov    0xc01a0ec4,%eax
c010613e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0106141:	eb 5c                	jmp    c010619f <kfree+0x92>
			if (bb->pages == block) {
c0106143:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106146:	8b 40 04             	mov    0x4(%eax),%eax
c0106149:	3b 45 08             	cmp    0x8(%ebp),%eax
c010614c:	75 3f                	jne    c010618d <kfree+0x80>
				*last = bb->next;
c010614e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106151:	8b 50 08             	mov    0x8(%eax),%edx
c0106154:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106157:	89 10                	mov    %edx,(%eax)
				spin_unlock_irqrestore(&block_lock, flags);
c0106159:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010615c:	89 04 24             	mov    %eax,(%esp)
c010615f:	e8 97 f9 ff ff       	call   c0105afb <__intr_restore>
				__slob_free_pages((unsigned long)block, bb->order);
c0106164:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106167:	8b 10                	mov    (%eax),%edx
c0106169:	8b 45 08             	mov    0x8(%ebp),%eax
c010616c:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106170:	89 04 24             	mov    %eax,(%esp)
c0106173:	e8 ec fa ff ff       	call   c0105c64 <__slob_free_pages>
				slob_free(bb, sizeof(bigblock_t));
c0106178:	c7 44 24 04 0c 00 00 	movl   $0xc,0x4(%esp)
c010617f:	00 
c0106180:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106183:	89 04 24             	mov    %eax,(%esp)
c0106186:	e8 e2 fc ff ff       	call   c0105e6d <slob_free>
				return;
c010618b:	eb 3a                	jmp    c01061c7 <kfree+0xba>
		return;

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
		/* might be on the big block list */
		spin_lock_irqsave(&block_lock, flags);
		for (bb = bigblocks; bb; last = &bb->next, bb = bb->next) {
c010618d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106190:	83 c0 08             	add    $0x8,%eax
c0106193:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0106196:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106199:	8b 40 08             	mov    0x8(%eax),%eax
c010619c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010619f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01061a3:	75 9e                	jne    c0106143 <kfree+0x36>
				__slob_free_pages((unsigned long)block, bb->order);
				slob_free(bb, sizeof(bigblock_t));
				return;
			}
		}
		spin_unlock_irqrestore(&block_lock, flags);
c01061a5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01061a8:	89 04 24             	mov    %eax,(%esp)
c01061ab:	e8 4b f9 ff ff       	call   c0105afb <__intr_restore>
	}

	slob_free((slob_t *)block - 1, 0);
c01061b0:	8b 45 08             	mov    0x8(%ebp),%eax
c01061b3:	83 e8 08             	sub    $0x8,%eax
c01061b6:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01061bd:	00 
c01061be:	89 04 24             	mov    %eax,(%esp)
c01061c1:	e8 a7 fc ff ff       	call   c0105e6d <slob_free>
	return;
c01061c6:	90                   	nop
}
c01061c7:	c9                   	leave  
c01061c8:	c3                   	ret    

c01061c9 <ksize>:


unsigned int ksize(const void *block)
{
c01061c9:	55                   	push   %ebp
c01061ca:	89 e5                	mov    %esp,%ebp
c01061cc:	83 ec 28             	sub    $0x28,%esp
	bigblock_t *bb;
	unsigned long flags;

	if (!block)
c01061cf:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01061d3:	75 07                	jne    c01061dc <ksize+0x13>
		return 0;
c01061d5:	b8 00 00 00 00       	mov    $0x0,%eax
c01061da:	eb 6b                	jmp    c0106247 <ksize+0x7e>

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
c01061dc:	8b 45 08             	mov    0x8(%ebp),%eax
c01061df:	25 ff 0f 00 00       	and    $0xfff,%eax
c01061e4:	85 c0                	test   %eax,%eax
c01061e6:	75 54                	jne    c010623c <ksize+0x73>
		spin_lock_irqsave(&block_lock, flags);
c01061e8:	e8 e4 f8 ff ff       	call   c0105ad1 <__intr_save>
c01061ed:	89 45 f0             	mov    %eax,-0x10(%ebp)
		for (bb = bigblocks; bb; bb = bb->next)
c01061f0:	a1 c4 0e 1a c0       	mov    0xc01a0ec4,%eax
c01061f5:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01061f8:	eb 31                	jmp    c010622b <ksize+0x62>
			if (bb->pages == block) {
c01061fa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01061fd:	8b 40 04             	mov    0x4(%eax),%eax
c0106200:	3b 45 08             	cmp    0x8(%ebp),%eax
c0106203:	75 1d                	jne    c0106222 <ksize+0x59>
				spin_unlock_irqrestore(&slob_lock, flags);
c0106205:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106208:	89 04 24             	mov    %eax,(%esp)
c010620b:	e8 eb f8 ff ff       	call   c0105afb <__intr_restore>
				return PAGE_SIZE << bb->order;
c0106210:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106213:	8b 00                	mov    (%eax),%eax
c0106215:	ba 00 10 00 00       	mov    $0x1000,%edx
c010621a:	89 c1                	mov    %eax,%ecx
c010621c:	d3 e2                	shl    %cl,%edx
c010621e:	89 d0                	mov    %edx,%eax
c0106220:	eb 25                	jmp    c0106247 <ksize+0x7e>
	if (!block)
		return 0;

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
		spin_lock_irqsave(&block_lock, flags);
		for (bb = bigblocks; bb; bb = bb->next)
c0106222:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106225:	8b 40 08             	mov    0x8(%eax),%eax
c0106228:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010622b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010622f:	75 c9                	jne    c01061fa <ksize+0x31>
			if (bb->pages == block) {
				spin_unlock_irqrestore(&slob_lock, flags);
				return PAGE_SIZE << bb->order;
			}
		spin_unlock_irqrestore(&block_lock, flags);
c0106231:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106234:	89 04 24             	mov    %eax,(%esp)
c0106237:	e8 bf f8 ff ff       	call   c0105afb <__intr_restore>
	}

	return ((slob_t *)block - 1)->units * SLOB_UNIT;
c010623c:	8b 45 08             	mov    0x8(%ebp),%eax
c010623f:	83 e8 08             	sub    $0x8,%eax
c0106242:	8b 00                	mov    (%eax),%eax
c0106244:	c1 e0 03             	shl    $0x3,%eax
}
c0106247:	c9                   	leave  
c0106248:	c3                   	ret    

c0106249 <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c0106249:	55                   	push   %ebp
c010624a:	89 e5                	mov    %esp,%ebp
    return page - pages;
c010624c:	8b 55 08             	mov    0x8(%ebp),%edx
c010624f:	a1 d0 2f 1a c0       	mov    0xc01a2fd0,%eax
c0106254:	29 c2                	sub    %eax,%edx
c0106256:	89 d0                	mov    %edx,%eax
c0106258:	c1 f8 02             	sar    $0x2,%eax
c010625b:	69 c0 39 8e e3 38    	imul   $0x38e38e39,%eax,%eax
}
c0106261:	5d                   	pop    %ebp
c0106262:	c3                   	ret    

c0106263 <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c0106263:	55                   	push   %ebp
c0106264:	89 e5                	mov    %esp,%ebp
c0106266:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c0106269:	8b 45 08             	mov    0x8(%ebp),%eax
c010626c:	89 04 24             	mov    %eax,(%esp)
c010626f:	e8 d5 ff ff ff       	call   c0106249 <page2ppn>
c0106274:	c1 e0 0c             	shl    $0xc,%eax
}
c0106277:	c9                   	leave  
c0106278:	c3                   	ret    

c0106279 <pa2page>:

static inline struct Page *
pa2page(uintptr_t pa) {
c0106279:	55                   	push   %ebp
c010627a:	89 e5                	mov    %esp,%ebp
c010627c:	83 ec 18             	sub    $0x18,%esp
    if (PPN(pa) >= npage) {
c010627f:	8b 45 08             	mov    0x8(%ebp),%eax
c0106282:	c1 e8 0c             	shr    $0xc,%eax
c0106285:	89 c2                	mov    %eax,%edx
c0106287:	a1 e0 0e 1a c0       	mov    0xc01a0ee0,%eax
c010628c:	39 c2                	cmp    %eax,%edx
c010628e:	72 1c                	jb     c01062ac <pa2page+0x33>
        panic("pa2page called with invalid pa");
c0106290:	c7 44 24 08 10 e5 10 	movl   $0xc010e510,0x8(%esp)
c0106297:	c0 
c0106298:	c7 44 24 04 60 00 00 	movl   $0x60,0x4(%esp)
c010629f:	00 
c01062a0:	c7 04 24 2f e5 10 c0 	movl   $0xc010e52f,(%esp)
c01062a7:	e8 ac bf ff ff       	call   c0102258 <__panic>
    }
    return &pages[PPN(pa)];
c01062ac:	8b 0d d0 2f 1a c0    	mov    0xc01a2fd0,%ecx
c01062b2:	8b 45 08             	mov    0x8(%ebp),%eax
c01062b5:	c1 e8 0c             	shr    $0xc,%eax
c01062b8:	89 c2                	mov    %eax,%edx
c01062ba:	89 d0                	mov    %edx,%eax
c01062bc:	c1 e0 03             	shl    $0x3,%eax
c01062bf:	01 d0                	add    %edx,%eax
c01062c1:	c1 e0 02             	shl    $0x2,%eax
c01062c4:	01 c8                	add    %ecx,%eax
}
c01062c6:	c9                   	leave  
c01062c7:	c3                   	ret    

c01062c8 <page2kva>:

static inline void *
page2kva(struct Page *page) {
c01062c8:	55                   	push   %ebp
c01062c9:	89 e5                	mov    %esp,%ebp
c01062cb:	83 ec 28             	sub    $0x28,%esp
    return KADDR(page2pa(page));
c01062ce:	8b 45 08             	mov    0x8(%ebp),%eax
c01062d1:	89 04 24             	mov    %eax,(%esp)
c01062d4:	e8 8a ff ff ff       	call   c0106263 <page2pa>
c01062d9:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01062dc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01062df:	c1 e8 0c             	shr    $0xc,%eax
c01062e2:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01062e5:	a1 e0 0e 1a c0       	mov    0xc01a0ee0,%eax
c01062ea:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c01062ed:	72 23                	jb     c0106312 <page2kva+0x4a>
c01062ef:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01062f2:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01062f6:	c7 44 24 08 40 e5 10 	movl   $0xc010e540,0x8(%esp)
c01062fd:	c0 
c01062fe:	c7 44 24 04 67 00 00 	movl   $0x67,0x4(%esp)
c0106305:	00 
c0106306:	c7 04 24 2f e5 10 c0 	movl   $0xc010e52f,(%esp)
c010630d:	e8 46 bf ff ff       	call   c0102258 <__panic>
c0106312:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106315:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c010631a:	c9                   	leave  
c010631b:	c3                   	ret    

c010631c <pte2page>:
kva2page(void *kva) {
    return pa2page(PADDR(kva));
}

static inline struct Page *
pte2page(pte_t pte) {
c010631c:	55                   	push   %ebp
c010631d:	89 e5                	mov    %esp,%ebp
c010631f:	83 ec 18             	sub    $0x18,%esp
    if (!(pte & PTE_P)) {
c0106322:	8b 45 08             	mov    0x8(%ebp),%eax
c0106325:	83 e0 01             	and    $0x1,%eax
c0106328:	85 c0                	test   %eax,%eax
c010632a:	75 1c                	jne    c0106348 <pte2page+0x2c>
        panic("pte2page called with invalid pte");
c010632c:	c7 44 24 08 64 e5 10 	movl   $0xc010e564,0x8(%esp)
c0106333:	c0 
c0106334:	c7 44 24 04 72 00 00 	movl   $0x72,0x4(%esp)
c010633b:	00 
c010633c:	c7 04 24 2f e5 10 c0 	movl   $0xc010e52f,(%esp)
c0106343:	e8 10 bf ff ff       	call   c0102258 <__panic>
    }
    return pa2page(PTE_ADDR(pte));
c0106348:	8b 45 08             	mov    0x8(%ebp),%eax
c010634b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0106350:	89 04 24             	mov    %eax,(%esp)
c0106353:	e8 21 ff ff ff       	call   c0106279 <pa2page>
}
c0106358:	c9                   	leave  
c0106359:	c3                   	ret    

c010635a <pde2page>:

static inline struct Page *
pde2page(pde_t pde) {
c010635a:	55                   	push   %ebp
c010635b:	89 e5                	mov    %esp,%ebp
c010635d:	83 ec 18             	sub    $0x18,%esp
    return pa2page(PDE_ADDR(pde));
c0106360:	8b 45 08             	mov    0x8(%ebp),%eax
c0106363:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0106368:	89 04 24             	mov    %eax,(%esp)
c010636b:	e8 09 ff ff ff       	call   c0106279 <pa2page>
}
c0106370:	c9                   	leave  
c0106371:	c3                   	ret    

c0106372 <page_ref>:

static inline int
page_ref(struct Page *page) {
c0106372:	55                   	push   %ebp
c0106373:	89 e5                	mov    %esp,%ebp
    return page->ref;
c0106375:	8b 45 08             	mov    0x8(%ebp),%eax
c0106378:	8b 00                	mov    (%eax),%eax
}
c010637a:	5d                   	pop    %ebp
c010637b:	c3                   	ret    

c010637c <set_page_ref>:

static inline void
set_page_ref(struct Page *page, int val) {
c010637c:	55                   	push   %ebp
c010637d:	89 e5                	mov    %esp,%ebp
    page->ref = val;
c010637f:	8b 45 08             	mov    0x8(%ebp),%eax
c0106382:	8b 55 0c             	mov    0xc(%ebp),%edx
c0106385:	89 10                	mov    %edx,(%eax)
}
c0106387:	5d                   	pop    %ebp
c0106388:	c3                   	ret    

c0106389 <page_ref_inc>:

static inline int
page_ref_inc(struct Page *page) {
c0106389:	55                   	push   %ebp
c010638a:	89 e5                	mov    %esp,%ebp
    page->ref += 1;
c010638c:	8b 45 08             	mov    0x8(%ebp),%eax
c010638f:	8b 00                	mov    (%eax),%eax
c0106391:	8d 50 01             	lea    0x1(%eax),%edx
c0106394:	8b 45 08             	mov    0x8(%ebp),%eax
c0106397:	89 10                	mov    %edx,(%eax)
    return page->ref;
c0106399:	8b 45 08             	mov    0x8(%ebp),%eax
c010639c:	8b 00                	mov    (%eax),%eax
}
c010639e:	5d                   	pop    %ebp
c010639f:	c3                   	ret    

c01063a0 <page_ref_dec>:

static inline int
page_ref_dec(struct Page *page) {
c01063a0:	55                   	push   %ebp
c01063a1:	89 e5                	mov    %esp,%ebp
    page->ref -= 1;
c01063a3:	8b 45 08             	mov    0x8(%ebp),%eax
c01063a6:	8b 00                	mov    (%eax),%eax
c01063a8:	8d 50 ff             	lea    -0x1(%eax),%edx
c01063ab:	8b 45 08             	mov    0x8(%ebp),%eax
c01063ae:	89 10                	mov    %edx,(%eax)
    return page->ref;
c01063b0:	8b 45 08             	mov    0x8(%ebp),%eax
c01063b3:	8b 00                	mov    (%eax),%eax
}
c01063b5:	5d                   	pop    %ebp
c01063b6:	c3                   	ret    

c01063b7 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c01063b7:	55                   	push   %ebp
c01063b8:	89 e5                	mov    %esp,%ebp
c01063ba:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c01063bd:	9c                   	pushf  
c01063be:	58                   	pop    %eax
c01063bf:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c01063c2:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c01063c5:	25 00 02 00 00       	and    $0x200,%eax
c01063ca:	85 c0                	test   %eax,%eax
c01063cc:	74 0c                	je     c01063da <__intr_save+0x23>
        intr_disable();
c01063ce:	e8 dd d0 ff ff       	call   c01034b0 <intr_disable>
        return 1;
c01063d3:	b8 01 00 00 00       	mov    $0x1,%eax
c01063d8:	eb 05                	jmp    c01063df <__intr_save+0x28>
    }
    return 0;
c01063da:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01063df:	c9                   	leave  
c01063e0:	c3                   	ret    

c01063e1 <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c01063e1:	55                   	push   %ebp
c01063e2:	89 e5                	mov    %esp,%ebp
c01063e4:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c01063e7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01063eb:	74 05                	je     c01063f2 <__intr_restore+0x11>
        intr_enable();
c01063ed:	e8 b8 d0 ff ff       	call   c01034aa <intr_enable>
    }
}
c01063f2:	c9                   	leave  
c01063f3:	c3                   	ret    

c01063f4 <lgdt>:
/* *
 * lgdt - load the global descriptor table register and reset the
 * data/code segement registers for kernel.
 * */
static inline void
lgdt(struct pseudodesc *pd) {
c01063f4:	55                   	push   %ebp
c01063f5:	89 e5                	mov    %esp,%ebp
    asm volatile ("lgdt (%0)" :: "r" (pd));
c01063f7:	8b 45 08             	mov    0x8(%ebp),%eax
c01063fa:	0f 01 10             	lgdtl  (%eax)
    asm volatile ("movw %%ax, %%gs" :: "a" (USER_DS));
c01063fd:	b8 23 00 00 00       	mov    $0x23,%eax
c0106402:	8e e8                	mov    %eax,%gs
    asm volatile ("movw %%ax, %%fs" :: "a" (USER_DS));
c0106404:	b8 23 00 00 00       	mov    $0x23,%eax
c0106409:	8e e0                	mov    %eax,%fs
    asm volatile ("movw %%ax, %%es" :: "a" (KERNEL_DS));
c010640b:	b8 10 00 00 00       	mov    $0x10,%eax
c0106410:	8e c0                	mov    %eax,%es
    asm volatile ("movw %%ax, %%ds" :: "a" (KERNEL_DS));
c0106412:	b8 10 00 00 00       	mov    $0x10,%eax
c0106417:	8e d8                	mov    %eax,%ds
    asm volatile ("movw %%ax, %%ss" :: "a" (KERNEL_DS));
c0106419:	b8 10 00 00 00       	mov    $0x10,%eax
c010641e:	8e d0                	mov    %eax,%ss
    // reload cs
    asm volatile ("ljmp %0, $1f\n 1:\n" :: "i" (KERNEL_CS));
c0106420:	ea 27 64 10 c0 08 00 	ljmp   $0x8,$0xc0106427
}
c0106427:	5d                   	pop    %ebp
c0106428:	c3                   	ret    

c0106429 <load_esp0>:
 * load_esp0 - change the ESP0 in default task state segment,
 * so that we can use different kernel stack when we trap frame
 * user to kernel.
 * */
void
load_esp0(uintptr_t esp0) {
c0106429:	55                   	push   %ebp
c010642a:	89 e5                	mov    %esp,%ebp
    ts.ts_esp0 = esp0;
c010642c:	8b 45 08             	mov    0x8(%ebp),%eax
c010642f:	a3 04 0f 1a c0       	mov    %eax,0xc01a0f04
}
c0106434:	5d                   	pop    %ebp
c0106435:	c3                   	ret    

c0106436 <gdt_init>:

/* gdt_init - initialize the default GDT and TSS */
static void
gdt_init(void) {
c0106436:	55                   	push   %ebp
c0106437:	89 e5                	mov    %esp,%ebp
c0106439:	83 ec 14             	sub    $0x14,%esp
    // set boot kernel stack and default SS0
    load_esp0((uintptr_t)bootstacktop);
c010643c:	b8 00 e0 12 c0       	mov    $0xc012e000,%eax
c0106441:	89 04 24             	mov    %eax,(%esp)
c0106444:	e8 e0 ff ff ff       	call   c0106429 <load_esp0>
    ts.ts_ss0 = KERNEL_DS;
c0106449:	66 c7 05 08 0f 1a c0 	movw   $0x10,0xc01a0f08
c0106450:	10 00 

    // initialize the TSS filed of the gdt
    gdt[SEG_TSS] = SEGTSS(STS_T32A, (uintptr_t)&ts, sizeof(ts), DPL_KERNEL);
c0106452:	66 c7 05 48 ea 12 c0 	movw   $0x68,0xc012ea48
c0106459:	68 00 
c010645b:	b8 00 0f 1a c0       	mov    $0xc01a0f00,%eax
c0106460:	66 a3 4a ea 12 c0    	mov    %ax,0xc012ea4a
c0106466:	b8 00 0f 1a c0       	mov    $0xc01a0f00,%eax
c010646b:	c1 e8 10             	shr    $0x10,%eax
c010646e:	a2 4c ea 12 c0       	mov    %al,0xc012ea4c
c0106473:	0f b6 05 4d ea 12 c0 	movzbl 0xc012ea4d,%eax
c010647a:	83 e0 f0             	and    $0xfffffff0,%eax
c010647d:	83 c8 09             	or     $0x9,%eax
c0106480:	a2 4d ea 12 c0       	mov    %al,0xc012ea4d
c0106485:	0f b6 05 4d ea 12 c0 	movzbl 0xc012ea4d,%eax
c010648c:	83 e0 ef             	and    $0xffffffef,%eax
c010648f:	a2 4d ea 12 c0       	mov    %al,0xc012ea4d
c0106494:	0f b6 05 4d ea 12 c0 	movzbl 0xc012ea4d,%eax
c010649b:	83 e0 9f             	and    $0xffffff9f,%eax
c010649e:	a2 4d ea 12 c0       	mov    %al,0xc012ea4d
c01064a3:	0f b6 05 4d ea 12 c0 	movzbl 0xc012ea4d,%eax
c01064aa:	83 c8 80             	or     $0xffffff80,%eax
c01064ad:	a2 4d ea 12 c0       	mov    %al,0xc012ea4d
c01064b2:	0f b6 05 4e ea 12 c0 	movzbl 0xc012ea4e,%eax
c01064b9:	83 e0 f0             	and    $0xfffffff0,%eax
c01064bc:	a2 4e ea 12 c0       	mov    %al,0xc012ea4e
c01064c1:	0f b6 05 4e ea 12 c0 	movzbl 0xc012ea4e,%eax
c01064c8:	83 e0 ef             	and    $0xffffffef,%eax
c01064cb:	a2 4e ea 12 c0       	mov    %al,0xc012ea4e
c01064d0:	0f b6 05 4e ea 12 c0 	movzbl 0xc012ea4e,%eax
c01064d7:	83 e0 df             	and    $0xffffffdf,%eax
c01064da:	a2 4e ea 12 c0       	mov    %al,0xc012ea4e
c01064df:	0f b6 05 4e ea 12 c0 	movzbl 0xc012ea4e,%eax
c01064e6:	83 c8 40             	or     $0x40,%eax
c01064e9:	a2 4e ea 12 c0       	mov    %al,0xc012ea4e
c01064ee:	0f b6 05 4e ea 12 c0 	movzbl 0xc012ea4e,%eax
c01064f5:	83 e0 7f             	and    $0x7f,%eax
c01064f8:	a2 4e ea 12 c0       	mov    %al,0xc012ea4e
c01064fd:	b8 00 0f 1a c0       	mov    $0xc01a0f00,%eax
c0106502:	c1 e8 18             	shr    $0x18,%eax
c0106505:	a2 4f ea 12 c0       	mov    %al,0xc012ea4f

    // reload all segment registers
    lgdt(&gdt_pd);
c010650a:	c7 04 24 50 ea 12 c0 	movl   $0xc012ea50,(%esp)
c0106511:	e8 de fe ff ff       	call   c01063f4 <lgdt>
c0106516:	66 c7 45 fe 28 00    	movw   $0x28,-0x2(%ebp)
    asm volatile ("cli" ::: "memory");
}

static inline void
ltr(uint16_t sel) {
    asm volatile ("ltr %0" :: "r" (sel) : "memory");
c010651c:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
c0106520:	0f 00 d8             	ltr    %ax

    // load the TSS
    ltr(GD_TSS);
}
c0106523:	c9                   	leave  
c0106524:	c3                   	ret    

c0106525 <init_pmm_manager>:

//init_pmm_manager - initialize a pmm_manager instance
static void
init_pmm_manager(void) {
c0106525:	55                   	push   %ebp
c0106526:	89 e5                	mov    %esp,%ebp
c0106528:	83 ec 18             	sub    $0x18,%esp
    pmm_manager = &default_pmm_manager;
c010652b:	c7 05 c8 2f 1a c0 f0 	movl   $0xc010e3f0,0xc01a2fc8
c0106532:	e3 10 c0 
    cprintf("memory management: %s\n", pmm_manager->name);
c0106535:	a1 c8 2f 1a c0       	mov    0xc01a2fc8,%eax
c010653a:	8b 00                	mov    (%eax),%eax
c010653c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0106540:	c7 04 24 90 e5 10 c0 	movl   $0xc010e590,(%esp)
c0106547:	e8 8a b2 ff ff       	call   c01017d6 <cprintf>
    pmm_manager->init();
c010654c:	a1 c8 2f 1a c0       	mov    0xc01a2fc8,%eax
c0106551:	8b 40 04             	mov    0x4(%eax),%eax
c0106554:	ff d0                	call   *%eax
}
c0106556:	c9                   	leave  
c0106557:	c3                   	ret    

c0106558 <init_memmap>:

//init_memmap - call pmm->init_memmap to build Page struct for free memory  
static void
init_memmap(struct Page *base, size_t n) {
c0106558:	55                   	push   %ebp
c0106559:	89 e5                	mov    %esp,%ebp
c010655b:	83 ec 18             	sub    $0x18,%esp
    pmm_manager->init_memmap(base, n);
c010655e:	a1 c8 2f 1a c0       	mov    0xc01a2fc8,%eax
c0106563:	8b 40 08             	mov    0x8(%eax),%eax
c0106566:	8b 55 0c             	mov    0xc(%ebp),%edx
c0106569:	89 54 24 04          	mov    %edx,0x4(%esp)
c010656d:	8b 55 08             	mov    0x8(%ebp),%edx
c0106570:	89 14 24             	mov    %edx,(%esp)
c0106573:	ff d0                	call   *%eax
}
c0106575:	c9                   	leave  
c0106576:	c3                   	ret    

c0106577 <page_tot>:

//alloc_pages - call pmm->alloc_pages to allocate a continuous n*PAGESIZE memory 

static int pagetot = 0;
int page_tot(int id) {
c0106577:	55                   	push   %ebp
c0106578:	89 e5                	mov    %esp,%ebp
c010657a:	83 ec 28             	sub    $0x28,%esp
	int a = nr_free_pages()-31861;
c010657d:	e8 e2 00 00 00       	call   c0106664 <nr_free_pages>
c0106582:	2d 75 7c 00 00       	sub    $0x7c75,%eax
c0106587:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("*** id=%d, pagetot=%d\n", id, a);
c010658a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010658d:	89 44 24 08          	mov    %eax,0x8(%esp)
c0106591:	8b 45 08             	mov    0x8(%ebp),%eax
c0106594:	89 44 24 04          	mov    %eax,0x4(%esp)
c0106598:	c7 04 24 a7 e5 10 c0 	movl   $0xc010e5a7,(%esp)
c010659f:	e8 32 b2 ff ff       	call   c01017d6 <cprintf>
	return a;
c01065a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01065a7:	c9                   	leave  
c01065a8:	c3                   	ret    

c01065a9 <alloc_pages>:

struct Page *
alloc_pages(size_t n) {
c01065a9:	55                   	push   %ebp
c01065aa:	89 e5                	mov    %esp,%ebp
c01065ac:	83 ec 28             	sub    $0x28,%esp
    struct Page *page=NULL;
c01065af:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    bool intr_flag;
    
    while (1)
    {
         local_intr_save(intr_flag);
c01065b6:	e8 fc fd ff ff       	call   c01063b7 <__intr_save>
c01065bb:	89 45 f0             	mov    %eax,-0x10(%ebp)
         {
              page = pmm_manager->alloc_pages(n);
c01065be:	a1 c8 2f 1a c0       	mov    0xc01a2fc8,%eax
c01065c3:	8b 40 0c             	mov    0xc(%eax),%eax
c01065c6:	8b 55 08             	mov    0x8(%ebp),%edx
c01065c9:	89 14 24             	mov    %edx,(%esp)
c01065cc:	ff d0                	call   *%eax
c01065ce:	89 45 f4             	mov    %eax,-0xc(%ebp)
         }
         local_intr_restore(intr_flag);
c01065d1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01065d4:	89 04 24             	mov    %eax,(%esp)
c01065d7:	e8 05 fe ff ff       	call   c01063e1 <__intr_restore>

         if (page != NULL || n > 1 || swap_init_ok == 0) break;
c01065dc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01065e0:	75 2d                	jne    c010660f <alloc_pages+0x66>
c01065e2:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
c01065e6:	77 27                	ja     c010660f <alloc_pages+0x66>
c01065e8:	a1 70 0f 1a c0       	mov    0xc01a0f70,%eax
c01065ed:	85 c0                	test   %eax,%eax
c01065ef:	74 1e                	je     c010660f <alloc_pages+0x66>
         
         extern struct mm_struct *check_mm_struct;
         //cprintf("page %x, call swap_out in alloc_pages %d\n",page, n);
         swap_out(check_mm_struct, n, 0);
c01065f1:	8b 55 08             	mov    0x8(%ebp),%edx
c01065f4:	a1 ac 30 1a c0       	mov    0xc01a30ac,%eax
c01065f9:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0106600:	00 
c0106601:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106605:	89 04 24             	mov    %eax,(%esp)
c0106608:	e8 c1 1d 00 00       	call   c01083ce <swap_out>
    }
c010660d:	eb a7                	jmp    c01065b6 <alloc_pages+0xd>

    //cprintf("n %d,get page %x, No %d in alloc_pages\n",n,page,(page-pages));

    pagetot += n;
c010660f:	a1 68 0f 1a c0       	mov    0xc01a0f68,%eax
c0106614:	89 c2                	mov    %eax,%edx
c0106616:	8b 45 08             	mov    0x8(%ebp),%eax
c0106619:	01 d0                	add    %edx,%eax
c010661b:	a3 68 0f 1a c0       	mov    %eax,0xc01a0f68

    //cprintf("!!!alloc_pages : %d\n", pagetot);
    return page;
c0106620:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0106623:	c9                   	leave  
c0106624:	c3                   	ret    

c0106625 <free_pages>:

//free_pages - call pmm->free_pages to free a continuous n*PAGESIZE memory 
void
free_pages(struct Page *base, size_t n) {
c0106625:	55                   	push   %ebp
c0106626:	89 e5                	mov    %esp,%ebp
c0106628:	83 ec 28             	sub    $0x28,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c010662b:	e8 87 fd ff ff       	call   c01063b7 <__intr_save>
c0106630:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        pmm_manager->free_pages(base, n);
c0106633:	a1 c8 2f 1a c0       	mov    0xc01a2fc8,%eax
c0106638:	8b 40 10             	mov    0x10(%eax),%eax
c010663b:	8b 55 0c             	mov    0xc(%ebp),%edx
c010663e:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106642:	8b 55 08             	mov    0x8(%ebp),%edx
c0106645:	89 14 24             	mov    %edx,(%esp)
c0106648:	ff d0                	call   *%eax
    }
    local_intr_restore(intr_flag);
c010664a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010664d:	89 04 24             	mov    %eax,(%esp)
c0106650:	e8 8c fd ff ff       	call   c01063e1 <__intr_restore>

    pagetot -= n;
c0106655:	a1 68 0f 1a c0       	mov    0xc01a0f68,%eax
c010665a:	2b 45 0c             	sub    0xc(%ebp),%eax
c010665d:	a3 68 0f 1a c0       	mov    %eax,0xc01a0f68

    //cprintf("!!!alloc_pages : %d\n", pagetot);
}
c0106662:	c9                   	leave  
c0106663:	c3                   	ret    

c0106664 <nr_free_pages>:

//nr_free_pages - call pmm->nr_free_pages to get the size (nr*PAGESIZE) 
//of current free memory
size_t
nr_free_pages(void) {
c0106664:	55                   	push   %ebp
c0106665:	89 e5                	mov    %esp,%ebp
c0106667:	83 ec 28             	sub    $0x28,%esp
    size_t ret;
    bool intr_flag;
    local_intr_save(intr_flag);
c010666a:	e8 48 fd ff ff       	call   c01063b7 <__intr_save>
c010666f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        ret = pmm_manager->nr_free_pages();
c0106672:	a1 c8 2f 1a c0       	mov    0xc01a2fc8,%eax
c0106677:	8b 40 14             	mov    0x14(%eax),%eax
c010667a:	ff d0                	call   *%eax
c010667c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }
    local_intr_restore(intr_flag);
c010667f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106682:	89 04 24             	mov    %eax,(%esp)
c0106685:	e8 57 fd ff ff       	call   c01063e1 <__intr_restore>
    return ret;
c010668a:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c010668d:	c9                   	leave  
c010668e:	c3                   	ret    

c010668f <page_init>:

/* pmm_init - initialize the physical memory management */
static void
page_init(void) {
c010668f:	55                   	push   %ebp
c0106690:	89 e5                	mov    %esp,%ebp
c0106692:	57                   	push   %edi
c0106693:	56                   	push   %esi
c0106694:	53                   	push   %ebx
c0106695:	81 ec 9c 00 00 00    	sub    $0x9c,%esp
    struct e820map *memmap = (struct e820map *)(0x8000 + KERNBASE);
c010669b:	c7 45 c4 00 80 00 c0 	movl   $0xc0008000,-0x3c(%ebp)
    uint64_t maxpa = 0;
c01066a2:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
c01066a9:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

    cprintf("e820map:\n");
c01066b0:	c7 04 24 be e5 10 c0 	movl   $0xc010e5be,(%esp)
c01066b7:	e8 1a b1 ff ff       	call   c01017d6 <cprintf>
    int i;
    for (i = 0; i < memmap->nr_map; i ++) {
c01066bc:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c01066c3:	e9 15 01 00 00       	jmp    c01067dd <page_init+0x14e>
        uint64_t begin = memmap->map[i].addr, end = begin + memmap->map[i].size;
c01066c8:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c01066cb:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01066ce:	89 d0                	mov    %edx,%eax
c01066d0:	c1 e0 02             	shl    $0x2,%eax
c01066d3:	01 d0                	add    %edx,%eax
c01066d5:	c1 e0 02             	shl    $0x2,%eax
c01066d8:	01 c8                	add    %ecx,%eax
c01066da:	8b 50 08             	mov    0x8(%eax),%edx
c01066dd:	8b 40 04             	mov    0x4(%eax),%eax
c01066e0:	89 45 b8             	mov    %eax,-0x48(%ebp)
c01066e3:	89 55 bc             	mov    %edx,-0x44(%ebp)
c01066e6:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c01066e9:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01066ec:	89 d0                	mov    %edx,%eax
c01066ee:	c1 e0 02             	shl    $0x2,%eax
c01066f1:	01 d0                	add    %edx,%eax
c01066f3:	c1 e0 02             	shl    $0x2,%eax
c01066f6:	01 c8                	add    %ecx,%eax
c01066f8:	8b 48 0c             	mov    0xc(%eax),%ecx
c01066fb:	8b 58 10             	mov    0x10(%eax),%ebx
c01066fe:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0106701:	8b 55 bc             	mov    -0x44(%ebp),%edx
c0106704:	01 c8                	add    %ecx,%eax
c0106706:	11 da                	adc    %ebx,%edx
c0106708:	89 45 b0             	mov    %eax,-0x50(%ebp)
c010670b:	89 55 b4             	mov    %edx,-0x4c(%ebp)
        cprintf("  memory: %08llx, [%08llx, %08llx], type = %d.\n",
c010670e:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0106711:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0106714:	89 d0                	mov    %edx,%eax
c0106716:	c1 e0 02             	shl    $0x2,%eax
c0106719:	01 d0                	add    %edx,%eax
c010671b:	c1 e0 02             	shl    $0x2,%eax
c010671e:	01 c8                	add    %ecx,%eax
c0106720:	83 c0 14             	add    $0x14,%eax
c0106723:	8b 00                	mov    (%eax),%eax
c0106725:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
c010672b:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010672e:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c0106731:	83 c0 ff             	add    $0xffffffff,%eax
c0106734:	83 d2 ff             	adc    $0xffffffff,%edx
c0106737:	89 c6                	mov    %eax,%esi
c0106739:	89 d7                	mov    %edx,%edi
c010673b:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c010673e:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0106741:	89 d0                	mov    %edx,%eax
c0106743:	c1 e0 02             	shl    $0x2,%eax
c0106746:	01 d0                	add    %edx,%eax
c0106748:	c1 e0 02             	shl    $0x2,%eax
c010674b:	01 c8                	add    %ecx,%eax
c010674d:	8b 48 0c             	mov    0xc(%eax),%ecx
c0106750:	8b 58 10             	mov    0x10(%eax),%ebx
c0106753:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
c0106759:	89 44 24 1c          	mov    %eax,0x1c(%esp)
c010675d:	89 74 24 14          	mov    %esi,0x14(%esp)
c0106761:	89 7c 24 18          	mov    %edi,0x18(%esp)
c0106765:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0106768:	8b 55 bc             	mov    -0x44(%ebp),%edx
c010676b:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010676f:	89 54 24 10          	mov    %edx,0x10(%esp)
c0106773:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c0106777:	89 5c 24 08          	mov    %ebx,0x8(%esp)
c010677b:	c7 04 24 c8 e5 10 c0 	movl   $0xc010e5c8,(%esp)
c0106782:	e8 4f b0 ff ff       	call   c01017d6 <cprintf>
                memmap->map[i].size, begin, end - 1, memmap->map[i].type);
        if (memmap->map[i].type == E820_ARM) {
c0106787:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c010678a:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010678d:	89 d0                	mov    %edx,%eax
c010678f:	c1 e0 02             	shl    $0x2,%eax
c0106792:	01 d0                	add    %edx,%eax
c0106794:	c1 e0 02             	shl    $0x2,%eax
c0106797:	01 c8                	add    %ecx,%eax
c0106799:	83 c0 14             	add    $0x14,%eax
c010679c:	8b 00                	mov    (%eax),%eax
c010679e:	83 f8 01             	cmp    $0x1,%eax
c01067a1:	75 36                	jne    c01067d9 <page_init+0x14a>
            if (maxpa < end && begin < KMEMSIZE) {
c01067a3:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01067a6:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01067a9:	3b 55 b4             	cmp    -0x4c(%ebp),%edx
c01067ac:	77 2b                	ja     c01067d9 <page_init+0x14a>
c01067ae:	3b 55 b4             	cmp    -0x4c(%ebp),%edx
c01067b1:	72 05                	jb     c01067b8 <page_init+0x129>
c01067b3:	3b 45 b0             	cmp    -0x50(%ebp),%eax
c01067b6:	73 21                	jae    c01067d9 <page_init+0x14a>
c01067b8:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c01067bc:	77 1b                	ja     c01067d9 <page_init+0x14a>
c01067be:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c01067c2:	72 09                	jb     c01067cd <page_init+0x13e>
c01067c4:	81 7d b8 ff ff ff 37 	cmpl   $0x37ffffff,-0x48(%ebp)
c01067cb:	77 0c                	ja     c01067d9 <page_init+0x14a>
                maxpa = end;
c01067cd:	8b 45 b0             	mov    -0x50(%ebp),%eax
c01067d0:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c01067d3:	89 45 e0             	mov    %eax,-0x20(%ebp)
c01067d6:	89 55 e4             	mov    %edx,-0x1c(%ebp)
    struct e820map *memmap = (struct e820map *)(0x8000 + KERNBASE);
    uint64_t maxpa = 0;

    cprintf("e820map:\n");
    int i;
    for (i = 0; i < memmap->nr_map; i ++) {
c01067d9:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
c01067dd:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c01067e0:	8b 00                	mov    (%eax),%eax
c01067e2:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c01067e5:	0f 8f dd fe ff ff    	jg     c01066c8 <page_init+0x39>
            if (maxpa < end && begin < KMEMSIZE) {
                maxpa = end;
            }
        }
    }
    if (maxpa > KMEMSIZE) {
c01067eb:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c01067ef:	72 1d                	jb     c010680e <page_init+0x17f>
c01067f1:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c01067f5:	77 09                	ja     c0106800 <page_init+0x171>
c01067f7:	81 7d e0 00 00 00 38 	cmpl   $0x38000000,-0x20(%ebp)
c01067fe:	76 0e                	jbe    c010680e <page_init+0x17f>
        maxpa = KMEMSIZE;
c0106800:	c7 45 e0 00 00 00 38 	movl   $0x38000000,-0x20(%ebp)
c0106807:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
    }

    extern char end[];

    npage = maxpa / PGSIZE;
c010680e:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0106811:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0106814:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
c0106818:	c1 ea 0c             	shr    $0xc,%edx
c010681b:	a3 e0 0e 1a c0       	mov    %eax,0xc01a0ee0
    pages = (struct Page *)ROUNDUP((void *)end, PGSIZE);
c0106820:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
c0106827:	b8 b8 30 1a c0       	mov    $0xc01a30b8,%eax
c010682c:	8d 50 ff             	lea    -0x1(%eax),%edx
c010682f:	8b 45 ac             	mov    -0x54(%ebp),%eax
c0106832:	01 d0                	add    %edx,%eax
c0106834:	89 45 a8             	mov    %eax,-0x58(%ebp)
c0106837:	8b 45 a8             	mov    -0x58(%ebp),%eax
c010683a:	ba 00 00 00 00       	mov    $0x0,%edx
c010683f:	f7 75 ac             	divl   -0x54(%ebp)
c0106842:	89 d0                	mov    %edx,%eax
c0106844:	8b 55 a8             	mov    -0x58(%ebp),%edx
c0106847:	29 c2                	sub    %eax,%edx
c0106849:	89 d0                	mov    %edx,%eax
c010684b:	a3 d0 2f 1a c0       	mov    %eax,0xc01a2fd0

    for (i = 0; i < npage; i ++) {
c0106850:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c0106857:	eb 2f                	jmp    c0106888 <page_init+0x1f9>
        SetPageReserved(pages + i);
c0106859:	8b 0d d0 2f 1a c0    	mov    0xc01a2fd0,%ecx
c010685f:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0106862:	89 d0                	mov    %edx,%eax
c0106864:	c1 e0 03             	shl    $0x3,%eax
c0106867:	01 d0                	add    %edx,%eax
c0106869:	c1 e0 02             	shl    $0x2,%eax
c010686c:	01 c8                	add    %ecx,%eax
c010686e:	83 c0 04             	add    $0x4,%eax
c0106871:	c7 45 90 00 00 00 00 	movl   $0x0,-0x70(%ebp)
c0106878:	89 45 8c             	mov    %eax,-0x74(%ebp)
 * Note that @nr may be almost arbitrarily large; this function is not
 * restricted to acting on a single-word quantity.
 * */
static inline void
set_bit(int nr, volatile void *addr) {
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c010687b:	8b 45 8c             	mov    -0x74(%ebp),%eax
c010687e:	8b 55 90             	mov    -0x70(%ebp),%edx
c0106881:	0f ab 10             	bts    %edx,(%eax)
    extern char end[];

    npage = maxpa / PGSIZE;
    pages = (struct Page *)ROUNDUP((void *)end, PGSIZE);

    for (i = 0; i < npage; i ++) {
c0106884:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
c0106888:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010688b:	a1 e0 0e 1a c0       	mov    0xc01a0ee0,%eax
c0106890:	39 c2                	cmp    %eax,%edx
c0106892:	72 c5                	jb     c0106859 <page_init+0x1ca>
        SetPageReserved(pages + i);
    }

    uintptr_t freemem = PADDR((uintptr_t)pages + sizeof(struct Page) * npage);
c0106894:	8b 15 e0 0e 1a c0    	mov    0xc01a0ee0,%edx
c010689a:	89 d0                	mov    %edx,%eax
c010689c:	c1 e0 03             	shl    $0x3,%eax
c010689f:	01 d0                	add    %edx,%eax
c01068a1:	c1 e0 02             	shl    $0x2,%eax
c01068a4:	89 c2                	mov    %eax,%edx
c01068a6:	a1 d0 2f 1a c0       	mov    0xc01a2fd0,%eax
c01068ab:	01 d0                	add    %edx,%eax
c01068ad:	89 45 a4             	mov    %eax,-0x5c(%ebp)
c01068b0:	81 7d a4 ff ff ff bf 	cmpl   $0xbfffffff,-0x5c(%ebp)
c01068b7:	77 23                	ja     c01068dc <page_init+0x24d>
c01068b9:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c01068bc:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01068c0:	c7 44 24 08 f8 e5 10 	movl   $0xc010e5f8,0x8(%esp)
c01068c7:	c0 
c01068c8:	c7 44 24 04 fa 00 00 	movl   $0xfa,0x4(%esp)
c01068cf:	00 
c01068d0:	c7 04 24 1c e6 10 c0 	movl   $0xc010e61c,(%esp)
c01068d7:	e8 7c b9 ff ff       	call   c0102258 <__panic>
c01068dc:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c01068df:	05 00 00 00 40       	add    $0x40000000,%eax
c01068e4:	89 45 a0             	mov    %eax,-0x60(%ebp)

    for (i = 0; i < memmap->nr_map; i ++) {
c01068e7:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c01068ee:	e9 74 01 00 00       	jmp    c0106a67 <page_init+0x3d8>
        uint64_t begin = memmap->map[i].addr, end = begin + memmap->map[i].size;
c01068f3:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c01068f6:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01068f9:	89 d0                	mov    %edx,%eax
c01068fb:	c1 e0 02             	shl    $0x2,%eax
c01068fe:	01 d0                	add    %edx,%eax
c0106900:	c1 e0 02             	shl    $0x2,%eax
c0106903:	01 c8                	add    %ecx,%eax
c0106905:	8b 50 08             	mov    0x8(%eax),%edx
c0106908:	8b 40 04             	mov    0x4(%eax),%eax
c010690b:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010690e:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c0106911:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0106914:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0106917:	89 d0                	mov    %edx,%eax
c0106919:	c1 e0 02             	shl    $0x2,%eax
c010691c:	01 d0                	add    %edx,%eax
c010691e:	c1 e0 02             	shl    $0x2,%eax
c0106921:	01 c8                	add    %ecx,%eax
c0106923:	8b 48 0c             	mov    0xc(%eax),%ecx
c0106926:	8b 58 10             	mov    0x10(%eax),%ebx
c0106929:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010692c:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010692f:	01 c8                	add    %ecx,%eax
c0106931:	11 da                	adc    %ebx,%edx
c0106933:	89 45 c8             	mov    %eax,-0x38(%ebp)
c0106936:	89 55 cc             	mov    %edx,-0x34(%ebp)
        if (memmap->map[i].type == E820_ARM) {
c0106939:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c010693c:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010693f:	89 d0                	mov    %edx,%eax
c0106941:	c1 e0 02             	shl    $0x2,%eax
c0106944:	01 d0                	add    %edx,%eax
c0106946:	c1 e0 02             	shl    $0x2,%eax
c0106949:	01 c8                	add    %ecx,%eax
c010694b:	83 c0 14             	add    $0x14,%eax
c010694e:	8b 00                	mov    (%eax),%eax
c0106950:	83 f8 01             	cmp    $0x1,%eax
c0106953:	0f 85 0a 01 00 00    	jne    c0106a63 <page_init+0x3d4>
            if (begin < freemem) {
c0106959:	8b 45 a0             	mov    -0x60(%ebp),%eax
c010695c:	ba 00 00 00 00       	mov    $0x0,%edx
c0106961:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c0106964:	72 17                	jb     c010697d <page_init+0x2ee>
c0106966:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c0106969:	77 05                	ja     c0106970 <page_init+0x2e1>
c010696b:	3b 45 d0             	cmp    -0x30(%ebp),%eax
c010696e:	76 0d                	jbe    c010697d <page_init+0x2ee>
                begin = freemem;
c0106970:	8b 45 a0             	mov    -0x60(%ebp),%eax
c0106973:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0106976:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
            }
            if (end > KMEMSIZE) {
c010697d:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c0106981:	72 1d                	jb     c01069a0 <page_init+0x311>
c0106983:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c0106987:	77 09                	ja     c0106992 <page_init+0x303>
c0106989:	81 7d c8 00 00 00 38 	cmpl   $0x38000000,-0x38(%ebp)
c0106990:	76 0e                	jbe    c01069a0 <page_init+0x311>
                end = KMEMSIZE;
c0106992:	c7 45 c8 00 00 00 38 	movl   $0x38000000,-0x38(%ebp)
c0106999:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
            }
            if (begin < end) {
c01069a0:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01069a3:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01069a6:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c01069a9:	0f 87 b4 00 00 00    	ja     c0106a63 <page_init+0x3d4>
c01069af:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c01069b2:	72 09                	jb     c01069bd <page_init+0x32e>
c01069b4:	3b 45 c8             	cmp    -0x38(%ebp),%eax
c01069b7:	0f 83 a6 00 00 00    	jae    c0106a63 <page_init+0x3d4>
                begin = ROUNDUP(begin, PGSIZE);
c01069bd:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
c01069c4:	8b 55 d0             	mov    -0x30(%ebp),%edx
c01069c7:	8b 45 9c             	mov    -0x64(%ebp),%eax
c01069ca:	01 d0                	add    %edx,%eax
c01069cc:	83 e8 01             	sub    $0x1,%eax
c01069cf:	89 45 98             	mov    %eax,-0x68(%ebp)
c01069d2:	8b 45 98             	mov    -0x68(%ebp),%eax
c01069d5:	ba 00 00 00 00       	mov    $0x0,%edx
c01069da:	f7 75 9c             	divl   -0x64(%ebp)
c01069dd:	89 d0                	mov    %edx,%eax
c01069df:	8b 55 98             	mov    -0x68(%ebp),%edx
c01069e2:	29 c2                	sub    %eax,%edx
c01069e4:	89 d0                	mov    %edx,%eax
c01069e6:	ba 00 00 00 00       	mov    $0x0,%edx
c01069eb:	89 45 d0             	mov    %eax,-0x30(%ebp)
c01069ee:	89 55 d4             	mov    %edx,-0x2c(%ebp)
                end = ROUNDDOWN(end, PGSIZE);
c01069f1:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01069f4:	89 45 94             	mov    %eax,-0x6c(%ebp)
c01069f7:	8b 45 94             	mov    -0x6c(%ebp),%eax
c01069fa:	ba 00 00 00 00       	mov    $0x0,%edx
c01069ff:	89 c7                	mov    %eax,%edi
c0106a01:	81 e7 00 f0 ff ff    	and    $0xfffff000,%edi
c0106a07:	89 7d 80             	mov    %edi,-0x80(%ebp)
c0106a0a:	89 d0                	mov    %edx,%eax
c0106a0c:	83 e0 00             	and    $0x0,%eax
c0106a0f:	89 45 84             	mov    %eax,-0x7c(%ebp)
c0106a12:	8b 45 80             	mov    -0x80(%ebp),%eax
c0106a15:	8b 55 84             	mov    -0x7c(%ebp),%edx
c0106a18:	89 45 c8             	mov    %eax,-0x38(%ebp)
c0106a1b:	89 55 cc             	mov    %edx,-0x34(%ebp)
                if (begin < end) {
c0106a1e:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0106a21:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0106a24:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c0106a27:	77 3a                	ja     c0106a63 <page_init+0x3d4>
c0106a29:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c0106a2c:	72 05                	jb     c0106a33 <page_init+0x3a4>
c0106a2e:	3b 45 c8             	cmp    -0x38(%ebp),%eax
c0106a31:	73 30                	jae    c0106a63 <page_init+0x3d4>
                    init_memmap(pa2page(begin), (end - begin) / PGSIZE);
c0106a33:	8b 4d d0             	mov    -0x30(%ebp),%ecx
c0106a36:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
c0106a39:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0106a3c:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0106a3f:	29 c8                	sub    %ecx,%eax
c0106a41:	19 da                	sbb    %ebx,%edx
c0106a43:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
c0106a47:	c1 ea 0c             	shr    $0xc,%edx
c0106a4a:	89 c3                	mov    %eax,%ebx
c0106a4c:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0106a4f:	89 04 24             	mov    %eax,(%esp)
c0106a52:	e8 22 f8 ff ff       	call   c0106279 <pa2page>
c0106a57:	89 5c 24 04          	mov    %ebx,0x4(%esp)
c0106a5b:	89 04 24             	mov    %eax,(%esp)
c0106a5e:	e8 f5 fa ff ff       	call   c0106558 <init_memmap>
        SetPageReserved(pages + i);
    }

    uintptr_t freemem = PADDR((uintptr_t)pages + sizeof(struct Page) * npage);

    for (i = 0; i < memmap->nr_map; i ++) {
c0106a63:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
c0106a67:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0106a6a:	8b 00                	mov    (%eax),%eax
c0106a6c:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c0106a6f:	0f 8f 7e fe ff ff    	jg     c01068f3 <page_init+0x264>
                    init_memmap(pa2page(begin), (end - begin) / PGSIZE);
                }
            }
        }
    }
}
c0106a75:	81 c4 9c 00 00 00    	add    $0x9c,%esp
c0106a7b:	5b                   	pop    %ebx
c0106a7c:	5e                   	pop    %esi
c0106a7d:	5f                   	pop    %edi
c0106a7e:	5d                   	pop    %ebp
c0106a7f:	c3                   	ret    

c0106a80 <enable_paging>:

static void
enable_paging(void) {
c0106a80:	55                   	push   %ebp
c0106a81:	89 e5                	mov    %esp,%ebp
c0106a83:	83 ec 10             	sub    $0x10,%esp
    lcr3(boot_cr3);
c0106a86:	a1 cc 2f 1a c0       	mov    0xc01a2fcc,%eax
c0106a8b:	89 45 f8             	mov    %eax,-0x8(%ebp)
    asm volatile ("mov %0, %%cr0" :: "r" (cr0) : "memory");
}

static inline void
lcr3(uintptr_t cr3) {
    asm volatile ("mov %0, %%cr3" :: "r" (cr3) : "memory");
c0106a8e:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0106a91:	0f 22 d8             	mov    %eax,%cr3
}

static inline uintptr_t
rcr0(void) {
    uintptr_t cr0;
    asm volatile ("mov %%cr0, %0" : "=r" (cr0) :: "memory");
c0106a94:	0f 20 c0             	mov    %cr0,%eax
c0106a97:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return cr0;
c0106a9a:	8b 45 f4             	mov    -0xc(%ebp),%eax

    // turn on paging
    uint32_t cr0 = rcr0();
c0106a9d:	89 45 fc             	mov    %eax,-0x4(%ebp)
    cr0 |= CR0_PE | CR0_PG | CR0_AM | CR0_WP | CR0_NE | CR0_TS | CR0_EM | CR0_MP;
c0106aa0:	81 4d fc 2f 00 05 80 	orl    $0x8005002f,-0x4(%ebp)
    cr0 &= ~(CR0_TS | CR0_EM);
c0106aa7:	83 65 fc f3          	andl   $0xfffffff3,-0x4(%ebp)
c0106aab:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106aae:	89 45 f0             	mov    %eax,-0x10(%ebp)
    asm volatile ("pushl %0; popfl" :: "r" (eflags));
}

static inline void
lcr0(uintptr_t cr0) {
    asm volatile ("mov %0, %%cr0" :: "r" (cr0) : "memory");
c0106ab1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106ab4:	0f 22 c0             	mov    %eax,%cr0
    lcr0(cr0);
}
c0106ab7:	c9                   	leave  
c0106ab8:	c3                   	ret    

c0106ab9 <boot_map_segment>:
//  la:   linear address of this memory need to map (after x86 segment map)
//  size: memory size
//  pa:   physical address of this memory
//  perm: permission of this memory  
static void
boot_map_segment(pde_t *pgdir, uintptr_t la, size_t size, uintptr_t pa, uint32_t perm) {
c0106ab9:	55                   	push   %ebp
c0106aba:	89 e5                	mov    %esp,%ebp
c0106abc:	83 ec 38             	sub    $0x38,%esp
    assert(PGOFF(la) == PGOFF(pa));
c0106abf:	8b 45 14             	mov    0x14(%ebp),%eax
c0106ac2:	8b 55 0c             	mov    0xc(%ebp),%edx
c0106ac5:	31 d0                	xor    %edx,%eax
c0106ac7:	25 ff 0f 00 00       	and    $0xfff,%eax
c0106acc:	85 c0                	test   %eax,%eax
c0106ace:	74 24                	je     c0106af4 <boot_map_segment+0x3b>
c0106ad0:	c7 44 24 0c 2a e6 10 	movl   $0xc010e62a,0xc(%esp)
c0106ad7:	c0 
c0106ad8:	c7 44 24 08 41 e6 10 	movl   $0xc010e641,0x8(%esp)
c0106adf:	c0 
c0106ae0:	c7 44 24 04 23 01 00 	movl   $0x123,0x4(%esp)
c0106ae7:	00 
c0106ae8:	c7 04 24 1c e6 10 c0 	movl   $0xc010e61c,(%esp)
c0106aef:	e8 64 b7 ff ff       	call   c0102258 <__panic>
    size_t n = ROUNDUP(size + PGOFF(la), PGSIZE) / PGSIZE;
c0106af4:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
c0106afb:	8b 45 0c             	mov    0xc(%ebp),%eax
c0106afe:	25 ff 0f 00 00       	and    $0xfff,%eax
c0106b03:	89 c2                	mov    %eax,%edx
c0106b05:	8b 45 10             	mov    0x10(%ebp),%eax
c0106b08:	01 c2                	add    %eax,%edx
c0106b0a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106b0d:	01 d0                	add    %edx,%eax
c0106b0f:	83 e8 01             	sub    $0x1,%eax
c0106b12:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0106b15:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106b18:	ba 00 00 00 00       	mov    $0x0,%edx
c0106b1d:	f7 75 f0             	divl   -0x10(%ebp)
c0106b20:	89 d0                	mov    %edx,%eax
c0106b22:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0106b25:	29 c2                	sub    %eax,%edx
c0106b27:	89 d0                	mov    %edx,%eax
c0106b29:	c1 e8 0c             	shr    $0xc,%eax
c0106b2c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    la = ROUNDDOWN(la, PGSIZE);
c0106b2f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0106b32:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0106b35:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0106b38:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0106b3d:	89 45 0c             	mov    %eax,0xc(%ebp)
    pa = ROUNDDOWN(pa, PGSIZE);
c0106b40:	8b 45 14             	mov    0x14(%ebp),%eax
c0106b43:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0106b46:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106b49:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0106b4e:	89 45 14             	mov    %eax,0x14(%ebp)
    for (; n > 0; n --, la += PGSIZE, pa += PGSIZE) {
c0106b51:	eb 6b                	jmp    c0106bbe <boot_map_segment+0x105>
        pte_t *ptep = get_pte(pgdir, la, 1);
c0106b53:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0106b5a:	00 
c0106b5b:	8b 45 0c             	mov    0xc(%ebp),%eax
c0106b5e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0106b62:	8b 45 08             	mov    0x8(%ebp),%eax
c0106b65:	89 04 24             	mov    %eax,(%esp)
c0106b68:	e8 d1 01 00 00       	call   c0106d3e <get_pte>
c0106b6d:	89 45 e0             	mov    %eax,-0x20(%ebp)
        assert(ptep != NULL);
c0106b70:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0106b74:	75 24                	jne    c0106b9a <boot_map_segment+0xe1>
c0106b76:	c7 44 24 0c 56 e6 10 	movl   $0xc010e656,0xc(%esp)
c0106b7d:	c0 
c0106b7e:	c7 44 24 08 41 e6 10 	movl   $0xc010e641,0x8(%esp)
c0106b85:	c0 
c0106b86:	c7 44 24 04 29 01 00 	movl   $0x129,0x4(%esp)
c0106b8d:	00 
c0106b8e:	c7 04 24 1c e6 10 c0 	movl   $0xc010e61c,(%esp)
c0106b95:	e8 be b6 ff ff       	call   c0102258 <__panic>
        *ptep = pa | PTE_P | perm;
c0106b9a:	8b 45 18             	mov    0x18(%ebp),%eax
c0106b9d:	8b 55 14             	mov    0x14(%ebp),%edx
c0106ba0:	09 d0                	or     %edx,%eax
c0106ba2:	83 c8 01             	or     $0x1,%eax
c0106ba5:	89 c2                	mov    %eax,%edx
c0106ba7:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0106baa:	89 10                	mov    %edx,(%eax)
boot_map_segment(pde_t *pgdir, uintptr_t la, size_t size, uintptr_t pa, uint32_t perm) {
    assert(PGOFF(la) == PGOFF(pa));
    size_t n = ROUNDUP(size + PGOFF(la), PGSIZE) / PGSIZE;
    la = ROUNDDOWN(la, PGSIZE);
    pa = ROUNDDOWN(pa, PGSIZE);
    for (; n > 0; n --, la += PGSIZE, pa += PGSIZE) {
c0106bac:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c0106bb0:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
c0106bb7:	81 45 14 00 10 00 00 	addl   $0x1000,0x14(%ebp)
c0106bbe:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0106bc2:	75 8f                	jne    c0106b53 <boot_map_segment+0x9a>
        pte_t *ptep = get_pte(pgdir, la, 1);
        assert(ptep != NULL);
        *ptep = pa | PTE_P | perm;
    }
}
c0106bc4:	c9                   	leave  
c0106bc5:	c3                   	ret    

c0106bc6 <boot_alloc_page>:

//boot_alloc_page - allocate one page using pmm->alloc_pages(1) 
// return value: the kernel virtual address of this allocated page
//note: this function is used to get the memory for PDT(Page Directory Table)&PT(Page Table)
static void *
boot_alloc_page(void) {
c0106bc6:	55                   	push   %ebp
c0106bc7:	89 e5                	mov    %esp,%ebp
c0106bc9:	83 ec 28             	sub    $0x28,%esp
    struct Page *p = alloc_page();
c0106bcc:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0106bd3:	e8 d1 f9 ff ff       	call   c01065a9 <alloc_pages>
c0106bd8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (p == NULL) {
c0106bdb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0106bdf:	75 1c                	jne    c0106bfd <boot_alloc_page+0x37>
        panic("boot_alloc_page failed.\n");
c0106be1:	c7 44 24 08 63 e6 10 	movl   $0xc010e663,0x8(%esp)
c0106be8:	c0 
c0106be9:	c7 44 24 04 35 01 00 	movl   $0x135,0x4(%esp)
c0106bf0:	00 
c0106bf1:	c7 04 24 1c e6 10 c0 	movl   $0xc010e61c,(%esp)
c0106bf8:	e8 5b b6 ff ff       	call   c0102258 <__panic>
    }
    return page2kva(p);
c0106bfd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106c00:	89 04 24             	mov    %eax,(%esp)
c0106c03:	e8 c0 f6 ff ff       	call   c01062c8 <page2kva>
}
c0106c08:	c9                   	leave  
c0106c09:	c3                   	ret    

c0106c0a <pmm_init>:

//pmm_init - setup a pmm to manage physical memory, build PDT&PT to setup paging mechanism 
//         - check the correctness of pmm & paging mechanism, print PDT&PT
void
pmm_init(void) {
c0106c0a:	55                   	push   %ebp
c0106c0b:	89 e5                	mov    %esp,%ebp
c0106c0d:	83 ec 38             	sub    $0x38,%esp
    //We need to alloc/free the physical memory (granularity is 4KB or other size). 
    //So a framework of physical memory manager (struct pmm_manager)is defined in pmm.h
    //First we should init a physical memory manager(pmm) based on the framework.
    //Then pmm can alloc/free the physical memory. 
    //Now the first_fit/best_fit/worst_fit/buddy_system pmm are available.
    init_pmm_manager();
c0106c10:	e8 10 f9 ff ff       	call   c0106525 <init_pmm_manager>

    // detect physical memory space, reserve already used memory,
    // then use pmm->init_memmap to create free page list
    page_init();
c0106c15:	e8 75 fa ff ff       	call   c010668f <page_init>

    //use pmm->check to verify the correctness of the alloc/free function in a pmm
    check_alloc_page();
c0106c1a:	e8 5d 09 00 00       	call   c010757c <check_alloc_page>

    // create boot_pgdir, an initial page directory(Page Directory Table, PDT)
    boot_pgdir = boot_alloc_page();
c0106c1f:	e8 a2 ff ff ff       	call   c0106bc6 <boot_alloc_page>
c0106c24:	a3 e4 0e 1a c0       	mov    %eax,0xc01a0ee4
    memset(boot_pgdir, 0, PGSIZE);
c0106c29:	a1 e4 0e 1a c0       	mov    0xc01a0ee4,%eax
c0106c2e:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c0106c35:	00 
c0106c36:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0106c3d:	00 
c0106c3e:	89 04 24             	mov    %eax,(%esp)
c0106c41:	e8 01 67 00 00       	call   c010d347 <memset>
    boot_cr3 = PADDR(boot_pgdir);
c0106c46:	a1 e4 0e 1a c0       	mov    0xc01a0ee4,%eax
c0106c4b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0106c4e:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c0106c55:	77 23                	ja     c0106c7a <pmm_init+0x70>
c0106c57:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106c5a:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0106c5e:	c7 44 24 08 f8 e5 10 	movl   $0xc010e5f8,0x8(%esp)
c0106c65:	c0 
c0106c66:	c7 44 24 04 4f 01 00 	movl   $0x14f,0x4(%esp)
c0106c6d:	00 
c0106c6e:	c7 04 24 1c e6 10 c0 	movl   $0xc010e61c,(%esp)
c0106c75:	e8 de b5 ff ff       	call   c0102258 <__panic>
c0106c7a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106c7d:	05 00 00 00 40       	add    $0x40000000,%eax
c0106c82:	a3 cc 2f 1a c0       	mov    %eax,0xc01a2fcc

    check_pgdir();
c0106c87:	e8 0e 09 00 00       	call   c010759a <check_pgdir>

    static_assert(KERNBASE % PTSIZE == 0 && KERNTOP % PTSIZE == 0);

    // recursively insert boot_pgdir in itself
    // to form a virtual page table at virtual address VPT
    boot_pgdir[PDX(VPT)] = PADDR(boot_pgdir) | PTE_P | PTE_W;
c0106c8c:	a1 e4 0e 1a c0       	mov    0xc01a0ee4,%eax
c0106c91:	8d 90 ac 0f 00 00    	lea    0xfac(%eax),%edx
c0106c97:	a1 e4 0e 1a c0       	mov    0xc01a0ee4,%eax
c0106c9c:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0106c9f:	81 7d f0 ff ff ff bf 	cmpl   $0xbfffffff,-0x10(%ebp)
c0106ca6:	77 23                	ja     c0106ccb <pmm_init+0xc1>
c0106ca8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106cab:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0106caf:	c7 44 24 08 f8 e5 10 	movl   $0xc010e5f8,0x8(%esp)
c0106cb6:	c0 
c0106cb7:	c7 44 24 04 57 01 00 	movl   $0x157,0x4(%esp)
c0106cbe:	00 
c0106cbf:	c7 04 24 1c e6 10 c0 	movl   $0xc010e61c,(%esp)
c0106cc6:	e8 8d b5 ff ff       	call   c0102258 <__panic>
c0106ccb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106cce:	05 00 00 00 40       	add    $0x40000000,%eax
c0106cd3:	83 c8 03             	or     $0x3,%eax
c0106cd6:	89 02                	mov    %eax,(%edx)

    // map all physical memory to linear memory with base linear addr KERNBASE
    //linear_addr KERNBASE~KERNBASE+KMEMSIZE = phy_addr 0~KMEMSIZE
    //But shouldn't use this map until enable_paging() & gdt_init() finished.
    boot_map_segment(boot_pgdir, KERNBASE, KMEMSIZE, 0, PTE_W);
c0106cd8:	a1 e4 0e 1a c0       	mov    0xc01a0ee4,%eax
c0106cdd:	c7 44 24 10 02 00 00 	movl   $0x2,0x10(%esp)
c0106ce4:	00 
c0106ce5:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0106cec:	00 
c0106ced:	c7 44 24 08 00 00 00 	movl   $0x38000000,0x8(%esp)
c0106cf4:	38 
c0106cf5:	c7 44 24 04 00 00 00 	movl   $0xc0000000,0x4(%esp)
c0106cfc:	c0 
c0106cfd:	89 04 24             	mov    %eax,(%esp)
c0106d00:	e8 b4 fd ff ff       	call   c0106ab9 <boot_map_segment>

    //temporary map: 
    //virtual_addr 3G~3G+4M = linear_addr 0~4M = linear_addr 3G~3G+4M = phy_addr 0~4M     
    boot_pgdir[0] = boot_pgdir[PDX(KERNBASE)];
c0106d05:	a1 e4 0e 1a c0       	mov    0xc01a0ee4,%eax
c0106d0a:	8b 15 e4 0e 1a c0    	mov    0xc01a0ee4,%edx
c0106d10:	8b 92 00 0c 00 00    	mov    0xc00(%edx),%edx
c0106d16:	89 10                	mov    %edx,(%eax)

    enable_paging();
c0106d18:	e8 63 fd ff ff       	call   c0106a80 <enable_paging>

    //reload gdt(third time,the last time) to map all physical memory
    //virtual_addr 0~4G=liear_addr 0~4G
    //then set kernel stack(ss:esp) in TSS, setup TSS in gdt, load TSS
    gdt_init();
c0106d1d:	e8 14 f7 ff ff       	call   c0106436 <gdt_init>

    //disable the map of virtual_addr 0~4M
    boot_pgdir[0] = 0;
c0106d22:	a1 e4 0e 1a c0       	mov    0xc01a0ee4,%eax
c0106d27:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    //now the basic virtual memory map(see memalyout.h) is established.
    //check the correctness of the basic virtual memory map.
    check_boot_pgdir();
c0106d2d:	e8 03 0f 00 00       	call   c0107c35 <check_boot_pgdir>

    print_pgdir();
c0106d32:	e8 90 13 00 00       	call   c01080c7 <print_pgdir>
    
    kmalloc_init();
c0106d37:	e8 76 f2 ff ff       	call   c0105fb2 <kmalloc_init>

}
c0106d3c:	c9                   	leave  
c0106d3d:	c3                   	ret    

c0106d3e <get_pte>:
//  pgdir:  the kernel virtual base address of PDT
//  la:     the linear address need to map
//  create: a logical value to decide if alloc a page for PT
// return vaule: the kernel virtual address of this pte
pte_t *
get_pte(pde_t *pgdir, uintptr_t la, bool create) {
c0106d3e:	55                   	push   %ebp
c0106d3f:	89 e5                	mov    %esp,%ebp
c0106d41:	83 ec 38             	sub    $0x38,%esp
                          // (6) clear page content using memset
                          // (7) set page directory entry's permission
    }
    return NULL;          // (8) return page table entry
#endif
    pde_t *pdep = &pgdir[PDX(la)];
c0106d44:	8b 45 0c             	mov    0xc(%ebp),%eax
c0106d47:	c1 e8 16             	shr    $0x16,%eax
c0106d4a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0106d51:	8b 45 08             	mov    0x8(%ebp),%eax
c0106d54:	01 d0                	add    %edx,%eax
c0106d56:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (!(*pdep & PTE_P)) {
c0106d59:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106d5c:	8b 00                	mov    (%eax),%eax
c0106d5e:	83 e0 01             	and    $0x1,%eax
c0106d61:	85 c0                	test   %eax,%eax
c0106d63:	0f 85 af 00 00 00    	jne    c0106e18 <get_pte+0xda>
        struct Page *page;
        if (!create || (page = alloc_page()) == NULL) {
c0106d69:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0106d6d:	74 15                	je     c0106d84 <get_pte+0x46>
c0106d6f:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0106d76:	e8 2e f8 ff ff       	call   c01065a9 <alloc_pages>
c0106d7b:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0106d7e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0106d82:	75 0a                	jne    c0106d8e <get_pte+0x50>
            return NULL;
c0106d84:	b8 00 00 00 00       	mov    $0x0,%eax
c0106d89:	e9 e6 00 00 00       	jmp    c0106e74 <get_pte+0x136>
        }
        set_page_ref(page, 1);
c0106d8e:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0106d95:	00 
c0106d96:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106d99:	89 04 24             	mov    %eax,(%esp)
c0106d9c:	e8 db f5 ff ff       	call   c010637c <set_page_ref>
        uintptr_t pa = page2pa(page);
c0106da1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106da4:	89 04 24             	mov    %eax,(%esp)
c0106da7:	e8 b7 f4 ff ff       	call   c0106263 <page2pa>
c0106dac:	89 45 ec             	mov    %eax,-0x14(%ebp)
        memset(KADDR(pa), 0, PGSIZE);
c0106daf:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106db2:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0106db5:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0106db8:	c1 e8 0c             	shr    $0xc,%eax
c0106dbb:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0106dbe:	a1 e0 0e 1a c0       	mov    0xc01a0ee0,%eax
c0106dc3:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
c0106dc6:	72 23                	jb     c0106deb <get_pte+0xad>
c0106dc8:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0106dcb:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0106dcf:	c7 44 24 08 40 e5 10 	movl   $0xc010e540,0x8(%esp)
c0106dd6:	c0 
c0106dd7:	c7 44 24 04 a8 01 00 	movl   $0x1a8,0x4(%esp)
c0106dde:	00 
c0106ddf:	c7 04 24 1c e6 10 c0 	movl   $0xc010e61c,(%esp)
c0106de6:	e8 6d b4 ff ff       	call   c0102258 <__panic>
c0106deb:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0106dee:	2d 00 00 00 40       	sub    $0x40000000,%eax
c0106df3:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c0106dfa:	00 
c0106dfb:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0106e02:	00 
c0106e03:	89 04 24             	mov    %eax,(%esp)
c0106e06:	e8 3c 65 00 00       	call   c010d347 <memset>
        *pdep = pa | PTE_U | PTE_W | PTE_P;
c0106e0b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106e0e:	83 c8 07             	or     $0x7,%eax
c0106e11:	89 c2                	mov    %eax,%edx
c0106e13:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106e16:	89 10                	mov    %edx,(%eax)
    }
    return &((pte_t *)KADDR(PDE_ADDR(*pdep)))[PTX(la)];
c0106e18:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106e1b:	8b 00                	mov    (%eax),%eax
c0106e1d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0106e22:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0106e25:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0106e28:	c1 e8 0c             	shr    $0xc,%eax
c0106e2b:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0106e2e:	a1 e0 0e 1a c0       	mov    0xc01a0ee0,%eax
c0106e33:	39 45 dc             	cmp    %eax,-0x24(%ebp)
c0106e36:	72 23                	jb     c0106e5b <get_pte+0x11d>
c0106e38:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0106e3b:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0106e3f:	c7 44 24 08 40 e5 10 	movl   $0xc010e540,0x8(%esp)
c0106e46:	c0 
c0106e47:	c7 44 24 04 ab 01 00 	movl   $0x1ab,0x4(%esp)
c0106e4e:	00 
c0106e4f:	c7 04 24 1c e6 10 c0 	movl   $0xc010e61c,(%esp)
c0106e56:	e8 fd b3 ff ff       	call   c0102258 <__panic>
c0106e5b:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0106e5e:	2d 00 00 00 40       	sub    $0x40000000,%eax
c0106e63:	8b 55 0c             	mov    0xc(%ebp),%edx
c0106e66:	c1 ea 0c             	shr    $0xc,%edx
c0106e69:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
c0106e6f:	c1 e2 02             	shl    $0x2,%edx
c0106e72:	01 d0                	add    %edx,%eax
}
c0106e74:	c9                   	leave  
c0106e75:	c3                   	ret    

c0106e76 <get_page>:

//get_page - get related Page struct for linear address la using PDT pgdir
struct Page *
get_page(pde_t *pgdir, uintptr_t la, pte_t **ptep_store) {
c0106e76:	55                   	push   %ebp
c0106e77:	89 e5                	mov    %esp,%ebp
c0106e79:	83 ec 28             	sub    $0x28,%esp
    pte_t *ptep = get_pte(pgdir, la, 0);
c0106e7c:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0106e83:	00 
c0106e84:	8b 45 0c             	mov    0xc(%ebp),%eax
c0106e87:	89 44 24 04          	mov    %eax,0x4(%esp)
c0106e8b:	8b 45 08             	mov    0x8(%ebp),%eax
c0106e8e:	89 04 24             	mov    %eax,(%esp)
c0106e91:	e8 a8 fe ff ff       	call   c0106d3e <get_pte>
c0106e96:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (ptep_store != NULL) {
c0106e99:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0106e9d:	74 08                	je     c0106ea7 <get_page+0x31>
        *ptep_store = ptep;
c0106e9f:	8b 45 10             	mov    0x10(%ebp),%eax
c0106ea2:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0106ea5:	89 10                	mov    %edx,(%eax)
    }
    if (ptep != NULL && *ptep & PTE_P) {
c0106ea7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0106eab:	74 1b                	je     c0106ec8 <get_page+0x52>
c0106ead:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106eb0:	8b 00                	mov    (%eax),%eax
c0106eb2:	83 e0 01             	and    $0x1,%eax
c0106eb5:	85 c0                	test   %eax,%eax
c0106eb7:	74 0f                	je     c0106ec8 <get_page+0x52>
        return pa2page(*ptep);
c0106eb9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106ebc:	8b 00                	mov    (%eax),%eax
c0106ebe:	89 04 24             	mov    %eax,(%esp)
c0106ec1:	e8 b3 f3 ff ff       	call   c0106279 <pa2page>
c0106ec6:	eb 05                	jmp    c0106ecd <get_page+0x57>
    }
    return NULL;
c0106ec8:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0106ecd:	c9                   	leave  
c0106ece:	c3                   	ret    

c0106ecf <page_remove_pte>:

//page_remove_pte - free an Page sturct which is related linear address la
//                - and clean(invalidate) pte which is related linear address la
//note: PT is changed, so the TLB need to be invalidate 
static inline void
page_remove_pte(pde_t *pgdir, uintptr_t la, pte_t *ptep) {
c0106ecf:	55                   	push   %ebp
c0106ed0:	89 e5                	mov    %esp,%ebp
c0106ed2:	83 ec 28             	sub    $0x28,%esp
                                  //(4) and free this page when page reference reachs 0
                                  //(5) clear second page table entry
                                  //(6) flush tlb
    }
#endif
    if (*ptep & PTE_P) {
c0106ed5:	8b 45 10             	mov    0x10(%ebp),%eax
c0106ed8:	8b 00                	mov    (%eax),%eax
c0106eda:	83 e0 01             	and    $0x1,%eax
c0106edd:	85 c0                	test   %eax,%eax
c0106edf:	74 4d                	je     c0106f2e <page_remove_pte+0x5f>
        struct Page *page = pte2page(*ptep);
c0106ee1:	8b 45 10             	mov    0x10(%ebp),%eax
c0106ee4:	8b 00                	mov    (%eax),%eax
c0106ee6:	89 04 24             	mov    %eax,(%esp)
c0106ee9:	e8 2e f4 ff ff       	call   c010631c <pte2page>
c0106eee:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (page_ref_dec(page) == 0) {
c0106ef1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106ef4:	89 04 24             	mov    %eax,(%esp)
c0106ef7:	e8 a4 f4 ff ff       	call   c01063a0 <page_ref_dec>
c0106efc:	85 c0                	test   %eax,%eax
c0106efe:	75 13                	jne    c0106f13 <page_remove_pte+0x44>
            free_page(page);
c0106f00:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0106f07:	00 
c0106f08:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106f0b:	89 04 24             	mov    %eax,(%esp)
c0106f0e:	e8 12 f7 ff ff       	call   c0106625 <free_pages>
        }
        *ptep = 0;
c0106f13:	8b 45 10             	mov    0x10(%ebp),%eax
c0106f16:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        tlb_invalidate(pgdir, la);
c0106f1c:	8b 45 0c             	mov    0xc(%ebp),%eax
c0106f1f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0106f23:	8b 45 08             	mov    0x8(%ebp),%eax
c0106f26:	89 04 24             	mov    %eax,(%esp)
c0106f29:	e8 1d 05 00 00       	call   c010744b <tlb_invalidate>
    }
}
c0106f2e:	c9                   	leave  
c0106f2f:	c3                   	ret    

c0106f30 <unmap_range>:

void
unmap_range(pde_t *pgdir, uintptr_t start, uintptr_t end) {
c0106f30:	55                   	push   %ebp
c0106f31:	89 e5                	mov    %esp,%ebp
c0106f33:	83 ec 28             	sub    $0x28,%esp
    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
c0106f36:	8b 45 0c             	mov    0xc(%ebp),%eax
c0106f39:	25 ff 0f 00 00       	and    $0xfff,%eax
c0106f3e:	85 c0                	test   %eax,%eax
c0106f40:	75 0c                	jne    c0106f4e <unmap_range+0x1e>
c0106f42:	8b 45 10             	mov    0x10(%ebp),%eax
c0106f45:	25 ff 0f 00 00       	and    $0xfff,%eax
c0106f4a:	85 c0                	test   %eax,%eax
c0106f4c:	74 24                	je     c0106f72 <unmap_range+0x42>
c0106f4e:	c7 44 24 0c 7c e6 10 	movl   $0xc010e67c,0xc(%esp)
c0106f55:	c0 
c0106f56:	c7 44 24 08 41 e6 10 	movl   $0xc010e641,0x8(%esp)
c0106f5d:	c0 
c0106f5e:	c7 44 24 04 e5 01 00 	movl   $0x1e5,0x4(%esp)
c0106f65:	00 
c0106f66:	c7 04 24 1c e6 10 c0 	movl   $0xc010e61c,(%esp)
c0106f6d:	e8 e6 b2 ff ff       	call   c0102258 <__panic>
    assert(USER_ACCESS(start, end));
c0106f72:	81 7d 0c ff ff 1f 00 	cmpl   $0x1fffff,0xc(%ebp)
c0106f79:	76 11                	jbe    c0106f8c <unmap_range+0x5c>
c0106f7b:	8b 45 0c             	mov    0xc(%ebp),%eax
c0106f7e:	3b 45 10             	cmp    0x10(%ebp),%eax
c0106f81:	73 09                	jae    c0106f8c <unmap_range+0x5c>
c0106f83:	81 7d 10 00 00 00 b0 	cmpl   $0xb0000000,0x10(%ebp)
c0106f8a:	76 24                	jbe    c0106fb0 <unmap_range+0x80>
c0106f8c:	c7 44 24 0c a5 e6 10 	movl   $0xc010e6a5,0xc(%esp)
c0106f93:	c0 
c0106f94:	c7 44 24 08 41 e6 10 	movl   $0xc010e641,0x8(%esp)
c0106f9b:	c0 
c0106f9c:	c7 44 24 04 e6 01 00 	movl   $0x1e6,0x4(%esp)
c0106fa3:	00 
c0106fa4:	c7 04 24 1c e6 10 c0 	movl   $0xc010e61c,(%esp)
c0106fab:	e8 a8 b2 ff ff       	call   c0102258 <__panic>

    do {
        pte_t *ptep = get_pte(pgdir, start, 0);
c0106fb0:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0106fb7:	00 
c0106fb8:	8b 45 0c             	mov    0xc(%ebp),%eax
c0106fbb:	89 44 24 04          	mov    %eax,0x4(%esp)
c0106fbf:	8b 45 08             	mov    0x8(%ebp),%eax
c0106fc2:	89 04 24             	mov    %eax,(%esp)
c0106fc5:	e8 74 fd ff ff       	call   c0106d3e <get_pte>
c0106fca:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (ptep == NULL) {
c0106fcd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0106fd1:	75 18                	jne    c0106feb <unmap_range+0xbb>
            start = ROUNDDOWN(start + PTSIZE, PTSIZE);
c0106fd3:	8b 45 0c             	mov    0xc(%ebp),%eax
c0106fd6:	05 00 00 40 00       	add    $0x400000,%eax
c0106fdb:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0106fde:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106fe1:	25 00 00 c0 ff       	and    $0xffc00000,%eax
c0106fe6:	89 45 0c             	mov    %eax,0xc(%ebp)
            continue ;
c0106fe9:	eb 29                	jmp    c0107014 <unmap_range+0xe4>
        }
        if (*ptep != 0) {
c0106feb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106fee:	8b 00                	mov    (%eax),%eax
c0106ff0:	85 c0                	test   %eax,%eax
c0106ff2:	74 19                	je     c010700d <unmap_range+0xdd>
            page_remove_pte(pgdir, start, ptep);
c0106ff4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106ff7:	89 44 24 08          	mov    %eax,0x8(%esp)
c0106ffb:	8b 45 0c             	mov    0xc(%ebp),%eax
c0106ffe:	89 44 24 04          	mov    %eax,0x4(%esp)
c0107002:	8b 45 08             	mov    0x8(%ebp),%eax
c0107005:	89 04 24             	mov    %eax,(%esp)
c0107008:	e8 c2 fe ff ff       	call   c0106ecf <page_remove_pte>
        }
        start += PGSIZE;
c010700d:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
    } while (start != 0 && start < end);
c0107014:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0107018:	74 08                	je     c0107022 <unmap_range+0xf2>
c010701a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010701d:	3b 45 10             	cmp    0x10(%ebp),%eax
c0107020:	72 8e                	jb     c0106fb0 <unmap_range+0x80>
}
c0107022:	c9                   	leave  
c0107023:	c3                   	ret    

c0107024 <exit_range>:

void
exit_range(pde_t *pgdir, uintptr_t start, uintptr_t end) {
c0107024:	55                   	push   %ebp
c0107025:	89 e5                	mov    %esp,%ebp
c0107027:	83 ec 28             	sub    $0x28,%esp
    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
c010702a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010702d:	25 ff 0f 00 00       	and    $0xfff,%eax
c0107032:	85 c0                	test   %eax,%eax
c0107034:	75 0c                	jne    c0107042 <exit_range+0x1e>
c0107036:	8b 45 10             	mov    0x10(%ebp),%eax
c0107039:	25 ff 0f 00 00       	and    $0xfff,%eax
c010703e:	85 c0                	test   %eax,%eax
c0107040:	74 24                	je     c0107066 <exit_range+0x42>
c0107042:	c7 44 24 0c 7c e6 10 	movl   $0xc010e67c,0xc(%esp)
c0107049:	c0 
c010704a:	c7 44 24 08 41 e6 10 	movl   $0xc010e641,0x8(%esp)
c0107051:	c0 
c0107052:	c7 44 24 04 f7 01 00 	movl   $0x1f7,0x4(%esp)
c0107059:	00 
c010705a:	c7 04 24 1c e6 10 c0 	movl   $0xc010e61c,(%esp)
c0107061:	e8 f2 b1 ff ff       	call   c0102258 <__panic>
    assert(USER_ACCESS(start, end));
c0107066:	81 7d 0c ff ff 1f 00 	cmpl   $0x1fffff,0xc(%ebp)
c010706d:	76 11                	jbe    c0107080 <exit_range+0x5c>
c010706f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107072:	3b 45 10             	cmp    0x10(%ebp),%eax
c0107075:	73 09                	jae    c0107080 <exit_range+0x5c>
c0107077:	81 7d 10 00 00 00 b0 	cmpl   $0xb0000000,0x10(%ebp)
c010707e:	76 24                	jbe    c01070a4 <exit_range+0x80>
c0107080:	c7 44 24 0c a5 e6 10 	movl   $0xc010e6a5,0xc(%esp)
c0107087:	c0 
c0107088:	c7 44 24 08 41 e6 10 	movl   $0xc010e641,0x8(%esp)
c010708f:	c0 
c0107090:	c7 44 24 04 f8 01 00 	movl   $0x1f8,0x4(%esp)
c0107097:	00 
c0107098:	c7 04 24 1c e6 10 c0 	movl   $0xc010e61c,(%esp)
c010709f:	e8 b4 b1 ff ff       	call   c0102258 <__panic>

    start = ROUNDDOWN(start, PTSIZE);
c01070a4:	8b 45 0c             	mov    0xc(%ebp),%eax
c01070a7:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01070aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01070ad:	25 00 00 c0 ff       	and    $0xffc00000,%eax
c01070b2:	89 45 0c             	mov    %eax,0xc(%ebp)
    do {
        int pde_idx = PDX(start);
c01070b5:	8b 45 0c             	mov    0xc(%ebp),%eax
c01070b8:	c1 e8 16             	shr    $0x16,%eax
c01070bb:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (pgdir[pde_idx] & PTE_P) {
c01070be:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01070c1:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c01070c8:	8b 45 08             	mov    0x8(%ebp),%eax
c01070cb:	01 d0                	add    %edx,%eax
c01070cd:	8b 00                	mov    (%eax),%eax
c01070cf:	83 e0 01             	and    $0x1,%eax
c01070d2:	85 c0                	test   %eax,%eax
c01070d4:	74 3e                	je     c0107114 <exit_range+0xf0>
            free_page(pde2page(pgdir[pde_idx]));
c01070d6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01070d9:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c01070e0:	8b 45 08             	mov    0x8(%ebp),%eax
c01070e3:	01 d0                	add    %edx,%eax
c01070e5:	8b 00                	mov    (%eax),%eax
c01070e7:	89 04 24             	mov    %eax,(%esp)
c01070ea:	e8 6b f2 ff ff       	call   c010635a <pde2page>
c01070ef:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01070f6:	00 
c01070f7:	89 04 24             	mov    %eax,(%esp)
c01070fa:	e8 26 f5 ff ff       	call   c0106625 <free_pages>
            pgdir[pde_idx] = 0;
c01070ff:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107102:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0107109:	8b 45 08             	mov    0x8(%ebp),%eax
c010710c:	01 d0                	add    %edx,%eax
c010710e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        }
        start += PTSIZE;
c0107114:	81 45 0c 00 00 40 00 	addl   $0x400000,0xc(%ebp)
    } while (start != 0 && start < end);
c010711b:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010711f:	74 08                	je     c0107129 <exit_range+0x105>
c0107121:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107124:	3b 45 10             	cmp    0x10(%ebp),%eax
c0107127:	72 8c                	jb     c01070b5 <exit_range+0x91>
}
c0107129:	c9                   	leave  
c010712a:	c3                   	ret    

c010712b <copy_range>:
 * @share: flags to indicate to dup OR share. We just use dup method, so it didn't be used.
 *
 * CALL GRAPH: copy_mm-->dup_mmap-->copy_range
 */
int
copy_range(pde_t *to, pde_t *from, uintptr_t start, uintptr_t end, bool share) {
c010712b:	55                   	push   %ebp
c010712c:	89 e5                	mov    %esp,%ebp
c010712e:	83 ec 48             	sub    $0x48,%esp
    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
c0107131:	8b 45 10             	mov    0x10(%ebp),%eax
c0107134:	25 ff 0f 00 00       	and    $0xfff,%eax
c0107139:	85 c0                	test   %eax,%eax
c010713b:	75 0c                	jne    c0107149 <copy_range+0x1e>
c010713d:	8b 45 14             	mov    0x14(%ebp),%eax
c0107140:	25 ff 0f 00 00       	and    $0xfff,%eax
c0107145:	85 c0                	test   %eax,%eax
c0107147:	74 24                	je     c010716d <copy_range+0x42>
c0107149:	c7 44 24 0c 7c e6 10 	movl   $0xc010e67c,0xc(%esp)
c0107150:	c0 
c0107151:	c7 44 24 08 41 e6 10 	movl   $0xc010e641,0x8(%esp)
c0107158:	c0 
c0107159:	c7 44 24 04 0d 02 00 	movl   $0x20d,0x4(%esp)
c0107160:	00 
c0107161:	c7 04 24 1c e6 10 c0 	movl   $0xc010e61c,(%esp)
c0107168:	e8 eb b0 ff ff       	call   c0102258 <__panic>
    assert(USER_ACCESS(start, end));
c010716d:	81 7d 10 ff ff 1f 00 	cmpl   $0x1fffff,0x10(%ebp)
c0107174:	76 11                	jbe    c0107187 <copy_range+0x5c>
c0107176:	8b 45 10             	mov    0x10(%ebp),%eax
c0107179:	3b 45 14             	cmp    0x14(%ebp),%eax
c010717c:	73 09                	jae    c0107187 <copy_range+0x5c>
c010717e:	81 7d 14 00 00 00 b0 	cmpl   $0xb0000000,0x14(%ebp)
c0107185:	76 24                	jbe    c01071ab <copy_range+0x80>
c0107187:	c7 44 24 0c a5 e6 10 	movl   $0xc010e6a5,0xc(%esp)
c010718e:	c0 
c010718f:	c7 44 24 08 41 e6 10 	movl   $0xc010e641,0x8(%esp)
c0107196:	c0 
c0107197:	c7 44 24 04 0e 02 00 	movl   $0x20e,0x4(%esp)
c010719e:	00 
c010719f:	c7 04 24 1c e6 10 c0 	movl   $0xc010e61c,(%esp)
c01071a6:	e8 ad b0 ff ff       	call   c0102258 <__panic>
    // copy content by page unit.
    do {
        //call get_pte to find process A's pte according to the addr start
        pte_t *ptep = get_pte(from, start, 0), *nptep;
c01071ab:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01071b2:	00 
c01071b3:	8b 45 10             	mov    0x10(%ebp),%eax
c01071b6:	89 44 24 04          	mov    %eax,0x4(%esp)
c01071ba:	8b 45 0c             	mov    0xc(%ebp),%eax
c01071bd:	89 04 24             	mov    %eax,(%esp)
c01071c0:	e8 79 fb ff ff       	call   c0106d3e <get_pte>
c01071c5:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (ptep == NULL) {
c01071c8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01071cc:	75 1b                	jne    c01071e9 <copy_range+0xbe>
            start = ROUNDDOWN(start + PTSIZE, PTSIZE);
c01071ce:	8b 45 10             	mov    0x10(%ebp),%eax
c01071d1:	05 00 00 40 00       	add    $0x400000,%eax
c01071d6:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01071d9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01071dc:	25 00 00 c0 ff       	and    $0xffc00000,%eax
c01071e1:	89 45 10             	mov    %eax,0x10(%ebp)
            continue ;
c01071e4:	e9 4c 01 00 00       	jmp    c0107335 <copy_range+0x20a>
        }
        //call get_pte to find process B's pte according to the addr start. If pte is NULL, just alloc a PT
        if (*ptep & PTE_P) {
c01071e9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01071ec:	8b 00                	mov    (%eax),%eax
c01071ee:	83 e0 01             	and    $0x1,%eax
c01071f1:	85 c0                	test   %eax,%eax
c01071f3:	0f 84 35 01 00 00    	je     c010732e <copy_range+0x203>
            if ((nptep = get_pte(to, start, 1)) == NULL) {
c01071f9:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0107200:	00 
c0107201:	8b 45 10             	mov    0x10(%ebp),%eax
c0107204:	89 44 24 04          	mov    %eax,0x4(%esp)
c0107208:	8b 45 08             	mov    0x8(%ebp),%eax
c010720b:	89 04 24             	mov    %eax,(%esp)
c010720e:	e8 2b fb ff ff       	call   c0106d3e <get_pte>
c0107213:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0107216:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010721a:	75 0a                	jne    c0107226 <copy_range+0xfb>
                return -E_NO_MEM;
c010721c:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0107221:	e9 26 01 00 00       	jmp    c010734c <copy_range+0x221>
            }
        uint32_t perm = (*ptep & PTE_USER);
c0107226:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107229:	8b 00                	mov    (%eax),%eax
c010722b:	83 e0 07             	and    $0x7,%eax
c010722e:	89 45 e8             	mov    %eax,-0x18(%ebp)
        //get page from ptep
        struct Page *page = pte2page(*ptep);
c0107231:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107234:	8b 00                	mov    (%eax),%eax
c0107236:	89 04 24             	mov    %eax,(%esp)
c0107239:	e8 de f0 ff ff       	call   c010631c <pte2page>
c010723e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        // alloc a page for process B
        struct Page *npage=alloc_page();
c0107241:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0107248:	e8 5c f3 ff ff       	call   c01065a9 <alloc_pages>
c010724d:	89 45 e0             	mov    %eax,-0x20(%ebp)
        assert(page!=NULL);
c0107250:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0107254:	75 24                	jne    c010727a <copy_range+0x14f>
c0107256:	c7 44 24 0c bd e6 10 	movl   $0xc010e6bd,0xc(%esp)
c010725d:	c0 
c010725e:	c7 44 24 08 41 e6 10 	movl   $0xc010e641,0x8(%esp)
c0107265:	c0 
c0107266:	c7 44 24 04 21 02 00 	movl   $0x221,0x4(%esp)
c010726d:	00 
c010726e:	c7 04 24 1c e6 10 c0 	movl   $0xc010e61c,(%esp)
c0107275:	e8 de af ff ff       	call   c0102258 <__panic>
        assert(npage!=NULL);
c010727a:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c010727e:	75 24                	jne    c01072a4 <copy_range+0x179>
c0107280:	c7 44 24 0c c8 e6 10 	movl   $0xc010e6c8,0xc(%esp)
c0107287:	c0 
c0107288:	c7 44 24 08 41 e6 10 	movl   $0xc010e641,0x8(%esp)
c010728f:	c0 
c0107290:	c7 44 24 04 22 02 00 	movl   $0x222,0x4(%esp)
c0107297:	00 
c0107298:	c7 04 24 1c e6 10 c0 	movl   $0xc010e61c,(%esp)
c010729f:	e8 b4 af ff ff       	call   c0102258 <__panic>
        int ret=0;
c01072a4:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
         * (1) find src_kvaddr: the kernel virtual address of page
         * (2) find dst_kvaddr: the kernel virtual address of npage
         * (3) memory copy from src_kvaddr to dst_kvaddr, size is PGSIZE
         * (4) build the map of phy addr of  nage with the linear addr start
         */
        void * kva_src = page2kva(page);
c01072ab:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01072ae:	89 04 24             	mov    %eax,(%esp)
c01072b1:	e8 12 f0 ff ff       	call   c01062c8 <page2kva>
c01072b6:	89 45 d8             	mov    %eax,-0x28(%ebp)
        void * kva_dst = page2kva(npage);
c01072b9:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01072bc:	89 04 24             	mov    %eax,(%esp)
c01072bf:	e8 04 f0 ff ff       	call   c01062c8 <page2kva>
c01072c4:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    
        memcpy(kva_dst, kva_src, PGSIZE);
c01072c7:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c01072ce:	00 
c01072cf:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01072d2:	89 44 24 04          	mov    %eax,0x4(%esp)
c01072d6:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01072d9:	89 04 24             	mov    %eax,(%esp)
c01072dc:	e8 48 61 00 00       	call   c010d429 <memcpy>

        ret = page_insert(to, npage, start, perm);
c01072e1:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01072e4:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01072e8:	8b 45 10             	mov    0x10(%ebp),%eax
c01072eb:	89 44 24 08          	mov    %eax,0x8(%esp)
c01072ef:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01072f2:	89 44 24 04          	mov    %eax,0x4(%esp)
c01072f6:	8b 45 08             	mov    0x8(%ebp),%eax
c01072f9:	89 04 24             	mov    %eax,(%esp)
c01072fc:	e8 91 00 00 00       	call   c0107392 <page_insert>
c0107301:	89 45 dc             	mov    %eax,-0x24(%ebp)
        assert(ret == 0);
c0107304:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0107308:	74 24                	je     c010732e <copy_range+0x203>
c010730a:	c7 44 24 0c d4 e6 10 	movl   $0xc010e6d4,0xc(%esp)
c0107311:	c0 
c0107312:	c7 44 24 08 41 e6 10 	movl   $0xc010e641,0x8(%esp)
c0107319:	c0 
c010731a:	c7 44 24 04 38 02 00 	movl   $0x238,0x4(%esp)
c0107321:	00 
c0107322:	c7 04 24 1c e6 10 c0 	movl   $0xc010e61c,(%esp)
c0107329:	e8 2a af ff ff       	call   c0102258 <__panic>
        }
        start += PGSIZE;
c010732e:	81 45 10 00 10 00 00 	addl   $0x1000,0x10(%ebp)
    } while (start != 0 && start < end);
c0107335:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0107339:	74 0c                	je     c0107347 <copy_range+0x21c>
c010733b:	8b 45 10             	mov    0x10(%ebp),%eax
c010733e:	3b 45 14             	cmp    0x14(%ebp),%eax
c0107341:	0f 82 64 fe ff ff    	jb     c01071ab <copy_range+0x80>
    return 0;
c0107347:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010734c:	c9                   	leave  
c010734d:	c3                   	ret    

c010734e <page_remove>:

//page_remove - free an Page which is related linear address la and has an validated pte
void
page_remove(pde_t *pgdir, uintptr_t la) {
c010734e:	55                   	push   %ebp
c010734f:	89 e5                	mov    %esp,%ebp
c0107351:	83 ec 28             	sub    $0x28,%esp
    pte_t *ptep = get_pte(pgdir, la, 0);
c0107354:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010735b:	00 
c010735c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010735f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0107363:	8b 45 08             	mov    0x8(%ebp),%eax
c0107366:	89 04 24             	mov    %eax,(%esp)
c0107369:	e8 d0 f9 ff ff       	call   c0106d3e <get_pte>
c010736e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (ptep != NULL) {
c0107371:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107375:	74 19                	je     c0107390 <page_remove+0x42>
        page_remove_pte(pgdir, la, ptep);
c0107377:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010737a:	89 44 24 08          	mov    %eax,0x8(%esp)
c010737e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107381:	89 44 24 04          	mov    %eax,0x4(%esp)
c0107385:	8b 45 08             	mov    0x8(%ebp),%eax
c0107388:	89 04 24             	mov    %eax,(%esp)
c010738b:	e8 3f fb ff ff       	call   c0106ecf <page_remove_pte>
    }
}
c0107390:	c9                   	leave  
c0107391:	c3                   	ret    

c0107392 <page_insert>:
//  la:    the linear address need to map
//  perm:  the permission of this Page which is setted in related pte
// return value: always 0
//note: PT is changed, so the TLB need to be invalidate 
int
page_insert(pde_t *pgdir, struct Page *page, uintptr_t la, uint32_t perm) {
c0107392:	55                   	push   %ebp
c0107393:	89 e5                	mov    %esp,%ebp
c0107395:	83 ec 28             	sub    $0x28,%esp
    pte_t *ptep = get_pte(pgdir, la, 1);
c0107398:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c010739f:	00 
c01073a0:	8b 45 10             	mov    0x10(%ebp),%eax
c01073a3:	89 44 24 04          	mov    %eax,0x4(%esp)
c01073a7:	8b 45 08             	mov    0x8(%ebp),%eax
c01073aa:	89 04 24             	mov    %eax,(%esp)
c01073ad:	e8 8c f9 ff ff       	call   c0106d3e <get_pte>
c01073b2:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (ptep == NULL) {
c01073b5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01073b9:	75 0a                	jne    c01073c5 <page_insert+0x33>
        return -E_NO_MEM;
c01073bb:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c01073c0:	e9 84 00 00 00       	jmp    c0107449 <page_insert+0xb7>
    }
    page_ref_inc(page);
c01073c5:	8b 45 0c             	mov    0xc(%ebp),%eax
c01073c8:	89 04 24             	mov    %eax,(%esp)
c01073cb:	e8 b9 ef ff ff       	call   c0106389 <page_ref_inc>
    if (*ptep & PTE_P) {
c01073d0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01073d3:	8b 00                	mov    (%eax),%eax
c01073d5:	83 e0 01             	and    $0x1,%eax
c01073d8:	85 c0                	test   %eax,%eax
c01073da:	74 3e                	je     c010741a <page_insert+0x88>
        struct Page *p = pte2page(*ptep);
c01073dc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01073df:	8b 00                	mov    (%eax),%eax
c01073e1:	89 04 24             	mov    %eax,(%esp)
c01073e4:	e8 33 ef ff ff       	call   c010631c <pte2page>
c01073e9:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (p == page) {
c01073ec:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01073ef:	3b 45 0c             	cmp    0xc(%ebp),%eax
c01073f2:	75 0d                	jne    c0107401 <page_insert+0x6f>
            page_ref_dec(page);
c01073f4:	8b 45 0c             	mov    0xc(%ebp),%eax
c01073f7:	89 04 24             	mov    %eax,(%esp)
c01073fa:	e8 a1 ef ff ff       	call   c01063a0 <page_ref_dec>
c01073ff:	eb 19                	jmp    c010741a <page_insert+0x88>
        }
        else {
            page_remove_pte(pgdir, la, ptep);
c0107401:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107404:	89 44 24 08          	mov    %eax,0x8(%esp)
c0107408:	8b 45 10             	mov    0x10(%ebp),%eax
c010740b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010740f:	8b 45 08             	mov    0x8(%ebp),%eax
c0107412:	89 04 24             	mov    %eax,(%esp)
c0107415:	e8 b5 fa ff ff       	call   c0106ecf <page_remove_pte>
        }
    }
    *ptep = page2pa(page) | PTE_P | perm;
c010741a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010741d:	89 04 24             	mov    %eax,(%esp)
c0107420:	e8 3e ee ff ff       	call   c0106263 <page2pa>
c0107425:	0b 45 14             	or     0x14(%ebp),%eax
c0107428:	83 c8 01             	or     $0x1,%eax
c010742b:	89 c2                	mov    %eax,%edx
c010742d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107430:	89 10                	mov    %edx,(%eax)
    tlb_invalidate(pgdir, la);
c0107432:	8b 45 10             	mov    0x10(%ebp),%eax
c0107435:	89 44 24 04          	mov    %eax,0x4(%esp)
c0107439:	8b 45 08             	mov    0x8(%ebp),%eax
c010743c:	89 04 24             	mov    %eax,(%esp)
c010743f:	e8 07 00 00 00       	call   c010744b <tlb_invalidate>
    return 0;
c0107444:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107449:	c9                   	leave  
c010744a:	c3                   	ret    

c010744b <tlb_invalidate>:

// invalidate a TLB entry, but only if the page tables being
// edited are the ones currently in use by the processor.
void
tlb_invalidate(pde_t *pgdir, uintptr_t la) {
c010744b:	55                   	push   %ebp
c010744c:	89 e5                	mov    %esp,%ebp
c010744e:	83 ec 28             	sub    $0x28,%esp
}

static inline uintptr_t
rcr3(void) {
    uintptr_t cr3;
    asm volatile ("mov %%cr3, %0" : "=r" (cr3) :: "memory");
c0107451:	0f 20 d8             	mov    %cr3,%eax
c0107454:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return cr3;
c0107457:	8b 45 f0             	mov    -0x10(%ebp),%eax
    if (rcr3() == PADDR(pgdir)) {
c010745a:	89 c2                	mov    %eax,%edx
c010745c:	8b 45 08             	mov    0x8(%ebp),%eax
c010745f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0107462:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c0107469:	77 23                	ja     c010748e <tlb_invalidate+0x43>
c010746b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010746e:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0107472:	c7 44 24 08 f8 e5 10 	movl   $0xc010e5f8,0x8(%esp)
c0107479:	c0 
c010747a:	c7 44 24 04 69 02 00 	movl   $0x269,0x4(%esp)
c0107481:	00 
c0107482:	c7 04 24 1c e6 10 c0 	movl   $0xc010e61c,(%esp)
c0107489:	e8 ca ad ff ff       	call   c0102258 <__panic>
c010748e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107491:	05 00 00 00 40       	add    $0x40000000,%eax
c0107496:	39 c2                	cmp    %eax,%edx
c0107498:	75 0c                	jne    c01074a6 <tlb_invalidate+0x5b>
        invlpg((void *)la);
c010749a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010749d:	89 45 ec             	mov    %eax,-0x14(%ebp)
}

static inline void
invlpg(void *addr) {
    asm volatile ("invlpg (%0)" :: "r" (addr) : "memory");
c01074a0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01074a3:	0f 01 38             	invlpg (%eax)
    }
}
c01074a6:	c9                   	leave  
c01074a7:	c3                   	ret    

c01074a8 <pgdir_alloc_page>:

// pgdir_alloc_page - call alloc_page & page_insert functions to 
//                  - allocate a page size memory & setup an addr map
//                  - pa<->la with linear address la and the PDT pgdir
struct Page *
pgdir_alloc_page(pde_t *pgdir, uintptr_t la, uint32_t perm) {
c01074a8:	55                   	push   %ebp
c01074a9:	89 e5                	mov    %esp,%ebp
c01074ab:	83 ec 28             	sub    $0x28,%esp
    struct Page *page = alloc_page();
c01074ae:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01074b5:	e8 ef f0 ff ff       	call   c01065a9 <alloc_pages>
c01074ba:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (page != NULL) {
c01074bd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01074c1:	0f 84 b0 00 00 00    	je     c0107577 <pgdir_alloc_page+0xcf>
        if (page_insert(pgdir, page, la, perm) != 0) {
c01074c7:	8b 45 10             	mov    0x10(%ebp),%eax
c01074ca:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01074ce:	8b 45 0c             	mov    0xc(%ebp),%eax
c01074d1:	89 44 24 08          	mov    %eax,0x8(%esp)
c01074d5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01074d8:	89 44 24 04          	mov    %eax,0x4(%esp)
c01074dc:	8b 45 08             	mov    0x8(%ebp),%eax
c01074df:	89 04 24             	mov    %eax,(%esp)
c01074e2:	e8 ab fe ff ff       	call   c0107392 <page_insert>
c01074e7:	85 c0                	test   %eax,%eax
c01074e9:	74 1a                	je     c0107505 <pgdir_alloc_page+0x5d>
            free_page(page);
c01074eb:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01074f2:	00 
c01074f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01074f6:	89 04 24             	mov    %eax,(%esp)
c01074f9:	e8 27 f1 ff ff       	call   c0106625 <free_pages>
            return NULL;
c01074fe:	b8 00 00 00 00       	mov    $0x0,%eax
c0107503:	eb 75                	jmp    c010757a <pgdir_alloc_page+0xd2>
        }
        if (swap_init_ok){
c0107505:	a1 70 0f 1a c0       	mov    0xc01a0f70,%eax
c010750a:	85 c0                	test   %eax,%eax
c010750c:	74 69                	je     c0107577 <pgdir_alloc_page+0xcf>
            if(check_mm_struct!=NULL) {
c010750e:	a1 ac 30 1a c0       	mov    0xc01a30ac,%eax
c0107513:	85 c0                	test   %eax,%eax
c0107515:	74 60                	je     c0107577 <pgdir_alloc_page+0xcf>
                swap_map_swappable(check_mm_struct, la, page, 0);
c0107517:	a1 ac 30 1a c0       	mov    0xc01a30ac,%eax
c010751c:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0107523:	00 
c0107524:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0107527:	89 54 24 08          	mov    %edx,0x8(%esp)
c010752b:	8b 55 0c             	mov    0xc(%ebp),%edx
c010752e:	89 54 24 04          	mov    %edx,0x4(%esp)
c0107532:	89 04 24             	mov    %eax,(%esp)
c0107535:	e8 48 0e 00 00       	call   c0108382 <swap_map_swappable>
                page->pra_vaddr=la;
c010753a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010753d:	8b 55 0c             	mov    0xc(%ebp),%edx
c0107540:	89 50 20             	mov    %edx,0x20(%eax)
                assert(page_ref(page) == 1);
c0107543:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107546:	89 04 24             	mov    %eax,(%esp)
c0107549:	e8 24 ee ff ff       	call   c0106372 <page_ref>
c010754e:	83 f8 01             	cmp    $0x1,%eax
c0107551:	74 24                	je     c0107577 <pgdir_alloc_page+0xcf>
c0107553:	c7 44 24 0c dd e6 10 	movl   $0xc010e6dd,0xc(%esp)
c010755a:	c0 
c010755b:	c7 44 24 08 41 e6 10 	movl   $0xc010e641,0x8(%esp)
c0107562:	c0 
c0107563:	c7 44 24 04 7d 02 00 	movl   $0x27d,0x4(%esp)
c010756a:	00 
c010756b:	c7 04 24 1c e6 10 c0 	movl   $0xc010e61c,(%esp)
c0107572:	e8 e1 ac ff ff       	call   c0102258 <__panic>
            }
        }

    }

    return page;
c0107577:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010757a:	c9                   	leave  
c010757b:	c3                   	ret    

c010757c <check_alloc_page>:

static void
check_alloc_page(void) {
c010757c:	55                   	push   %ebp
c010757d:	89 e5                	mov    %esp,%ebp
c010757f:	83 ec 18             	sub    $0x18,%esp
    pmm_manager->check();
c0107582:	a1 c8 2f 1a c0       	mov    0xc01a2fc8,%eax
c0107587:	8b 40 18             	mov    0x18(%eax),%eax
c010758a:	ff d0                	call   *%eax
    cprintf("check_alloc_page() succeeded!\n");
c010758c:	c7 04 24 f4 e6 10 c0 	movl   $0xc010e6f4,(%esp)
c0107593:	e8 3e a2 ff ff       	call   c01017d6 <cprintf>
}
c0107598:	c9                   	leave  
c0107599:	c3                   	ret    

c010759a <check_pgdir>:

static void
check_pgdir(void) {
c010759a:	55                   	push   %ebp
c010759b:	89 e5                	mov    %esp,%ebp
c010759d:	83 ec 38             	sub    $0x38,%esp
    assert(npage <= KMEMSIZE / PGSIZE);
c01075a0:	a1 e0 0e 1a c0       	mov    0xc01a0ee0,%eax
c01075a5:	3d 00 80 03 00       	cmp    $0x38000,%eax
c01075aa:	76 24                	jbe    c01075d0 <check_pgdir+0x36>
c01075ac:	c7 44 24 0c 13 e7 10 	movl   $0xc010e713,0xc(%esp)
c01075b3:	c0 
c01075b4:	c7 44 24 08 41 e6 10 	movl   $0xc010e641,0x8(%esp)
c01075bb:	c0 
c01075bc:	c7 44 24 04 95 02 00 	movl   $0x295,0x4(%esp)
c01075c3:	00 
c01075c4:	c7 04 24 1c e6 10 c0 	movl   $0xc010e61c,(%esp)
c01075cb:	e8 88 ac ff ff       	call   c0102258 <__panic>
    assert(boot_pgdir != NULL && (uint32_t)PGOFF(boot_pgdir) == 0);
c01075d0:	a1 e4 0e 1a c0       	mov    0xc01a0ee4,%eax
c01075d5:	85 c0                	test   %eax,%eax
c01075d7:	74 0e                	je     c01075e7 <check_pgdir+0x4d>
c01075d9:	a1 e4 0e 1a c0       	mov    0xc01a0ee4,%eax
c01075de:	25 ff 0f 00 00       	and    $0xfff,%eax
c01075e3:	85 c0                	test   %eax,%eax
c01075e5:	74 24                	je     c010760b <check_pgdir+0x71>
c01075e7:	c7 44 24 0c 30 e7 10 	movl   $0xc010e730,0xc(%esp)
c01075ee:	c0 
c01075ef:	c7 44 24 08 41 e6 10 	movl   $0xc010e641,0x8(%esp)
c01075f6:	c0 
c01075f7:	c7 44 24 04 96 02 00 	movl   $0x296,0x4(%esp)
c01075fe:	00 
c01075ff:	c7 04 24 1c e6 10 c0 	movl   $0xc010e61c,(%esp)
c0107606:	e8 4d ac ff ff       	call   c0102258 <__panic>
    assert(get_page(boot_pgdir, 0x0, NULL) == NULL);
c010760b:	a1 e4 0e 1a c0       	mov    0xc01a0ee4,%eax
c0107610:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0107617:	00 
c0107618:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010761f:	00 
c0107620:	89 04 24             	mov    %eax,(%esp)
c0107623:	e8 4e f8 ff ff       	call   c0106e76 <get_page>
c0107628:	85 c0                	test   %eax,%eax
c010762a:	74 24                	je     c0107650 <check_pgdir+0xb6>
c010762c:	c7 44 24 0c 68 e7 10 	movl   $0xc010e768,0xc(%esp)
c0107633:	c0 
c0107634:	c7 44 24 08 41 e6 10 	movl   $0xc010e641,0x8(%esp)
c010763b:	c0 
c010763c:	c7 44 24 04 97 02 00 	movl   $0x297,0x4(%esp)
c0107643:	00 
c0107644:	c7 04 24 1c e6 10 c0 	movl   $0xc010e61c,(%esp)
c010764b:	e8 08 ac ff ff       	call   c0102258 <__panic>

    struct Page *p1, *p2;
    p1 = alloc_page();
c0107650:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0107657:	e8 4d ef ff ff       	call   c01065a9 <alloc_pages>
c010765c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    assert(page_insert(boot_pgdir, p1, 0x0, 0) == 0);
c010765f:	a1 e4 0e 1a c0       	mov    0xc01a0ee4,%eax
c0107664:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c010766b:	00 
c010766c:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0107673:	00 
c0107674:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0107677:	89 54 24 04          	mov    %edx,0x4(%esp)
c010767b:	89 04 24             	mov    %eax,(%esp)
c010767e:	e8 0f fd ff ff       	call   c0107392 <page_insert>
c0107683:	85 c0                	test   %eax,%eax
c0107685:	74 24                	je     c01076ab <check_pgdir+0x111>
c0107687:	c7 44 24 0c 90 e7 10 	movl   $0xc010e790,0xc(%esp)
c010768e:	c0 
c010768f:	c7 44 24 08 41 e6 10 	movl   $0xc010e641,0x8(%esp)
c0107696:	c0 
c0107697:	c7 44 24 04 9b 02 00 	movl   $0x29b,0x4(%esp)
c010769e:	00 
c010769f:	c7 04 24 1c e6 10 c0 	movl   $0xc010e61c,(%esp)
c01076a6:	e8 ad ab ff ff       	call   c0102258 <__panic>

    pte_t *ptep;
    assert((ptep = get_pte(boot_pgdir, 0x0, 0)) != NULL);
c01076ab:	a1 e4 0e 1a c0       	mov    0xc01a0ee4,%eax
c01076b0:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01076b7:	00 
c01076b8:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01076bf:	00 
c01076c0:	89 04 24             	mov    %eax,(%esp)
c01076c3:	e8 76 f6 ff ff       	call   c0106d3e <get_pte>
c01076c8:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01076cb:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01076cf:	75 24                	jne    c01076f5 <check_pgdir+0x15b>
c01076d1:	c7 44 24 0c bc e7 10 	movl   $0xc010e7bc,0xc(%esp)
c01076d8:	c0 
c01076d9:	c7 44 24 08 41 e6 10 	movl   $0xc010e641,0x8(%esp)
c01076e0:	c0 
c01076e1:	c7 44 24 04 9e 02 00 	movl   $0x29e,0x4(%esp)
c01076e8:	00 
c01076e9:	c7 04 24 1c e6 10 c0 	movl   $0xc010e61c,(%esp)
c01076f0:	e8 63 ab ff ff       	call   c0102258 <__panic>
    assert(pa2page(*ptep) == p1);
c01076f5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01076f8:	8b 00                	mov    (%eax),%eax
c01076fa:	89 04 24             	mov    %eax,(%esp)
c01076fd:	e8 77 eb ff ff       	call   c0106279 <pa2page>
c0107702:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0107705:	74 24                	je     c010772b <check_pgdir+0x191>
c0107707:	c7 44 24 0c e9 e7 10 	movl   $0xc010e7e9,0xc(%esp)
c010770e:	c0 
c010770f:	c7 44 24 08 41 e6 10 	movl   $0xc010e641,0x8(%esp)
c0107716:	c0 
c0107717:	c7 44 24 04 9f 02 00 	movl   $0x29f,0x4(%esp)
c010771e:	00 
c010771f:	c7 04 24 1c e6 10 c0 	movl   $0xc010e61c,(%esp)
c0107726:	e8 2d ab ff ff       	call   c0102258 <__panic>
    assert(page_ref(p1) == 1);
c010772b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010772e:	89 04 24             	mov    %eax,(%esp)
c0107731:	e8 3c ec ff ff       	call   c0106372 <page_ref>
c0107736:	83 f8 01             	cmp    $0x1,%eax
c0107739:	74 24                	je     c010775f <check_pgdir+0x1c5>
c010773b:	c7 44 24 0c fe e7 10 	movl   $0xc010e7fe,0xc(%esp)
c0107742:	c0 
c0107743:	c7 44 24 08 41 e6 10 	movl   $0xc010e641,0x8(%esp)
c010774a:	c0 
c010774b:	c7 44 24 04 a0 02 00 	movl   $0x2a0,0x4(%esp)
c0107752:	00 
c0107753:	c7 04 24 1c e6 10 c0 	movl   $0xc010e61c,(%esp)
c010775a:	e8 f9 aa ff ff       	call   c0102258 <__panic>

    ptep = &((pte_t *)KADDR(PDE_ADDR(boot_pgdir[0])))[1];
c010775f:	a1 e4 0e 1a c0       	mov    0xc01a0ee4,%eax
c0107764:	8b 00                	mov    (%eax),%eax
c0107766:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010776b:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010776e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107771:	c1 e8 0c             	shr    $0xc,%eax
c0107774:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0107777:	a1 e0 0e 1a c0       	mov    0xc01a0ee0,%eax
c010777c:	39 45 e8             	cmp    %eax,-0x18(%ebp)
c010777f:	72 23                	jb     c01077a4 <check_pgdir+0x20a>
c0107781:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107784:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0107788:	c7 44 24 08 40 e5 10 	movl   $0xc010e540,0x8(%esp)
c010778f:	c0 
c0107790:	c7 44 24 04 a2 02 00 	movl   $0x2a2,0x4(%esp)
c0107797:	00 
c0107798:	c7 04 24 1c e6 10 c0 	movl   $0xc010e61c,(%esp)
c010779f:	e8 b4 aa ff ff       	call   c0102258 <__panic>
c01077a4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01077a7:	2d 00 00 00 40       	sub    $0x40000000,%eax
c01077ac:	83 c0 04             	add    $0x4,%eax
c01077af:	89 45 f0             	mov    %eax,-0x10(%ebp)
    assert(get_pte(boot_pgdir, PGSIZE, 0) == ptep);
c01077b2:	a1 e4 0e 1a c0       	mov    0xc01a0ee4,%eax
c01077b7:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01077be:	00 
c01077bf:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c01077c6:	00 
c01077c7:	89 04 24             	mov    %eax,(%esp)
c01077ca:	e8 6f f5 ff ff       	call   c0106d3e <get_pte>
c01077cf:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c01077d2:	74 24                	je     c01077f8 <check_pgdir+0x25e>
c01077d4:	c7 44 24 0c 10 e8 10 	movl   $0xc010e810,0xc(%esp)
c01077db:	c0 
c01077dc:	c7 44 24 08 41 e6 10 	movl   $0xc010e641,0x8(%esp)
c01077e3:	c0 
c01077e4:	c7 44 24 04 a3 02 00 	movl   $0x2a3,0x4(%esp)
c01077eb:	00 
c01077ec:	c7 04 24 1c e6 10 c0 	movl   $0xc010e61c,(%esp)
c01077f3:	e8 60 aa ff ff       	call   c0102258 <__panic>

    p2 = alloc_page();
c01077f8:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01077ff:	e8 a5 ed ff ff       	call   c01065a9 <alloc_pages>
c0107804:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    assert(page_insert(boot_pgdir, p2, PGSIZE, PTE_U | PTE_W) == 0);
c0107807:	a1 e4 0e 1a c0       	mov    0xc01a0ee4,%eax
c010780c:	c7 44 24 0c 06 00 00 	movl   $0x6,0xc(%esp)
c0107813:	00 
c0107814:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c010781b:	00 
c010781c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010781f:	89 54 24 04          	mov    %edx,0x4(%esp)
c0107823:	89 04 24             	mov    %eax,(%esp)
c0107826:	e8 67 fb ff ff       	call   c0107392 <page_insert>
c010782b:	85 c0                	test   %eax,%eax
c010782d:	74 24                	je     c0107853 <check_pgdir+0x2b9>
c010782f:	c7 44 24 0c 38 e8 10 	movl   $0xc010e838,0xc(%esp)
c0107836:	c0 
c0107837:	c7 44 24 08 41 e6 10 	movl   $0xc010e641,0x8(%esp)
c010783e:	c0 
c010783f:	c7 44 24 04 a6 02 00 	movl   $0x2a6,0x4(%esp)
c0107846:	00 
c0107847:	c7 04 24 1c e6 10 c0 	movl   $0xc010e61c,(%esp)
c010784e:	e8 05 aa ff ff       	call   c0102258 <__panic>
    assert((ptep = get_pte(boot_pgdir, PGSIZE, 0)) != NULL);
c0107853:	a1 e4 0e 1a c0       	mov    0xc01a0ee4,%eax
c0107858:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010785f:	00 
c0107860:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c0107867:	00 
c0107868:	89 04 24             	mov    %eax,(%esp)
c010786b:	e8 ce f4 ff ff       	call   c0106d3e <get_pte>
c0107870:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0107873:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0107877:	75 24                	jne    c010789d <check_pgdir+0x303>
c0107879:	c7 44 24 0c 70 e8 10 	movl   $0xc010e870,0xc(%esp)
c0107880:	c0 
c0107881:	c7 44 24 08 41 e6 10 	movl   $0xc010e641,0x8(%esp)
c0107888:	c0 
c0107889:	c7 44 24 04 a7 02 00 	movl   $0x2a7,0x4(%esp)
c0107890:	00 
c0107891:	c7 04 24 1c e6 10 c0 	movl   $0xc010e61c,(%esp)
c0107898:	e8 bb a9 ff ff       	call   c0102258 <__panic>
    assert(*ptep & PTE_U);
c010789d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01078a0:	8b 00                	mov    (%eax),%eax
c01078a2:	83 e0 04             	and    $0x4,%eax
c01078a5:	85 c0                	test   %eax,%eax
c01078a7:	75 24                	jne    c01078cd <check_pgdir+0x333>
c01078a9:	c7 44 24 0c a0 e8 10 	movl   $0xc010e8a0,0xc(%esp)
c01078b0:	c0 
c01078b1:	c7 44 24 08 41 e6 10 	movl   $0xc010e641,0x8(%esp)
c01078b8:	c0 
c01078b9:	c7 44 24 04 a8 02 00 	movl   $0x2a8,0x4(%esp)
c01078c0:	00 
c01078c1:	c7 04 24 1c e6 10 c0 	movl   $0xc010e61c,(%esp)
c01078c8:	e8 8b a9 ff ff       	call   c0102258 <__panic>
    assert(*ptep & PTE_W);
c01078cd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01078d0:	8b 00                	mov    (%eax),%eax
c01078d2:	83 e0 02             	and    $0x2,%eax
c01078d5:	85 c0                	test   %eax,%eax
c01078d7:	75 24                	jne    c01078fd <check_pgdir+0x363>
c01078d9:	c7 44 24 0c ae e8 10 	movl   $0xc010e8ae,0xc(%esp)
c01078e0:	c0 
c01078e1:	c7 44 24 08 41 e6 10 	movl   $0xc010e641,0x8(%esp)
c01078e8:	c0 
c01078e9:	c7 44 24 04 a9 02 00 	movl   $0x2a9,0x4(%esp)
c01078f0:	00 
c01078f1:	c7 04 24 1c e6 10 c0 	movl   $0xc010e61c,(%esp)
c01078f8:	e8 5b a9 ff ff       	call   c0102258 <__panic>
    assert(boot_pgdir[0] & PTE_U);
c01078fd:	a1 e4 0e 1a c0       	mov    0xc01a0ee4,%eax
c0107902:	8b 00                	mov    (%eax),%eax
c0107904:	83 e0 04             	and    $0x4,%eax
c0107907:	85 c0                	test   %eax,%eax
c0107909:	75 24                	jne    c010792f <check_pgdir+0x395>
c010790b:	c7 44 24 0c bc e8 10 	movl   $0xc010e8bc,0xc(%esp)
c0107912:	c0 
c0107913:	c7 44 24 08 41 e6 10 	movl   $0xc010e641,0x8(%esp)
c010791a:	c0 
c010791b:	c7 44 24 04 aa 02 00 	movl   $0x2aa,0x4(%esp)
c0107922:	00 
c0107923:	c7 04 24 1c e6 10 c0 	movl   $0xc010e61c,(%esp)
c010792a:	e8 29 a9 ff ff       	call   c0102258 <__panic>
    assert(page_ref(p2) == 1);
c010792f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107932:	89 04 24             	mov    %eax,(%esp)
c0107935:	e8 38 ea ff ff       	call   c0106372 <page_ref>
c010793a:	83 f8 01             	cmp    $0x1,%eax
c010793d:	74 24                	je     c0107963 <check_pgdir+0x3c9>
c010793f:	c7 44 24 0c d2 e8 10 	movl   $0xc010e8d2,0xc(%esp)
c0107946:	c0 
c0107947:	c7 44 24 08 41 e6 10 	movl   $0xc010e641,0x8(%esp)
c010794e:	c0 
c010794f:	c7 44 24 04 ab 02 00 	movl   $0x2ab,0x4(%esp)
c0107956:	00 
c0107957:	c7 04 24 1c e6 10 c0 	movl   $0xc010e61c,(%esp)
c010795e:	e8 f5 a8 ff ff       	call   c0102258 <__panic>

    assert(page_insert(boot_pgdir, p1, PGSIZE, 0) == 0);
c0107963:	a1 e4 0e 1a c0       	mov    0xc01a0ee4,%eax
c0107968:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c010796f:	00 
c0107970:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c0107977:	00 
c0107978:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010797b:	89 54 24 04          	mov    %edx,0x4(%esp)
c010797f:	89 04 24             	mov    %eax,(%esp)
c0107982:	e8 0b fa ff ff       	call   c0107392 <page_insert>
c0107987:	85 c0                	test   %eax,%eax
c0107989:	74 24                	je     c01079af <check_pgdir+0x415>
c010798b:	c7 44 24 0c e4 e8 10 	movl   $0xc010e8e4,0xc(%esp)
c0107992:	c0 
c0107993:	c7 44 24 08 41 e6 10 	movl   $0xc010e641,0x8(%esp)
c010799a:	c0 
c010799b:	c7 44 24 04 ad 02 00 	movl   $0x2ad,0x4(%esp)
c01079a2:	00 
c01079a3:	c7 04 24 1c e6 10 c0 	movl   $0xc010e61c,(%esp)
c01079aa:	e8 a9 a8 ff ff       	call   c0102258 <__panic>
    assert(page_ref(p1) == 2);
c01079af:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01079b2:	89 04 24             	mov    %eax,(%esp)
c01079b5:	e8 b8 e9 ff ff       	call   c0106372 <page_ref>
c01079ba:	83 f8 02             	cmp    $0x2,%eax
c01079bd:	74 24                	je     c01079e3 <check_pgdir+0x449>
c01079bf:	c7 44 24 0c 10 e9 10 	movl   $0xc010e910,0xc(%esp)
c01079c6:	c0 
c01079c7:	c7 44 24 08 41 e6 10 	movl   $0xc010e641,0x8(%esp)
c01079ce:	c0 
c01079cf:	c7 44 24 04 ae 02 00 	movl   $0x2ae,0x4(%esp)
c01079d6:	00 
c01079d7:	c7 04 24 1c e6 10 c0 	movl   $0xc010e61c,(%esp)
c01079de:	e8 75 a8 ff ff       	call   c0102258 <__panic>
    assert(page_ref(p2) == 0);
c01079e3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01079e6:	89 04 24             	mov    %eax,(%esp)
c01079e9:	e8 84 e9 ff ff       	call   c0106372 <page_ref>
c01079ee:	85 c0                	test   %eax,%eax
c01079f0:	74 24                	je     c0107a16 <check_pgdir+0x47c>
c01079f2:	c7 44 24 0c 22 e9 10 	movl   $0xc010e922,0xc(%esp)
c01079f9:	c0 
c01079fa:	c7 44 24 08 41 e6 10 	movl   $0xc010e641,0x8(%esp)
c0107a01:	c0 
c0107a02:	c7 44 24 04 af 02 00 	movl   $0x2af,0x4(%esp)
c0107a09:	00 
c0107a0a:	c7 04 24 1c e6 10 c0 	movl   $0xc010e61c,(%esp)
c0107a11:	e8 42 a8 ff ff       	call   c0102258 <__panic>
    assert((ptep = get_pte(boot_pgdir, PGSIZE, 0)) != NULL);
c0107a16:	a1 e4 0e 1a c0       	mov    0xc01a0ee4,%eax
c0107a1b:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0107a22:	00 
c0107a23:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c0107a2a:	00 
c0107a2b:	89 04 24             	mov    %eax,(%esp)
c0107a2e:	e8 0b f3 ff ff       	call   c0106d3e <get_pte>
c0107a33:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0107a36:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0107a3a:	75 24                	jne    c0107a60 <check_pgdir+0x4c6>
c0107a3c:	c7 44 24 0c 70 e8 10 	movl   $0xc010e870,0xc(%esp)
c0107a43:	c0 
c0107a44:	c7 44 24 08 41 e6 10 	movl   $0xc010e641,0x8(%esp)
c0107a4b:	c0 
c0107a4c:	c7 44 24 04 b0 02 00 	movl   $0x2b0,0x4(%esp)
c0107a53:	00 
c0107a54:	c7 04 24 1c e6 10 c0 	movl   $0xc010e61c,(%esp)
c0107a5b:	e8 f8 a7 ff ff       	call   c0102258 <__panic>
    assert(pa2page(*ptep) == p1);
c0107a60:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107a63:	8b 00                	mov    (%eax),%eax
c0107a65:	89 04 24             	mov    %eax,(%esp)
c0107a68:	e8 0c e8 ff ff       	call   c0106279 <pa2page>
c0107a6d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0107a70:	74 24                	je     c0107a96 <check_pgdir+0x4fc>
c0107a72:	c7 44 24 0c e9 e7 10 	movl   $0xc010e7e9,0xc(%esp)
c0107a79:	c0 
c0107a7a:	c7 44 24 08 41 e6 10 	movl   $0xc010e641,0x8(%esp)
c0107a81:	c0 
c0107a82:	c7 44 24 04 b1 02 00 	movl   $0x2b1,0x4(%esp)
c0107a89:	00 
c0107a8a:	c7 04 24 1c e6 10 c0 	movl   $0xc010e61c,(%esp)
c0107a91:	e8 c2 a7 ff ff       	call   c0102258 <__panic>
    assert((*ptep & PTE_U) == 0);
c0107a96:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107a99:	8b 00                	mov    (%eax),%eax
c0107a9b:	83 e0 04             	and    $0x4,%eax
c0107a9e:	85 c0                	test   %eax,%eax
c0107aa0:	74 24                	je     c0107ac6 <check_pgdir+0x52c>
c0107aa2:	c7 44 24 0c 34 e9 10 	movl   $0xc010e934,0xc(%esp)
c0107aa9:	c0 
c0107aaa:	c7 44 24 08 41 e6 10 	movl   $0xc010e641,0x8(%esp)
c0107ab1:	c0 
c0107ab2:	c7 44 24 04 b2 02 00 	movl   $0x2b2,0x4(%esp)
c0107ab9:	00 
c0107aba:	c7 04 24 1c e6 10 c0 	movl   $0xc010e61c,(%esp)
c0107ac1:	e8 92 a7 ff ff       	call   c0102258 <__panic>

    page_remove(boot_pgdir, 0x0);
c0107ac6:	a1 e4 0e 1a c0       	mov    0xc01a0ee4,%eax
c0107acb:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0107ad2:	00 
c0107ad3:	89 04 24             	mov    %eax,(%esp)
c0107ad6:	e8 73 f8 ff ff       	call   c010734e <page_remove>
    assert(page_ref(p1) == 1);
c0107adb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107ade:	89 04 24             	mov    %eax,(%esp)
c0107ae1:	e8 8c e8 ff ff       	call   c0106372 <page_ref>
c0107ae6:	83 f8 01             	cmp    $0x1,%eax
c0107ae9:	74 24                	je     c0107b0f <check_pgdir+0x575>
c0107aeb:	c7 44 24 0c fe e7 10 	movl   $0xc010e7fe,0xc(%esp)
c0107af2:	c0 
c0107af3:	c7 44 24 08 41 e6 10 	movl   $0xc010e641,0x8(%esp)
c0107afa:	c0 
c0107afb:	c7 44 24 04 b5 02 00 	movl   $0x2b5,0x4(%esp)
c0107b02:	00 
c0107b03:	c7 04 24 1c e6 10 c0 	movl   $0xc010e61c,(%esp)
c0107b0a:	e8 49 a7 ff ff       	call   c0102258 <__panic>
    assert(page_ref(p2) == 0);
c0107b0f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107b12:	89 04 24             	mov    %eax,(%esp)
c0107b15:	e8 58 e8 ff ff       	call   c0106372 <page_ref>
c0107b1a:	85 c0                	test   %eax,%eax
c0107b1c:	74 24                	je     c0107b42 <check_pgdir+0x5a8>
c0107b1e:	c7 44 24 0c 22 e9 10 	movl   $0xc010e922,0xc(%esp)
c0107b25:	c0 
c0107b26:	c7 44 24 08 41 e6 10 	movl   $0xc010e641,0x8(%esp)
c0107b2d:	c0 
c0107b2e:	c7 44 24 04 b6 02 00 	movl   $0x2b6,0x4(%esp)
c0107b35:	00 
c0107b36:	c7 04 24 1c e6 10 c0 	movl   $0xc010e61c,(%esp)
c0107b3d:	e8 16 a7 ff ff       	call   c0102258 <__panic>

    page_remove(boot_pgdir, PGSIZE);
c0107b42:	a1 e4 0e 1a c0       	mov    0xc01a0ee4,%eax
c0107b47:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c0107b4e:	00 
c0107b4f:	89 04 24             	mov    %eax,(%esp)
c0107b52:	e8 f7 f7 ff ff       	call   c010734e <page_remove>
    assert(page_ref(p1) == 0);
c0107b57:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107b5a:	89 04 24             	mov    %eax,(%esp)
c0107b5d:	e8 10 e8 ff ff       	call   c0106372 <page_ref>
c0107b62:	85 c0                	test   %eax,%eax
c0107b64:	74 24                	je     c0107b8a <check_pgdir+0x5f0>
c0107b66:	c7 44 24 0c 49 e9 10 	movl   $0xc010e949,0xc(%esp)
c0107b6d:	c0 
c0107b6e:	c7 44 24 08 41 e6 10 	movl   $0xc010e641,0x8(%esp)
c0107b75:	c0 
c0107b76:	c7 44 24 04 b9 02 00 	movl   $0x2b9,0x4(%esp)
c0107b7d:	00 
c0107b7e:	c7 04 24 1c e6 10 c0 	movl   $0xc010e61c,(%esp)
c0107b85:	e8 ce a6 ff ff       	call   c0102258 <__panic>
    assert(page_ref(p2) == 0);
c0107b8a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107b8d:	89 04 24             	mov    %eax,(%esp)
c0107b90:	e8 dd e7 ff ff       	call   c0106372 <page_ref>
c0107b95:	85 c0                	test   %eax,%eax
c0107b97:	74 24                	je     c0107bbd <check_pgdir+0x623>
c0107b99:	c7 44 24 0c 22 e9 10 	movl   $0xc010e922,0xc(%esp)
c0107ba0:	c0 
c0107ba1:	c7 44 24 08 41 e6 10 	movl   $0xc010e641,0x8(%esp)
c0107ba8:	c0 
c0107ba9:	c7 44 24 04 ba 02 00 	movl   $0x2ba,0x4(%esp)
c0107bb0:	00 
c0107bb1:	c7 04 24 1c e6 10 c0 	movl   $0xc010e61c,(%esp)
c0107bb8:	e8 9b a6 ff ff       	call   c0102258 <__panic>

    assert(page_ref(pa2page(boot_pgdir[0])) == 1);
c0107bbd:	a1 e4 0e 1a c0       	mov    0xc01a0ee4,%eax
c0107bc2:	8b 00                	mov    (%eax),%eax
c0107bc4:	89 04 24             	mov    %eax,(%esp)
c0107bc7:	e8 ad e6 ff ff       	call   c0106279 <pa2page>
c0107bcc:	89 04 24             	mov    %eax,(%esp)
c0107bcf:	e8 9e e7 ff ff       	call   c0106372 <page_ref>
c0107bd4:	83 f8 01             	cmp    $0x1,%eax
c0107bd7:	74 24                	je     c0107bfd <check_pgdir+0x663>
c0107bd9:	c7 44 24 0c 5c e9 10 	movl   $0xc010e95c,0xc(%esp)
c0107be0:	c0 
c0107be1:	c7 44 24 08 41 e6 10 	movl   $0xc010e641,0x8(%esp)
c0107be8:	c0 
c0107be9:	c7 44 24 04 bc 02 00 	movl   $0x2bc,0x4(%esp)
c0107bf0:	00 
c0107bf1:	c7 04 24 1c e6 10 c0 	movl   $0xc010e61c,(%esp)
c0107bf8:	e8 5b a6 ff ff       	call   c0102258 <__panic>
    free_page(pa2page(boot_pgdir[0]));
c0107bfd:	a1 e4 0e 1a c0       	mov    0xc01a0ee4,%eax
c0107c02:	8b 00                	mov    (%eax),%eax
c0107c04:	89 04 24             	mov    %eax,(%esp)
c0107c07:	e8 6d e6 ff ff       	call   c0106279 <pa2page>
c0107c0c:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0107c13:	00 
c0107c14:	89 04 24             	mov    %eax,(%esp)
c0107c17:	e8 09 ea ff ff       	call   c0106625 <free_pages>
    boot_pgdir[0] = 0;
c0107c1c:	a1 e4 0e 1a c0       	mov    0xc01a0ee4,%eax
c0107c21:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    cprintf("check_pgdir() succeeded!\n");
c0107c27:	c7 04 24 82 e9 10 c0 	movl   $0xc010e982,(%esp)
c0107c2e:	e8 a3 9b ff ff       	call   c01017d6 <cprintf>
}
c0107c33:	c9                   	leave  
c0107c34:	c3                   	ret    

c0107c35 <check_boot_pgdir>:

static void
check_boot_pgdir(void) {
c0107c35:	55                   	push   %ebp
c0107c36:	89 e5                	mov    %esp,%ebp
c0107c38:	83 ec 38             	sub    $0x38,%esp
    pte_t *ptep;
    int i;
    for (i = 0; i < npage; i += PGSIZE) {
c0107c3b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0107c42:	e9 ca 00 00 00       	jmp    c0107d11 <check_boot_pgdir+0xdc>
        assert((ptep = get_pte(boot_pgdir, (uintptr_t)KADDR(i), 0)) != NULL);
c0107c47:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107c4a:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0107c4d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107c50:	c1 e8 0c             	shr    $0xc,%eax
c0107c53:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0107c56:	a1 e0 0e 1a c0       	mov    0xc01a0ee0,%eax
c0107c5b:	39 45 ec             	cmp    %eax,-0x14(%ebp)
c0107c5e:	72 23                	jb     c0107c83 <check_boot_pgdir+0x4e>
c0107c60:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107c63:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0107c67:	c7 44 24 08 40 e5 10 	movl   $0xc010e540,0x8(%esp)
c0107c6e:	c0 
c0107c6f:	c7 44 24 04 c8 02 00 	movl   $0x2c8,0x4(%esp)
c0107c76:	00 
c0107c77:	c7 04 24 1c e6 10 c0 	movl   $0xc010e61c,(%esp)
c0107c7e:	e8 d5 a5 ff ff       	call   c0102258 <__panic>
c0107c83:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107c86:	2d 00 00 00 40       	sub    $0x40000000,%eax
c0107c8b:	89 c2                	mov    %eax,%edx
c0107c8d:	a1 e4 0e 1a c0       	mov    0xc01a0ee4,%eax
c0107c92:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0107c99:	00 
c0107c9a:	89 54 24 04          	mov    %edx,0x4(%esp)
c0107c9e:	89 04 24             	mov    %eax,(%esp)
c0107ca1:	e8 98 f0 ff ff       	call   c0106d3e <get_pte>
c0107ca6:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0107ca9:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0107cad:	75 24                	jne    c0107cd3 <check_boot_pgdir+0x9e>
c0107caf:	c7 44 24 0c 9c e9 10 	movl   $0xc010e99c,0xc(%esp)
c0107cb6:	c0 
c0107cb7:	c7 44 24 08 41 e6 10 	movl   $0xc010e641,0x8(%esp)
c0107cbe:	c0 
c0107cbf:	c7 44 24 04 c8 02 00 	movl   $0x2c8,0x4(%esp)
c0107cc6:	00 
c0107cc7:	c7 04 24 1c e6 10 c0 	movl   $0xc010e61c,(%esp)
c0107cce:	e8 85 a5 ff ff       	call   c0102258 <__panic>
        assert(PTE_ADDR(*ptep) == i);
c0107cd3:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107cd6:	8b 00                	mov    (%eax),%eax
c0107cd8:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0107cdd:	89 c2                	mov    %eax,%edx
c0107cdf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107ce2:	39 c2                	cmp    %eax,%edx
c0107ce4:	74 24                	je     c0107d0a <check_boot_pgdir+0xd5>
c0107ce6:	c7 44 24 0c d9 e9 10 	movl   $0xc010e9d9,0xc(%esp)
c0107ced:	c0 
c0107cee:	c7 44 24 08 41 e6 10 	movl   $0xc010e641,0x8(%esp)
c0107cf5:	c0 
c0107cf6:	c7 44 24 04 c9 02 00 	movl   $0x2c9,0x4(%esp)
c0107cfd:	00 
c0107cfe:	c7 04 24 1c e6 10 c0 	movl   $0xc010e61c,(%esp)
c0107d05:	e8 4e a5 ff ff       	call   c0102258 <__panic>

static void
check_boot_pgdir(void) {
    pte_t *ptep;
    int i;
    for (i = 0; i < npage; i += PGSIZE) {
c0107d0a:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
c0107d11:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0107d14:	a1 e0 0e 1a c0       	mov    0xc01a0ee0,%eax
c0107d19:	39 c2                	cmp    %eax,%edx
c0107d1b:	0f 82 26 ff ff ff    	jb     c0107c47 <check_boot_pgdir+0x12>
        assert((ptep = get_pte(boot_pgdir, (uintptr_t)KADDR(i), 0)) != NULL);
        assert(PTE_ADDR(*ptep) == i);
    }

    assert(PDE_ADDR(boot_pgdir[PDX(VPT)]) == PADDR(boot_pgdir));
c0107d21:	a1 e4 0e 1a c0       	mov    0xc01a0ee4,%eax
c0107d26:	05 ac 0f 00 00       	add    $0xfac,%eax
c0107d2b:	8b 00                	mov    (%eax),%eax
c0107d2d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0107d32:	89 c2                	mov    %eax,%edx
c0107d34:	a1 e4 0e 1a c0       	mov    0xc01a0ee4,%eax
c0107d39:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0107d3c:	81 7d e4 ff ff ff bf 	cmpl   $0xbfffffff,-0x1c(%ebp)
c0107d43:	77 23                	ja     c0107d68 <check_boot_pgdir+0x133>
c0107d45:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107d48:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0107d4c:	c7 44 24 08 f8 e5 10 	movl   $0xc010e5f8,0x8(%esp)
c0107d53:	c0 
c0107d54:	c7 44 24 04 cc 02 00 	movl   $0x2cc,0x4(%esp)
c0107d5b:	00 
c0107d5c:	c7 04 24 1c e6 10 c0 	movl   $0xc010e61c,(%esp)
c0107d63:	e8 f0 a4 ff ff       	call   c0102258 <__panic>
c0107d68:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107d6b:	05 00 00 00 40       	add    $0x40000000,%eax
c0107d70:	39 c2                	cmp    %eax,%edx
c0107d72:	74 24                	je     c0107d98 <check_boot_pgdir+0x163>
c0107d74:	c7 44 24 0c f0 e9 10 	movl   $0xc010e9f0,0xc(%esp)
c0107d7b:	c0 
c0107d7c:	c7 44 24 08 41 e6 10 	movl   $0xc010e641,0x8(%esp)
c0107d83:	c0 
c0107d84:	c7 44 24 04 cc 02 00 	movl   $0x2cc,0x4(%esp)
c0107d8b:	00 
c0107d8c:	c7 04 24 1c e6 10 c0 	movl   $0xc010e61c,(%esp)
c0107d93:	e8 c0 a4 ff ff       	call   c0102258 <__panic>

    assert(boot_pgdir[0] == 0);
c0107d98:	a1 e4 0e 1a c0       	mov    0xc01a0ee4,%eax
c0107d9d:	8b 00                	mov    (%eax),%eax
c0107d9f:	85 c0                	test   %eax,%eax
c0107da1:	74 24                	je     c0107dc7 <check_boot_pgdir+0x192>
c0107da3:	c7 44 24 0c 24 ea 10 	movl   $0xc010ea24,0xc(%esp)
c0107daa:	c0 
c0107dab:	c7 44 24 08 41 e6 10 	movl   $0xc010e641,0x8(%esp)
c0107db2:	c0 
c0107db3:	c7 44 24 04 ce 02 00 	movl   $0x2ce,0x4(%esp)
c0107dba:	00 
c0107dbb:	c7 04 24 1c e6 10 c0 	movl   $0xc010e61c,(%esp)
c0107dc2:	e8 91 a4 ff ff       	call   c0102258 <__panic>

    struct Page *p;
    p = alloc_page();
c0107dc7:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0107dce:	e8 d6 e7 ff ff       	call   c01065a9 <alloc_pages>
c0107dd3:	89 45 e0             	mov    %eax,-0x20(%ebp)
    assert(page_insert(boot_pgdir, p, 0x100, PTE_W) == 0);
c0107dd6:	a1 e4 0e 1a c0       	mov    0xc01a0ee4,%eax
c0107ddb:	c7 44 24 0c 02 00 00 	movl   $0x2,0xc(%esp)
c0107de2:	00 
c0107de3:	c7 44 24 08 00 01 00 	movl   $0x100,0x8(%esp)
c0107dea:	00 
c0107deb:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0107dee:	89 54 24 04          	mov    %edx,0x4(%esp)
c0107df2:	89 04 24             	mov    %eax,(%esp)
c0107df5:	e8 98 f5 ff ff       	call   c0107392 <page_insert>
c0107dfa:	85 c0                	test   %eax,%eax
c0107dfc:	74 24                	je     c0107e22 <check_boot_pgdir+0x1ed>
c0107dfe:	c7 44 24 0c 38 ea 10 	movl   $0xc010ea38,0xc(%esp)
c0107e05:	c0 
c0107e06:	c7 44 24 08 41 e6 10 	movl   $0xc010e641,0x8(%esp)
c0107e0d:	c0 
c0107e0e:	c7 44 24 04 d2 02 00 	movl   $0x2d2,0x4(%esp)
c0107e15:	00 
c0107e16:	c7 04 24 1c e6 10 c0 	movl   $0xc010e61c,(%esp)
c0107e1d:	e8 36 a4 ff ff       	call   c0102258 <__panic>
    assert(page_ref(p) == 1);
c0107e22:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0107e25:	89 04 24             	mov    %eax,(%esp)
c0107e28:	e8 45 e5 ff ff       	call   c0106372 <page_ref>
c0107e2d:	83 f8 01             	cmp    $0x1,%eax
c0107e30:	74 24                	je     c0107e56 <check_boot_pgdir+0x221>
c0107e32:	c7 44 24 0c 66 ea 10 	movl   $0xc010ea66,0xc(%esp)
c0107e39:	c0 
c0107e3a:	c7 44 24 08 41 e6 10 	movl   $0xc010e641,0x8(%esp)
c0107e41:	c0 
c0107e42:	c7 44 24 04 d3 02 00 	movl   $0x2d3,0x4(%esp)
c0107e49:	00 
c0107e4a:	c7 04 24 1c e6 10 c0 	movl   $0xc010e61c,(%esp)
c0107e51:	e8 02 a4 ff ff       	call   c0102258 <__panic>
    assert(page_insert(boot_pgdir, p, 0x100 + PGSIZE, PTE_W) == 0);
c0107e56:	a1 e4 0e 1a c0       	mov    0xc01a0ee4,%eax
c0107e5b:	c7 44 24 0c 02 00 00 	movl   $0x2,0xc(%esp)
c0107e62:	00 
c0107e63:	c7 44 24 08 00 11 00 	movl   $0x1100,0x8(%esp)
c0107e6a:	00 
c0107e6b:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0107e6e:	89 54 24 04          	mov    %edx,0x4(%esp)
c0107e72:	89 04 24             	mov    %eax,(%esp)
c0107e75:	e8 18 f5 ff ff       	call   c0107392 <page_insert>
c0107e7a:	85 c0                	test   %eax,%eax
c0107e7c:	74 24                	je     c0107ea2 <check_boot_pgdir+0x26d>
c0107e7e:	c7 44 24 0c 78 ea 10 	movl   $0xc010ea78,0xc(%esp)
c0107e85:	c0 
c0107e86:	c7 44 24 08 41 e6 10 	movl   $0xc010e641,0x8(%esp)
c0107e8d:	c0 
c0107e8e:	c7 44 24 04 d4 02 00 	movl   $0x2d4,0x4(%esp)
c0107e95:	00 
c0107e96:	c7 04 24 1c e6 10 c0 	movl   $0xc010e61c,(%esp)
c0107e9d:	e8 b6 a3 ff ff       	call   c0102258 <__panic>
    assert(page_ref(p) == 2);
c0107ea2:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0107ea5:	89 04 24             	mov    %eax,(%esp)
c0107ea8:	e8 c5 e4 ff ff       	call   c0106372 <page_ref>
c0107ead:	83 f8 02             	cmp    $0x2,%eax
c0107eb0:	74 24                	je     c0107ed6 <check_boot_pgdir+0x2a1>
c0107eb2:	c7 44 24 0c af ea 10 	movl   $0xc010eaaf,0xc(%esp)
c0107eb9:	c0 
c0107eba:	c7 44 24 08 41 e6 10 	movl   $0xc010e641,0x8(%esp)
c0107ec1:	c0 
c0107ec2:	c7 44 24 04 d5 02 00 	movl   $0x2d5,0x4(%esp)
c0107ec9:	00 
c0107eca:	c7 04 24 1c e6 10 c0 	movl   $0xc010e61c,(%esp)
c0107ed1:	e8 82 a3 ff ff       	call   c0102258 <__panic>

    const char *str = "ucore: Hello world!!";
c0107ed6:	c7 45 dc c0 ea 10 c0 	movl   $0xc010eac0,-0x24(%ebp)
    strcpy((void *)0x100, str);
c0107edd:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0107ee0:	89 44 24 04          	mov    %eax,0x4(%esp)
c0107ee4:	c7 04 24 00 01 00 00 	movl   $0x100,(%esp)
c0107eeb:	e8 80 51 00 00       	call   c010d070 <strcpy>
    assert(strcmp((void *)0x100, (void *)(0x100 + PGSIZE)) == 0);
c0107ef0:	c7 44 24 04 00 11 00 	movl   $0x1100,0x4(%esp)
c0107ef7:	00 
c0107ef8:	c7 04 24 00 01 00 00 	movl   $0x100,(%esp)
c0107eff:	e8 e5 51 00 00       	call   c010d0e9 <strcmp>
c0107f04:	85 c0                	test   %eax,%eax
c0107f06:	74 24                	je     c0107f2c <check_boot_pgdir+0x2f7>
c0107f08:	c7 44 24 0c d8 ea 10 	movl   $0xc010ead8,0xc(%esp)
c0107f0f:	c0 
c0107f10:	c7 44 24 08 41 e6 10 	movl   $0xc010e641,0x8(%esp)
c0107f17:	c0 
c0107f18:	c7 44 24 04 d9 02 00 	movl   $0x2d9,0x4(%esp)
c0107f1f:	00 
c0107f20:	c7 04 24 1c e6 10 c0 	movl   $0xc010e61c,(%esp)
c0107f27:	e8 2c a3 ff ff       	call   c0102258 <__panic>

    *(char *)(page2kva(p) + 0x100) = '\0';
c0107f2c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0107f2f:	89 04 24             	mov    %eax,(%esp)
c0107f32:	e8 91 e3 ff ff       	call   c01062c8 <page2kva>
c0107f37:	05 00 01 00 00       	add    $0x100,%eax
c0107f3c:	c6 00 00             	movb   $0x0,(%eax)
    assert(strlen((const char *)0x100) == 0);
c0107f3f:	c7 04 24 00 01 00 00 	movl   $0x100,(%esp)
c0107f46:	e8 cd 50 00 00       	call   c010d018 <strlen>
c0107f4b:	85 c0                	test   %eax,%eax
c0107f4d:	74 24                	je     c0107f73 <check_boot_pgdir+0x33e>
c0107f4f:	c7 44 24 0c 10 eb 10 	movl   $0xc010eb10,0xc(%esp)
c0107f56:	c0 
c0107f57:	c7 44 24 08 41 e6 10 	movl   $0xc010e641,0x8(%esp)
c0107f5e:	c0 
c0107f5f:	c7 44 24 04 dc 02 00 	movl   $0x2dc,0x4(%esp)
c0107f66:	00 
c0107f67:	c7 04 24 1c e6 10 c0 	movl   $0xc010e61c,(%esp)
c0107f6e:	e8 e5 a2 ff ff       	call   c0102258 <__panic>

    free_page(p);
c0107f73:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0107f7a:	00 
c0107f7b:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0107f7e:	89 04 24             	mov    %eax,(%esp)
c0107f81:	e8 9f e6 ff ff       	call   c0106625 <free_pages>
    free_page(pa2page(PDE_ADDR(boot_pgdir[0])));
c0107f86:	a1 e4 0e 1a c0       	mov    0xc01a0ee4,%eax
c0107f8b:	8b 00                	mov    (%eax),%eax
c0107f8d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0107f92:	89 04 24             	mov    %eax,(%esp)
c0107f95:	e8 df e2 ff ff       	call   c0106279 <pa2page>
c0107f9a:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0107fa1:	00 
c0107fa2:	89 04 24             	mov    %eax,(%esp)
c0107fa5:	e8 7b e6 ff ff       	call   c0106625 <free_pages>
    boot_pgdir[0] = 0;
c0107faa:	a1 e4 0e 1a c0       	mov    0xc01a0ee4,%eax
c0107faf:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    cprintf("check_boot_pgdir() succeeded!\n");
c0107fb5:	c7 04 24 34 eb 10 c0 	movl   $0xc010eb34,(%esp)
c0107fbc:	e8 15 98 ff ff       	call   c01017d6 <cprintf>
}
c0107fc1:	c9                   	leave  
c0107fc2:	c3                   	ret    

c0107fc3 <perm2str>:

//perm2str - use string 'u,r,w,-' to present the permission
static const char *
perm2str(int perm) {
c0107fc3:	55                   	push   %ebp
c0107fc4:	89 e5                	mov    %esp,%ebp
    static char str[4];
    str[0] = (perm & PTE_U) ? 'u' : '-';
c0107fc6:	8b 45 08             	mov    0x8(%ebp),%eax
c0107fc9:	83 e0 04             	and    $0x4,%eax
c0107fcc:	85 c0                	test   %eax,%eax
c0107fce:	74 07                	je     c0107fd7 <perm2str+0x14>
c0107fd0:	b8 75 00 00 00       	mov    $0x75,%eax
c0107fd5:	eb 05                	jmp    c0107fdc <perm2str+0x19>
c0107fd7:	b8 2d 00 00 00       	mov    $0x2d,%eax
c0107fdc:	a2 6c 0f 1a c0       	mov    %al,0xc01a0f6c
    str[1] = 'r';
c0107fe1:	c6 05 6d 0f 1a c0 72 	movb   $0x72,0xc01a0f6d
    str[2] = (perm & PTE_W) ? 'w' : '-';
c0107fe8:	8b 45 08             	mov    0x8(%ebp),%eax
c0107feb:	83 e0 02             	and    $0x2,%eax
c0107fee:	85 c0                	test   %eax,%eax
c0107ff0:	74 07                	je     c0107ff9 <perm2str+0x36>
c0107ff2:	b8 77 00 00 00       	mov    $0x77,%eax
c0107ff7:	eb 05                	jmp    c0107ffe <perm2str+0x3b>
c0107ff9:	b8 2d 00 00 00       	mov    $0x2d,%eax
c0107ffe:	a2 6e 0f 1a c0       	mov    %al,0xc01a0f6e
    str[3] = '\0';
c0108003:	c6 05 6f 0f 1a c0 00 	movb   $0x0,0xc01a0f6f
    return str;
c010800a:	b8 6c 0f 1a c0       	mov    $0xc01a0f6c,%eax
}
c010800f:	5d                   	pop    %ebp
c0108010:	c3                   	ret    

c0108011 <get_pgtable_items>:
//  table:       the beginning addr of table
//  left_store:  the pointer of the high side of table's next range
//  right_store: the pointer of the low side of table's next range
// return value: 0 - not a invalid item range, perm - a valid item range with perm permission 
static int
get_pgtable_items(size_t left, size_t right, size_t start, uintptr_t *table, size_t *left_store, size_t *right_store) {
c0108011:	55                   	push   %ebp
c0108012:	89 e5                	mov    %esp,%ebp
c0108014:	83 ec 10             	sub    $0x10,%esp
    if (start >= right) {
c0108017:	8b 45 10             	mov    0x10(%ebp),%eax
c010801a:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010801d:	72 0a                	jb     c0108029 <get_pgtable_items+0x18>
        return 0;
c010801f:	b8 00 00 00 00       	mov    $0x0,%eax
c0108024:	e9 9c 00 00 00       	jmp    c01080c5 <get_pgtable_items+0xb4>
    }
    while (start < right && !(table[start] & PTE_P)) {
c0108029:	eb 04                	jmp    c010802f <get_pgtable_items+0x1e>
        start ++;
c010802b:	83 45 10 01          	addl   $0x1,0x10(%ebp)
static int
get_pgtable_items(size_t left, size_t right, size_t start, uintptr_t *table, size_t *left_store, size_t *right_store) {
    if (start >= right) {
        return 0;
    }
    while (start < right && !(table[start] & PTE_P)) {
c010802f:	8b 45 10             	mov    0x10(%ebp),%eax
c0108032:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0108035:	73 18                	jae    c010804f <get_pgtable_items+0x3e>
c0108037:	8b 45 10             	mov    0x10(%ebp),%eax
c010803a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0108041:	8b 45 14             	mov    0x14(%ebp),%eax
c0108044:	01 d0                	add    %edx,%eax
c0108046:	8b 00                	mov    (%eax),%eax
c0108048:	83 e0 01             	and    $0x1,%eax
c010804b:	85 c0                	test   %eax,%eax
c010804d:	74 dc                	je     c010802b <get_pgtable_items+0x1a>
        start ++;
    }
    if (start < right) {
c010804f:	8b 45 10             	mov    0x10(%ebp),%eax
c0108052:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0108055:	73 69                	jae    c01080c0 <get_pgtable_items+0xaf>
        if (left_store != NULL) {
c0108057:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c010805b:	74 08                	je     c0108065 <get_pgtable_items+0x54>
            *left_store = start;
c010805d:	8b 45 18             	mov    0x18(%ebp),%eax
c0108060:	8b 55 10             	mov    0x10(%ebp),%edx
c0108063:	89 10                	mov    %edx,(%eax)
        }
        int perm = (table[start ++] & PTE_USER);
c0108065:	8b 45 10             	mov    0x10(%ebp),%eax
c0108068:	8d 50 01             	lea    0x1(%eax),%edx
c010806b:	89 55 10             	mov    %edx,0x10(%ebp)
c010806e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0108075:	8b 45 14             	mov    0x14(%ebp),%eax
c0108078:	01 d0                	add    %edx,%eax
c010807a:	8b 00                	mov    (%eax),%eax
c010807c:	83 e0 07             	and    $0x7,%eax
c010807f:	89 45 fc             	mov    %eax,-0x4(%ebp)
        while (start < right && (table[start] & PTE_USER) == perm) {
c0108082:	eb 04                	jmp    c0108088 <get_pgtable_items+0x77>
            start ++;
c0108084:	83 45 10 01          	addl   $0x1,0x10(%ebp)
    if (start < right) {
        if (left_store != NULL) {
            *left_store = start;
        }
        int perm = (table[start ++] & PTE_USER);
        while (start < right && (table[start] & PTE_USER) == perm) {
c0108088:	8b 45 10             	mov    0x10(%ebp),%eax
c010808b:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010808e:	73 1d                	jae    c01080ad <get_pgtable_items+0x9c>
c0108090:	8b 45 10             	mov    0x10(%ebp),%eax
c0108093:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010809a:	8b 45 14             	mov    0x14(%ebp),%eax
c010809d:	01 d0                	add    %edx,%eax
c010809f:	8b 00                	mov    (%eax),%eax
c01080a1:	83 e0 07             	and    $0x7,%eax
c01080a4:	89 c2                	mov    %eax,%edx
c01080a6:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01080a9:	39 c2                	cmp    %eax,%edx
c01080ab:	74 d7                	je     c0108084 <get_pgtable_items+0x73>
            start ++;
        }
        if (right_store != NULL) {
c01080ad:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
c01080b1:	74 08                	je     c01080bb <get_pgtable_items+0xaa>
            *right_store = start;
c01080b3:	8b 45 1c             	mov    0x1c(%ebp),%eax
c01080b6:	8b 55 10             	mov    0x10(%ebp),%edx
c01080b9:	89 10                	mov    %edx,(%eax)
        }
        return perm;
c01080bb:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01080be:	eb 05                	jmp    c01080c5 <get_pgtable_items+0xb4>
    }
    return 0;
c01080c0:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01080c5:	c9                   	leave  
c01080c6:	c3                   	ret    

c01080c7 <print_pgdir>:

//print_pgdir - print the PDT&PT
void
print_pgdir(void) {
c01080c7:	55                   	push   %ebp
c01080c8:	89 e5                	mov    %esp,%ebp
c01080ca:	57                   	push   %edi
c01080cb:	56                   	push   %esi
c01080cc:	53                   	push   %ebx
c01080cd:	83 ec 4c             	sub    $0x4c,%esp
    cprintf("-------------------- BEGIN --------------------\n");
c01080d0:	c7 04 24 54 eb 10 c0 	movl   $0xc010eb54,(%esp)
c01080d7:	e8 fa 96 ff ff       	call   c01017d6 <cprintf>
    size_t left, right = 0, perm;
c01080dc:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
c01080e3:	e9 fa 00 00 00       	jmp    c01081e2 <print_pgdir+0x11b>
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
c01080e8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01080eb:	89 04 24             	mov    %eax,(%esp)
c01080ee:	e8 d0 fe ff ff       	call   c0107fc3 <perm2str>
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
c01080f3:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c01080f6:	8b 55 e0             	mov    -0x20(%ebp),%edx
c01080f9:	29 d1                	sub    %edx,%ecx
c01080fb:	89 ca                	mov    %ecx,%edx
void
print_pgdir(void) {
    cprintf("-------------------- BEGIN --------------------\n");
    size_t left, right = 0, perm;
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
c01080fd:	89 d6                	mov    %edx,%esi
c01080ff:	c1 e6 16             	shl    $0x16,%esi
c0108102:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0108105:	89 d3                	mov    %edx,%ebx
c0108107:	c1 e3 16             	shl    $0x16,%ebx
c010810a:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010810d:	89 d1                	mov    %edx,%ecx
c010810f:	c1 e1 16             	shl    $0x16,%ecx
c0108112:	8b 7d dc             	mov    -0x24(%ebp),%edi
c0108115:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0108118:	29 d7                	sub    %edx,%edi
c010811a:	89 fa                	mov    %edi,%edx
c010811c:	89 44 24 14          	mov    %eax,0x14(%esp)
c0108120:	89 74 24 10          	mov    %esi,0x10(%esp)
c0108124:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c0108128:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c010812c:	89 54 24 04          	mov    %edx,0x4(%esp)
c0108130:	c7 04 24 85 eb 10 c0 	movl   $0xc010eb85,(%esp)
c0108137:	e8 9a 96 ff ff       	call   c01017d6 <cprintf>
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
        size_t l, r = left * NPTEENTRY;
c010813c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010813f:	c1 e0 0a             	shl    $0xa,%eax
c0108142:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
c0108145:	eb 54                	jmp    c010819b <print_pgdir+0xd4>
            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
c0108147:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010814a:	89 04 24             	mov    %eax,(%esp)
c010814d:	e8 71 fe ff ff       	call   c0107fc3 <perm2str>
                    l * PGSIZE, r * PGSIZE, (r - l) * PGSIZE, perm2str(perm));
c0108152:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
c0108155:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0108158:	29 d1                	sub    %edx,%ecx
c010815a:	89 ca                	mov    %ecx,%edx
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
        size_t l, r = left * NPTEENTRY;
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
c010815c:	89 d6                	mov    %edx,%esi
c010815e:	c1 e6 0c             	shl    $0xc,%esi
c0108161:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0108164:	89 d3                	mov    %edx,%ebx
c0108166:	c1 e3 0c             	shl    $0xc,%ebx
c0108169:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010816c:	c1 e2 0c             	shl    $0xc,%edx
c010816f:	89 d1                	mov    %edx,%ecx
c0108171:	8b 7d d4             	mov    -0x2c(%ebp),%edi
c0108174:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0108177:	29 d7                	sub    %edx,%edi
c0108179:	89 fa                	mov    %edi,%edx
c010817b:	89 44 24 14          	mov    %eax,0x14(%esp)
c010817f:	89 74 24 10          	mov    %esi,0x10(%esp)
c0108183:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c0108187:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c010818b:	89 54 24 04          	mov    %edx,0x4(%esp)
c010818f:	c7 04 24 a4 eb 10 c0 	movl   $0xc010eba4,(%esp)
c0108196:	e8 3b 96 ff ff       	call   c01017d6 <cprintf>
    size_t left, right = 0, perm;
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
        size_t l, r = left * NPTEENTRY;
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
c010819b:	ba 00 00 c0 fa       	mov    $0xfac00000,%edx
c01081a0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01081a3:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c01081a6:	89 ce                	mov    %ecx,%esi
c01081a8:	c1 e6 0a             	shl    $0xa,%esi
c01081ab:	8b 4d e0             	mov    -0x20(%ebp),%ecx
c01081ae:	89 cb                	mov    %ecx,%ebx
c01081b0:	c1 e3 0a             	shl    $0xa,%ebx
c01081b3:	8d 4d d4             	lea    -0x2c(%ebp),%ecx
c01081b6:	89 4c 24 14          	mov    %ecx,0x14(%esp)
c01081ba:	8d 4d d8             	lea    -0x28(%ebp),%ecx
c01081bd:	89 4c 24 10          	mov    %ecx,0x10(%esp)
c01081c1:	89 54 24 0c          	mov    %edx,0xc(%esp)
c01081c5:	89 44 24 08          	mov    %eax,0x8(%esp)
c01081c9:	89 74 24 04          	mov    %esi,0x4(%esp)
c01081cd:	89 1c 24             	mov    %ebx,(%esp)
c01081d0:	e8 3c fe ff ff       	call   c0108011 <get_pgtable_items>
c01081d5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01081d8:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c01081dc:	0f 85 65 ff ff ff    	jne    c0108147 <print_pgdir+0x80>
//print_pgdir - print the PDT&PT
void
print_pgdir(void) {
    cprintf("-------------------- BEGIN --------------------\n");
    size_t left, right = 0, perm;
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
c01081e2:	ba 00 b0 fe fa       	mov    $0xfafeb000,%edx
c01081e7:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01081ea:	8d 4d dc             	lea    -0x24(%ebp),%ecx
c01081ed:	89 4c 24 14          	mov    %ecx,0x14(%esp)
c01081f1:	8d 4d e0             	lea    -0x20(%ebp),%ecx
c01081f4:	89 4c 24 10          	mov    %ecx,0x10(%esp)
c01081f8:	89 54 24 0c          	mov    %edx,0xc(%esp)
c01081fc:	89 44 24 08          	mov    %eax,0x8(%esp)
c0108200:	c7 44 24 04 00 04 00 	movl   $0x400,0x4(%esp)
c0108207:	00 
c0108208:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c010820f:	e8 fd fd ff ff       	call   c0108011 <get_pgtable_items>
c0108214:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0108217:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010821b:	0f 85 c7 fe ff ff    	jne    c01080e8 <print_pgdir+0x21>
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
                    l * PGSIZE, r * PGSIZE, (r - l) * PGSIZE, perm2str(perm));
        }
    }
    cprintf("--------------------- END ---------------------\n");
c0108221:	c7 04 24 c8 eb 10 c0 	movl   $0xc010ebc8,(%esp)
c0108228:	e8 a9 95 ff ff       	call   c01017d6 <cprintf>
}
c010822d:	83 c4 4c             	add    $0x4c,%esp
c0108230:	5b                   	pop    %ebx
c0108231:	5e                   	pop    %esi
c0108232:	5f                   	pop    %edi
c0108233:	5d                   	pop    %ebp
c0108234:	c3                   	ret    

c0108235 <pa2page>:
page2pa(struct Page *page) {
    return page2ppn(page) << PGSHIFT;
}

static inline struct Page *
pa2page(uintptr_t pa) {
c0108235:	55                   	push   %ebp
c0108236:	89 e5                	mov    %esp,%ebp
c0108238:	83 ec 18             	sub    $0x18,%esp
    if (PPN(pa) >= npage) {
c010823b:	8b 45 08             	mov    0x8(%ebp),%eax
c010823e:	c1 e8 0c             	shr    $0xc,%eax
c0108241:	89 c2                	mov    %eax,%edx
c0108243:	a1 e0 0e 1a c0       	mov    0xc01a0ee0,%eax
c0108248:	39 c2                	cmp    %eax,%edx
c010824a:	72 1c                	jb     c0108268 <pa2page+0x33>
        panic("pa2page called with invalid pa");
c010824c:	c7 44 24 08 fc eb 10 	movl   $0xc010ebfc,0x8(%esp)
c0108253:	c0 
c0108254:	c7 44 24 04 60 00 00 	movl   $0x60,0x4(%esp)
c010825b:	00 
c010825c:	c7 04 24 1b ec 10 c0 	movl   $0xc010ec1b,(%esp)
c0108263:	e8 f0 9f ff ff       	call   c0102258 <__panic>
    }
    return &pages[PPN(pa)];
c0108268:	8b 0d d0 2f 1a c0    	mov    0xc01a2fd0,%ecx
c010826e:	8b 45 08             	mov    0x8(%ebp),%eax
c0108271:	c1 e8 0c             	shr    $0xc,%eax
c0108274:	89 c2                	mov    %eax,%edx
c0108276:	89 d0                	mov    %edx,%eax
c0108278:	c1 e0 03             	shl    $0x3,%eax
c010827b:	01 d0                	add    %edx,%eax
c010827d:	c1 e0 02             	shl    $0x2,%eax
c0108280:	01 c8                	add    %ecx,%eax
}
c0108282:	c9                   	leave  
c0108283:	c3                   	ret    

c0108284 <pte2page>:
kva2page(void *kva) {
    return pa2page(PADDR(kva));
}

static inline struct Page *
pte2page(pte_t pte) {
c0108284:	55                   	push   %ebp
c0108285:	89 e5                	mov    %esp,%ebp
c0108287:	83 ec 18             	sub    $0x18,%esp
    if (!(pte & PTE_P)) {
c010828a:	8b 45 08             	mov    0x8(%ebp),%eax
c010828d:	83 e0 01             	and    $0x1,%eax
c0108290:	85 c0                	test   %eax,%eax
c0108292:	75 1c                	jne    c01082b0 <pte2page+0x2c>
        panic("pte2page called with invalid pte");
c0108294:	c7 44 24 08 2c ec 10 	movl   $0xc010ec2c,0x8(%esp)
c010829b:	c0 
c010829c:	c7 44 24 04 72 00 00 	movl   $0x72,0x4(%esp)
c01082a3:	00 
c01082a4:	c7 04 24 1b ec 10 c0 	movl   $0xc010ec1b,(%esp)
c01082ab:	e8 a8 9f ff ff       	call   c0102258 <__panic>
    }
    return pa2page(PTE_ADDR(pte));
c01082b0:	8b 45 08             	mov    0x8(%ebp),%eax
c01082b3:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01082b8:	89 04 24             	mov    %eax,(%esp)
c01082bb:	e8 75 ff ff ff       	call   c0108235 <pa2page>
}
c01082c0:	c9                   	leave  
c01082c1:	c3                   	ret    

c01082c2 <swap_init>:

static void check_swap(void);

int
swap_init(void)
{
c01082c2:	55                   	push   %ebp
c01082c3:	89 e5                	mov    %esp,%ebp
c01082c5:	83 ec 28             	sub    $0x28,%esp
     swapfs_init();
c01082c8:	e8 63 23 00 00       	call   c010a630 <swapfs_init>

     if (!(1024 <= max_swap_offset && max_swap_offset < MAX_SWAP_OFFSET_LIMIT))
c01082cd:	a1 7c 30 1a c0       	mov    0xc01a307c,%eax
c01082d2:	3d ff 03 00 00       	cmp    $0x3ff,%eax
c01082d7:	76 0c                	jbe    c01082e5 <swap_init+0x23>
c01082d9:	a1 7c 30 1a c0       	mov    0xc01a307c,%eax
c01082de:	3d ff ff ff 00       	cmp    $0xffffff,%eax
c01082e3:	76 25                	jbe    c010830a <swap_init+0x48>
     {
          panic("bad max_swap_offset %08x.\n", max_swap_offset);
c01082e5:	a1 7c 30 1a c0       	mov    0xc01a307c,%eax
c01082ea:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01082ee:	c7 44 24 08 4d ec 10 	movl   $0xc010ec4d,0x8(%esp)
c01082f5:	c0 
c01082f6:	c7 44 24 04 27 00 00 	movl   $0x27,0x4(%esp)
c01082fd:	00 
c01082fe:	c7 04 24 68 ec 10 c0 	movl   $0xc010ec68,(%esp)
c0108305:	e8 4e 9f ff ff       	call   c0102258 <__panic>
     }
     

     sm = &swap_manager_fifo;
c010830a:	c7 05 78 0f 1a c0 60 	movl   $0xc012ea60,0xc01a0f78
c0108311:	ea 12 c0 
     int r = sm->init();
c0108314:	a1 78 0f 1a c0       	mov    0xc01a0f78,%eax
c0108319:	8b 40 04             	mov    0x4(%eax),%eax
c010831c:	ff d0                	call   *%eax
c010831e:	89 45 f4             	mov    %eax,-0xc(%ebp)
     
     if (r == 0)
c0108321:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0108325:	75 26                	jne    c010834d <swap_init+0x8b>
     {
          swap_init_ok = 1;
c0108327:	c7 05 70 0f 1a c0 01 	movl   $0x1,0xc01a0f70
c010832e:	00 00 00 
          cprintf("SWAP: manager = %s\n", sm->name);
c0108331:	a1 78 0f 1a c0       	mov    0xc01a0f78,%eax
c0108336:	8b 00                	mov    (%eax),%eax
c0108338:	89 44 24 04          	mov    %eax,0x4(%esp)
c010833c:	c7 04 24 77 ec 10 c0 	movl   $0xc010ec77,(%esp)
c0108343:	e8 8e 94 ff ff       	call   c01017d6 <cprintf>
          check_swap();
c0108348:	e8 a4 04 00 00       	call   c01087f1 <check_swap>
     }

     return r;
c010834d:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0108350:	c9                   	leave  
c0108351:	c3                   	ret    

c0108352 <swap_init_mm>:

int
swap_init_mm(struct mm_struct *mm)
{
c0108352:	55                   	push   %ebp
c0108353:	89 e5                	mov    %esp,%ebp
c0108355:	83 ec 18             	sub    $0x18,%esp
     return sm->init_mm(mm);
c0108358:	a1 78 0f 1a c0       	mov    0xc01a0f78,%eax
c010835d:	8b 40 08             	mov    0x8(%eax),%eax
c0108360:	8b 55 08             	mov    0x8(%ebp),%edx
c0108363:	89 14 24             	mov    %edx,(%esp)
c0108366:	ff d0                	call   *%eax
}
c0108368:	c9                   	leave  
c0108369:	c3                   	ret    

c010836a <swap_tick_event>:

int
swap_tick_event(struct mm_struct *mm)
{
c010836a:	55                   	push   %ebp
c010836b:	89 e5                	mov    %esp,%ebp
c010836d:	83 ec 18             	sub    $0x18,%esp
     return sm->tick_event(mm);
c0108370:	a1 78 0f 1a c0       	mov    0xc01a0f78,%eax
c0108375:	8b 40 0c             	mov    0xc(%eax),%eax
c0108378:	8b 55 08             	mov    0x8(%ebp),%edx
c010837b:	89 14 24             	mov    %edx,(%esp)
c010837e:	ff d0                	call   *%eax
}
c0108380:	c9                   	leave  
c0108381:	c3                   	ret    

c0108382 <swap_map_swappable>:

int
swap_map_swappable(struct mm_struct *mm, uintptr_t addr, struct Page *page, int swap_in)
{
c0108382:	55                   	push   %ebp
c0108383:	89 e5                	mov    %esp,%ebp
c0108385:	83 ec 18             	sub    $0x18,%esp
     return sm->map_swappable(mm, addr, page, swap_in);
c0108388:	a1 78 0f 1a c0       	mov    0xc01a0f78,%eax
c010838d:	8b 40 10             	mov    0x10(%eax),%eax
c0108390:	8b 55 14             	mov    0x14(%ebp),%edx
c0108393:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0108397:	8b 55 10             	mov    0x10(%ebp),%edx
c010839a:	89 54 24 08          	mov    %edx,0x8(%esp)
c010839e:	8b 55 0c             	mov    0xc(%ebp),%edx
c01083a1:	89 54 24 04          	mov    %edx,0x4(%esp)
c01083a5:	8b 55 08             	mov    0x8(%ebp),%edx
c01083a8:	89 14 24             	mov    %edx,(%esp)
c01083ab:	ff d0                	call   *%eax
}
c01083ad:	c9                   	leave  
c01083ae:	c3                   	ret    

c01083af <swap_set_unswappable>:

int
swap_set_unswappable(struct mm_struct *mm, uintptr_t addr)
{
c01083af:	55                   	push   %ebp
c01083b0:	89 e5                	mov    %esp,%ebp
c01083b2:	83 ec 18             	sub    $0x18,%esp
     return sm->set_unswappable(mm, addr);
c01083b5:	a1 78 0f 1a c0       	mov    0xc01a0f78,%eax
c01083ba:	8b 40 14             	mov    0x14(%eax),%eax
c01083bd:	8b 55 0c             	mov    0xc(%ebp),%edx
c01083c0:	89 54 24 04          	mov    %edx,0x4(%esp)
c01083c4:	8b 55 08             	mov    0x8(%ebp),%edx
c01083c7:	89 14 24             	mov    %edx,(%esp)
c01083ca:	ff d0                	call   *%eax
}
c01083cc:	c9                   	leave  
c01083cd:	c3                   	ret    

c01083ce <swap_out>:

volatile unsigned int swap_out_num=0;

int
swap_out(struct mm_struct *mm, int n, int in_tick)
{
c01083ce:	55                   	push   %ebp
c01083cf:	89 e5                	mov    %esp,%ebp
c01083d1:	83 ec 38             	sub    $0x38,%esp
     int i;
     for (i = 0; i != n; ++ i)
c01083d4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01083db:	e9 5a 01 00 00       	jmp    c010853a <swap_out+0x16c>
     {
          uintptr_t v;
          //struct Page **ptr_page=NULL;
          struct Page *page;
          // cprintf("i %d, SWAP: call swap_out_victim\n",i);
          int r = sm->swap_out_victim(mm, &page, in_tick);
c01083e0:	a1 78 0f 1a c0       	mov    0xc01a0f78,%eax
c01083e5:	8b 40 18             	mov    0x18(%eax),%eax
c01083e8:	8b 55 10             	mov    0x10(%ebp),%edx
c01083eb:	89 54 24 08          	mov    %edx,0x8(%esp)
c01083ef:	8d 55 e4             	lea    -0x1c(%ebp),%edx
c01083f2:	89 54 24 04          	mov    %edx,0x4(%esp)
c01083f6:	8b 55 08             	mov    0x8(%ebp),%edx
c01083f9:	89 14 24             	mov    %edx,(%esp)
c01083fc:	ff d0                	call   *%eax
c01083fe:	89 45 f0             	mov    %eax,-0x10(%ebp)
          if (r != 0) {
c0108401:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0108405:	74 18                	je     c010841f <swap_out+0x51>
                    cprintf("i %d, swap_out: call swap_out_victim failed\n",i);
c0108407:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010840a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010840e:	c7 04 24 8c ec 10 c0 	movl   $0xc010ec8c,(%esp)
c0108415:	e8 bc 93 ff ff       	call   c01017d6 <cprintf>
c010841a:	e9 27 01 00 00       	jmp    c0108546 <swap_out+0x178>
          }          
          //assert(!PageReserved(page));

          //cprintf("SWAP: choose victim page 0x%08x\n", page);
          
          v=page->pra_vaddr; 
c010841f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108422:	8b 40 20             	mov    0x20(%eax),%eax
c0108425:	89 45 ec             	mov    %eax,-0x14(%ebp)
          pte_t *ptep = get_pte(mm->pgdir, v, 0);
c0108428:	8b 45 08             	mov    0x8(%ebp),%eax
c010842b:	8b 40 0c             	mov    0xc(%eax),%eax
c010842e:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0108435:	00 
c0108436:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0108439:	89 54 24 04          	mov    %edx,0x4(%esp)
c010843d:	89 04 24             	mov    %eax,(%esp)
c0108440:	e8 f9 e8 ff ff       	call   c0106d3e <get_pte>
c0108445:	89 45 e8             	mov    %eax,-0x18(%ebp)
          assert((*ptep & PTE_P) != 0);
c0108448:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010844b:	8b 00                	mov    (%eax),%eax
c010844d:	83 e0 01             	and    $0x1,%eax
c0108450:	85 c0                	test   %eax,%eax
c0108452:	75 24                	jne    c0108478 <swap_out+0xaa>
c0108454:	c7 44 24 0c b9 ec 10 	movl   $0xc010ecb9,0xc(%esp)
c010845b:	c0 
c010845c:	c7 44 24 08 ce ec 10 	movl   $0xc010ecce,0x8(%esp)
c0108463:	c0 
c0108464:	c7 44 24 04 67 00 00 	movl   $0x67,0x4(%esp)
c010846b:	00 
c010846c:	c7 04 24 68 ec 10 c0 	movl   $0xc010ec68,(%esp)
c0108473:	e8 e0 9d ff ff       	call   c0102258 <__panic>

          if (swapfs_write( (page->pra_vaddr/PGSIZE+1)<<8, page) != 0) {
c0108478:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010847b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010847e:	8b 52 20             	mov    0x20(%edx),%edx
c0108481:	c1 ea 0c             	shr    $0xc,%edx
c0108484:	83 c2 01             	add    $0x1,%edx
c0108487:	c1 e2 08             	shl    $0x8,%edx
c010848a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010848e:	89 14 24             	mov    %edx,(%esp)
c0108491:	e8 54 22 00 00       	call   c010a6ea <swapfs_write>
c0108496:	85 c0                	test   %eax,%eax
c0108498:	74 34                	je     c01084ce <swap_out+0x100>
                    cprintf("SWAP: failed to save\n");
c010849a:	c7 04 24 e3 ec 10 c0 	movl   $0xc010ece3,(%esp)
c01084a1:	e8 30 93 ff ff       	call   c01017d6 <cprintf>
                    sm->map_swappable(mm, v, page, 0);
c01084a6:	a1 78 0f 1a c0       	mov    0xc01a0f78,%eax
c01084ab:	8b 40 10             	mov    0x10(%eax),%eax
c01084ae:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01084b1:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c01084b8:	00 
c01084b9:	89 54 24 08          	mov    %edx,0x8(%esp)
c01084bd:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01084c0:	89 54 24 04          	mov    %edx,0x4(%esp)
c01084c4:	8b 55 08             	mov    0x8(%ebp),%edx
c01084c7:	89 14 24             	mov    %edx,(%esp)
c01084ca:	ff d0                	call   *%eax
c01084cc:	eb 68                	jmp    c0108536 <swap_out+0x168>
                    continue;
          }
          else {
                    cprintf("swap_out: i %d, store page in vaddr 0x%x to disk swap entry %d\n", i, v, page->pra_vaddr/PGSIZE+1);
c01084ce:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01084d1:	8b 40 20             	mov    0x20(%eax),%eax
c01084d4:	c1 e8 0c             	shr    $0xc,%eax
c01084d7:	83 c0 01             	add    $0x1,%eax
c01084da:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01084de:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01084e1:	89 44 24 08          	mov    %eax,0x8(%esp)
c01084e5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01084e8:	89 44 24 04          	mov    %eax,0x4(%esp)
c01084ec:	c7 04 24 fc ec 10 c0 	movl   $0xc010ecfc,(%esp)
c01084f3:	e8 de 92 ff ff       	call   c01017d6 <cprintf>
                    *ptep = (page->pra_vaddr/PGSIZE+1)<<8;
c01084f8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01084fb:	8b 40 20             	mov    0x20(%eax),%eax
c01084fe:	c1 e8 0c             	shr    $0xc,%eax
c0108501:	83 c0 01             	add    $0x1,%eax
c0108504:	c1 e0 08             	shl    $0x8,%eax
c0108507:	89 c2                	mov    %eax,%edx
c0108509:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010850c:	89 10                	mov    %edx,(%eax)
                    free_page(page);
c010850e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108511:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0108518:	00 
c0108519:	89 04 24             	mov    %eax,(%esp)
c010851c:	e8 04 e1 ff ff       	call   c0106625 <free_pages>
          }
          
          tlb_invalidate(mm->pgdir, v);
c0108521:	8b 45 08             	mov    0x8(%ebp),%eax
c0108524:	8b 40 0c             	mov    0xc(%eax),%eax
c0108527:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010852a:	89 54 24 04          	mov    %edx,0x4(%esp)
c010852e:	89 04 24             	mov    %eax,(%esp)
c0108531:	e8 15 ef ff ff       	call   c010744b <tlb_invalidate>

int
swap_out(struct mm_struct *mm, int n, int in_tick)
{
     int i;
     for (i = 0; i != n; ++ i)
c0108536:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010853a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010853d:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0108540:	0f 85 9a fe ff ff    	jne    c01083e0 <swap_out+0x12>
                    free_page(page);
          }
          
          tlb_invalidate(mm->pgdir, v);
     }
     return i;
c0108546:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0108549:	c9                   	leave  
c010854a:	c3                   	ret    

c010854b <swap_in>:

int
swap_in(struct mm_struct *mm, uintptr_t addr, struct Page **ptr_result)
{
c010854b:	55                   	push   %ebp
c010854c:	89 e5                	mov    %esp,%ebp
c010854e:	83 ec 28             	sub    $0x28,%esp
     struct Page *result = alloc_page();
c0108551:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0108558:	e8 4c e0 ff ff       	call   c01065a9 <alloc_pages>
c010855d:	89 45 f4             	mov    %eax,-0xc(%ebp)
     assert(result!=NULL);
c0108560:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0108564:	75 24                	jne    c010858a <swap_in+0x3f>
c0108566:	c7 44 24 0c 3c ed 10 	movl   $0xc010ed3c,0xc(%esp)
c010856d:	c0 
c010856e:	c7 44 24 08 ce ec 10 	movl   $0xc010ecce,0x8(%esp)
c0108575:	c0 
c0108576:	c7 44 24 04 7d 00 00 	movl   $0x7d,0x4(%esp)
c010857d:	00 
c010857e:	c7 04 24 68 ec 10 c0 	movl   $0xc010ec68,(%esp)
c0108585:	e8 ce 9c ff ff       	call   c0102258 <__panic>

     pte_t *ptep = get_pte(mm->pgdir, addr, 0);
c010858a:	8b 45 08             	mov    0x8(%ebp),%eax
c010858d:	8b 40 0c             	mov    0xc(%eax),%eax
c0108590:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0108597:	00 
c0108598:	8b 55 0c             	mov    0xc(%ebp),%edx
c010859b:	89 54 24 04          	mov    %edx,0x4(%esp)
c010859f:	89 04 24             	mov    %eax,(%esp)
c01085a2:	e8 97 e7 ff ff       	call   c0106d3e <get_pte>
c01085a7:	89 45 f0             	mov    %eax,-0x10(%ebp)
     // cprintf("SWAP: load ptep %x swap entry %d to vaddr 0x%08x, page %x, No %d\n", ptep, (*ptep)>>8, addr, result, (result-pages));
    
     int r;
     if ((r = swapfs_read((*ptep), result)) != 0)
c01085aa:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01085ad:	8b 00                	mov    (%eax),%eax
c01085af:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01085b2:	89 54 24 04          	mov    %edx,0x4(%esp)
c01085b6:	89 04 24             	mov    %eax,(%esp)
c01085b9:	e8 ba 20 00 00       	call   c010a678 <swapfs_read>
c01085be:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01085c1:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01085c5:	74 2a                	je     c01085f1 <swap_in+0xa6>
     {
        assert(r!=0);
c01085c7:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01085cb:	75 24                	jne    c01085f1 <swap_in+0xa6>
c01085cd:	c7 44 24 0c 49 ed 10 	movl   $0xc010ed49,0xc(%esp)
c01085d4:	c0 
c01085d5:	c7 44 24 08 ce ec 10 	movl   $0xc010ecce,0x8(%esp)
c01085dc:	c0 
c01085dd:	c7 44 24 04 85 00 00 	movl   $0x85,0x4(%esp)
c01085e4:	00 
c01085e5:	c7 04 24 68 ec 10 c0 	movl   $0xc010ec68,(%esp)
c01085ec:	e8 67 9c ff ff       	call   c0102258 <__panic>
     }
     cprintf("swap_in: load disk swap entry %d with swap_page in vadr 0x%x\n", (*ptep)>>8, addr);
c01085f1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01085f4:	8b 00                	mov    (%eax),%eax
c01085f6:	c1 e8 08             	shr    $0x8,%eax
c01085f9:	89 c2                	mov    %eax,%edx
c01085fb:	8b 45 0c             	mov    0xc(%ebp),%eax
c01085fe:	89 44 24 08          	mov    %eax,0x8(%esp)
c0108602:	89 54 24 04          	mov    %edx,0x4(%esp)
c0108606:	c7 04 24 50 ed 10 c0 	movl   $0xc010ed50,(%esp)
c010860d:	e8 c4 91 ff ff       	call   c01017d6 <cprintf>
     *ptr_result=result;
c0108612:	8b 45 10             	mov    0x10(%ebp),%eax
c0108615:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108618:	89 10                	mov    %edx,(%eax)
     return 0;
c010861a:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010861f:	c9                   	leave  
c0108620:	c3                   	ret    

c0108621 <check_content_set>:



static inline void
check_content_set(void)
{
c0108621:	55                   	push   %ebp
c0108622:	89 e5                	mov    %esp,%ebp
c0108624:	83 ec 18             	sub    $0x18,%esp
     *(unsigned char *)0x1000 = 0x0a;
c0108627:	b8 00 10 00 00       	mov    $0x1000,%eax
c010862c:	c6 00 0a             	movb   $0xa,(%eax)
     assert(pgfault_num==1);
c010862f:	a1 7c 0f 1a c0       	mov    0xc01a0f7c,%eax
c0108634:	83 f8 01             	cmp    $0x1,%eax
c0108637:	74 24                	je     c010865d <check_content_set+0x3c>
c0108639:	c7 44 24 0c 8e ed 10 	movl   $0xc010ed8e,0xc(%esp)
c0108640:	c0 
c0108641:	c7 44 24 08 ce ec 10 	movl   $0xc010ecce,0x8(%esp)
c0108648:	c0 
c0108649:	c7 44 24 04 92 00 00 	movl   $0x92,0x4(%esp)
c0108650:	00 
c0108651:	c7 04 24 68 ec 10 c0 	movl   $0xc010ec68,(%esp)
c0108658:	e8 fb 9b ff ff       	call   c0102258 <__panic>
     *(unsigned char *)0x1010 = 0x0a;
c010865d:	b8 10 10 00 00       	mov    $0x1010,%eax
c0108662:	c6 00 0a             	movb   $0xa,(%eax)
     assert(pgfault_num==1);
c0108665:	a1 7c 0f 1a c0       	mov    0xc01a0f7c,%eax
c010866a:	83 f8 01             	cmp    $0x1,%eax
c010866d:	74 24                	je     c0108693 <check_content_set+0x72>
c010866f:	c7 44 24 0c 8e ed 10 	movl   $0xc010ed8e,0xc(%esp)
c0108676:	c0 
c0108677:	c7 44 24 08 ce ec 10 	movl   $0xc010ecce,0x8(%esp)
c010867e:	c0 
c010867f:	c7 44 24 04 94 00 00 	movl   $0x94,0x4(%esp)
c0108686:	00 
c0108687:	c7 04 24 68 ec 10 c0 	movl   $0xc010ec68,(%esp)
c010868e:	e8 c5 9b ff ff       	call   c0102258 <__panic>
     *(unsigned char *)0x2000 = 0x0b;
c0108693:	b8 00 20 00 00       	mov    $0x2000,%eax
c0108698:	c6 00 0b             	movb   $0xb,(%eax)
     assert(pgfault_num==2);
c010869b:	a1 7c 0f 1a c0       	mov    0xc01a0f7c,%eax
c01086a0:	83 f8 02             	cmp    $0x2,%eax
c01086a3:	74 24                	je     c01086c9 <check_content_set+0xa8>
c01086a5:	c7 44 24 0c 9d ed 10 	movl   $0xc010ed9d,0xc(%esp)
c01086ac:	c0 
c01086ad:	c7 44 24 08 ce ec 10 	movl   $0xc010ecce,0x8(%esp)
c01086b4:	c0 
c01086b5:	c7 44 24 04 96 00 00 	movl   $0x96,0x4(%esp)
c01086bc:	00 
c01086bd:	c7 04 24 68 ec 10 c0 	movl   $0xc010ec68,(%esp)
c01086c4:	e8 8f 9b ff ff       	call   c0102258 <__panic>
     *(unsigned char *)0x2010 = 0x0b;
c01086c9:	b8 10 20 00 00       	mov    $0x2010,%eax
c01086ce:	c6 00 0b             	movb   $0xb,(%eax)
     assert(pgfault_num==2);
c01086d1:	a1 7c 0f 1a c0       	mov    0xc01a0f7c,%eax
c01086d6:	83 f8 02             	cmp    $0x2,%eax
c01086d9:	74 24                	je     c01086ff <check_content_set+0xde>
c01086db:	c7 44 24 0c 9d ed 10 	movl   $0xc010ed9d,0xc(%esp)
c01086e2:	c0 
c01086e3:	c7 44 24 08 ce ec 10 	movl   $0xc010ecce,0x8(%esp)
c01086ea:	c0 
c01086eb:	c7 44 24 04 98 00 00 	movl   $0x98,0x4(%esp)
c01086f2:	00 
c01086f3:	c7 04 24 68 ec 10 c0 	movl   $0xc010ec68,(%esp)
c01086fa:	e8 59 9b ff ff       	call   c0102258 <__panic>
     *(unsigned char *)0x3000 = 0x0c;
c01086ff:	b8 00 30 00 00       	mov    $0x3000,%eax
c0108704:	c6 00 0c             	movb   $0xc,(%eax)
     assert(pgfault_num==3);
c0108707:	a1 7c 0f 1a c0       	mov    0xc01a0f7c,%eax
c010870c:	83 f8 03             	cmp    $0x3,%eax
c010870f:	74 24                	je     c0108735 <check_content_set+0x114>
c0108711:	c7 44 24 0c ac ed 10 	movl   $0xc010edac,0xc(%esp)
c0108718:	c0 
c0108719:	c7 44 24 08 ce ec 10 	movl   $0xc010ecce,0x8(%esp)
c0108720:	c0 
c0108721:	c7 44 24 04 9a 00 00 	movl   $0x9a,0x4(%esp)
c0108728:	00 
c0108729:	c7 04 24 68 ec 10 c0 	movl   $0xc010ec68,(%esp)
c0108730:	e8 23 9b ff ff       	call   c0102258 <__panic>
     *(unsigned char *)0x3010 = 0x0c;
c0108735:	b8 10 30 00 00       	mov    $0x3010,%eax
c010873a:	c6 00 0c             	movb   $0xc,(%eax)
     assert(pgfault_num==3);
c010873d:	a1 7c 0f 1a c0       	mov    0xc01a0f7c,%eax
c0108742:	83 f8 03             	cmp    $0x3,%eax
c0108745:	74 24                	je     c010876b <check_content_set+0x14a>
c0108747:	c7 44 24 0c ac ed 10 	movl   $0xc010edac,0xc(%esp)
c010874e:	c0 
c010874f:	c7 44 24 08 ce ec 10 	movl   $0xc010ecce,0x8(%esp)
c0108756:	c0 
c0108757:	c7 44 24 04 9c 00 00 	movl   $0x9c,0x4(%esp)
c010875e:	00 
c010875f:	c7 04 24 68 ec 10 c0 	movl   $0xc010ec68,(%esp)
c0108766:	e8 ed 9a ff ff       	call   c0102258 <__panic>
     *(unsigned char *)0x4000 = 0x0d;
c010876b:	b8 00 40 00 00       	mov    $0x4000,%eax
c0108770:	c6 00 0d             	movb   $0xd,(%eax)
     assert(pgfault_num==4);
c0108773:	a1 7c 0f 1a c0       	mov    0xc01a0f7c,%eax
c0108778:	83 f8 04             	cmp    $0x4,%eax
c010877b:	74 24                	je     c01087a1 <check_content_set+0x180>
c010877d:	c7 44 24 0c bb ed 10 	movl   $0xc010edbb,0xc(%esp)
c0108784:	c0 
c0108785:	c7 44 24 08 ce ec 10 	movl   $0xc010ecce,0x8(%esp)
c010878c:	c0 
c010878d:	c7 44 24 04 9e 00 00 	movl   $0x9e,0x4(%esp)
c0108794:	00 
c0108795:	c7 04 24 68 ec 10 c0 	movl   $0xc010ec68,(%esp)
c010879c:	e8 b7 9a ff ff       	call   c0102258 <__panic>
     *(unsigned char *)0x4010 = 0x0d;
c01087a1:	b8 10 40 00 00       	mov    $0x4010,%eax
c01087a6:	c6 00 0d             	movb   $0xd,(%eax)
     assert(pgfault_num==4);
c01087a9:	a1 7c 0f 1a c0       	mov    0xc01a0f7c,%eax
c01087ae:	83 f8 04             	cmp    $0x4,%eax
c01087b1:	74 24                	je     c01087d7 <check_content_set+0x1b6>
c01087b3:	c7 44 24 0c bb ed 10 	movl   $0xc010edbb,0xc(%esp)
c01087ba:	c0 
c01087bb:	c7 44 24 08 ce ec 10 	movl   $0xc010ecce,0x8(%esp)
c01087c2:	c0 
c01087c3:	c7 44 24 04 a0 00 00 	movl   $0xa0,0x4(%esp)
c01087ca:	00 
c01087cb:	c7 04 24 68 ec 10 c0 	movl   $0xc010ec68,(%esp)
c01087d2:	e8 81 9a ff ff       	call   c0102258 <__panic>
}
c01087d7:	c9                   	leave  
c01087d8:	c3                   	ret    

c01087d9 <check_content_access>:

static inline int
check_content_access(void)
{
c01087d9:	55                   	push   %ebp
c01087da:	89 e5                	mov    %esp,%ebp
c01087dc:	83 ec 18             	sub    $0x18,%esp
    int ret = sm->check_swap();
c01087df:	a1 78 0f 1a c0       	mov    0xc01a0f78,%eax
c01087e4:	8b 40 1c             	mov    0x1c(%eax),%eax
c01087e7:	ff d0                	call   *%eax
c01087e9:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return ret;
c01087ec:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01087ef:	c9                   	leave  
c01087f0:	c3                   	ret    

c01087f1 <check_swap>:
#define free_list (free_area.free_list)
#define nr_free (free_area.nr_free)

static void
check_swap(void)
{
c01087f1:	55                   	push   %ebp
c01087f2:	89 e5                	mov    %esp,%ebp
c01087f4:	53                   	push   %ebx
c01087f5:	83 ec 74             	sub    $0x74,%esp
    //backup mem env
     int ret, count = 0, total = 0, i;
c01087f8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01087ff:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
     list_entry_t *le = &free_list;
c0108806:	c7 45 e8 bc 2f 1a c0 	movl   $0xc01a2fbc,-0x18(%ebp)
     while ((le = list_next(le)) != &free_list) {
c010880d:	eb 6b                	jmp    c010887a <check_swap+0x89>
        struct Page *p = le2page(le, page_link);
c010880f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108812:	83 e8 10             	sub    $0x10,%eax
c0108815:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        assert(PageProperty(p));
c0108818:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010881b:	83 c0 04             	add    $0x4,%eax
c010881e:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
c0108825:	89 45 c0             	mov    %eax,-0x40(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0108828:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010882b:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c010882e:	0f a3 10             	bt     %edx,(%eax)
c0108831:	19 c0                	sbb    %eax,%eax
c0108833:	89 45 bc             	mov    %eax,-0x44(%ebp)
    return oldbit != 0;
c0108836:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c010883a:	0f 95 c0             	setne  %al
c010883d:	0f b6 c0             	movzbl %al,%eax
c0108840:	85 c0                	test   %eax,%eax
c0108842:	75 24                	jne    c0108868 <check_swap+0x77>
c0108844:	c7 44 24 0c ca ed 10 	movl   $0xc010edca,0xc(%esp)
c010884b:	c0 
c010884c:	c7 44 24 08 ce ec 10 	movl   $0xc010ecce,0x8(%esp)
c0108853:	c0 
c0108854:	c7 44 24 04 bb 00 00 	movl   $0xbb,0x4(%esp)
c010885b:	00 
c010885c:	c7 04 24 68 ec 10 c0 	movl   $0xc010ec68,(%esp)
c0108863:	e8 f0 99 ff ff       	call   c0102258 <__panic>
        count ++, total += p->property;
c0108868:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010886c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010886f:	8b 50 08             	mov    0x8(%eax),%edx
c0108872:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108875:	01 d0                	add    %edx,%eax
c0108877:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010887a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010887d:	89 45 b8             	mov    %eax,-0x48(%ebp)
c0108880:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0108883:	8b 40 04             	mov    0x4(%eax),%eax
check_swap(void)
{
    //backup mem env
     int ret, count = 0, total = 0, i;
     list_entry_t *le = &free_list;
     while ((le = list_next(le)) != &free_list) {
c0108886:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0108889:	81 7d e8 bc 2f 1a c0 	cmpl   $0xc01a2fbc,-0x18(%ebp)
c0108890:	0f 85 79 ff ff ff    	jne    c010880f <check_swap+0x1e>
        struct Page *p = le2page(le, page_link);
        assert(PageProperty(p));
        count ++, total += p->property;
     }
     assert(total == nr_free_pages());
c0108896:	8b 5d f0             	mov    -0x10(%ebp),%ebx
c0108899:	e8 c6 dd ff ff       	call   c0106664 <nr_free_pages>
c010889e:	39 c3                	cmp    %eax,%ebx
c01088a0:	74 24                	je     c01088c6 <check_swap+0xd5>
c01088a2:	c7 44 24 0c da ed 10 	movl   $0xc010edda,0xc(%esp)
c01088a9:	c0 
c01088aa:	c7 44 24 08 ce ec 10 	movl   $0xc010ecce,0x8(%esp)
c01088b1:	c0 
c01088b2:	c7 44 24 04 be 00 00 	movl   $0xbe,0x4(%esp)
c01088b9:	00 
c01088ba:	c7 04 24 68 ec 10 c0 	movl   $0xc010ec68,(%esp)
c01088c1:	e8 92 99 ff ff       	call   c0102258 <__panic>
     cprintf("BEGIN check_swap: count %d, total %d\n",count,total);
c01088c6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01088c9:	89 44 24 08          	mov    %eax,0x8(%esp)
c01088cd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01088d0:	89 44 24 04          	mov    %eax,0x4(%esp)
c01088d4:	c7 04 24 f4 ed 10 c0 	movl   $0xc010edf4,(%esp)
c01088db:	e8 f6 8e ff ff       	call   c01017d6 <cprintf>
     
     //now we set the phy pages env     
     struct mm_struct *mm = mm_create();
c01088e0:	e8 b2 0a 00 00       	call   c0109397 <mm_create>
c01088e5:	89 45 e0             	mov    %eax,-0x20(%ebp)
     assert(mm != NULL);
c01088e8:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c01088ec:	75 24                	jne    c0108912 <check_swap+0x121>
c01088ee:	c7 44 24 0c 1a ee 10 	movl   $0xc010ee1a,0xc(%esp)
c01088f5:	c0 
c01088f6:	c7 44 24 08 ce ec 10 	movl   $0xc010ecce,0x8(%esp)
c01088fd:	c0 
c01088fe:	c7 44 24 04 c3 00 00 	movl   $0xc3,0x4(%esp)
c0108905:	00 
c0108906:	c7 04 24 68 ec 10 c0 	movl   $0xc010ec68,(%esp)
c010890d:	e8 46 99 ff ff       	call   c0102258 <__panic>

     extern struct mm_struct *check_mm_struct;
     assert(check_mm_struct == NULL);
c0108912:	a1 ac 30 1a c0       	mov    0xc01a30ac,%eax
c0108917:	85 c0                	test   %eax,%eax
c0108919:	74 24                	je     c010893f <check_swap+0x14e>
c010891b:	c7 44 24 0c 25 ee 10 	movl   $0xc010ee25,0xc(%esp)
c0108922:	c0 
c0108923:	c7 44 24 08 ce ec 10 	movl   $0xc010ecce,0x8(%esp)
c010892a:	c0 
c010892b:	c7 44 24 04 c6 00 00 	movl   $0xc6,0x4(%esp)
c0108932:	00 
c0108933:	c7 04 24 68 ec 10 c0 	movl   $0xc010ec68,(%esp)
c010893a:	e8 19 99 ff ff       	call   c0102258 <__panic>

     check_mm_struct = mm;
c010893f:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108942:	a3 ac 30 1a c0       	mov    %eax,0xc01a30ac

     pde_t *pgdir = mm->pgdir = boot_pgdir;
c0108947:	8b 15 e4 0e 1a c0    	mov    0xc01a0ee4,%edx
c010894d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108950:	89 50 0c             	mov    %edx,0xc(%eax)
c0108953:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108956:	8b 40 0c             	mov    0xc(%eax),%eax
c0108959:	89 45 dc             	mov    %eax,-0x24(%ebp)
     assert(pgdir[0] == 0);
c010895c:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010895f:	8b 00                	mov    (%eax),%eax
c0108961:	85 c0                	test   %eax,%eax
c0108963:	74 24                	je     c0108989 <check_swap+0x198>
c0108965:	c7 44 24 0c 3d ee 10 	movl   $0xc010ee3d,0xc(%esp)
c010896c:	c0 
c010896d:	c7 44 24 08 ce ec 10 	movl   $0xc010ecce,0x8(%esp)
c0108974:	c0 
c0108975:	c7 44 24 04 cb 00 00 	movl   $0xcb,0x4(%esp)
c010897c:	00 
c010897d:	c7 04 24 68 ec 10 c0 	movl   $0xc010ec68,(%esp)
c0108984:	e8 cf 98 ff ff       	call   c0102258 <__panic>

     struct vma_struct *vma = vma_create(BEING_CHECK_VALID_VADDR, CHECK_VALID_VADDR, VM_WRITE | VM_READ);
c0108989:	c7 44 24 08 03 00 00 	movl   $0x3,0x8(%esp)
c0108990:	00 
c0108991:	c7 44 24 04 00 60 00 	movl   $0x6000,0x4(%esp)
c0108998:	00 
c0108999:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
c01089a0:	e8 8b 0a 00 00       	call   c0109430 <vma_create>
c01089a5:	89 45 d8             	mov    %eax,-0x28(%ebp)
     assert(vma != NULL);
c01089a8:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
c01089ac:	75 24                	jne    c01089d2 <check_swap+0x1e1>
c01089ae:	c7 44 24 0c 4b ee 10 	movl   $0xc010ee4b,0xc(%esp)
c01089b5:	c0 
c01089b6:	c7 44 24 08 ce ec 10 	movl   $0xc010ecce,0x8(%esp)
c01089bd:	c0 
c01089be:	c7 44 24 04 ce 00 00 	movl   $0xce,0x4(%esp)
c01089c5:	00 
c01089c6:	c7 04 24 68 ec 10 c0 	movl   $0xc010ec68,(%esp)
c01089cd:	e8 86 98 ff ff       	call   c0102258 <__panic>

     insert_vma_struct(mm, vma);
c01089d2:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01089d5:	89 44 24 04          	mov    %eax,0x4(%esp)
c01089d9:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01089dc:	89 04 24             	mov    %eax,(%esp)
c01089df:	e8 dc 0b 00 00       	call   c01095c0 <insert_vma_struct>

     //setup the temp Page Table vaddr 0~4MB
     cprintf("setup Page Table for vaddr 0X1000, so alloc a page\n");
c01089e4:	c7 04 24 58 ee 10 c0 	movl   $0xc010ee58,(%esp)
c01089eb:	e8 e6 8d ff ff       	call   c01017d6 <cprintf>
     pte_t *temp_ptep=NULL;
c01089f0:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
     temp_ptep = get_pte(mm->pgdir, BEING_CHECK_VALID_VADDR, 1);
c01089f7:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01089fa:	8b 40 0c             	mov    0xc(%eax),%eax
c01089fd:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0108a04:	00 
c0108a05:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c0108a0c:	00 
c0108a0d:	89 04 24             	mov    %eax,(%esp)
c0108a10:	e8 29 e3 ff ff       	call   c0106d3e <get_pte>
c0108a15:	89 45 d4             	mov    %eax,-0x2c(%ebp)
     assert(temp_ptep!= NULL);
c0108a18:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
c0108a1c:	75 24                	jne    c0108a42 <check_swap+0x251>
c0108a1e:	c7 44 24 0c 8c ee 10 	movl   $0xc010ee8c,0xc(%esp)
c0108a25:	c0 
c0108a26:	c7 44 24 08 ce ec 10 	movl   $0xc010ecce,0x8(%esp)
c0108a2d:	c0 
c0108a2e:	c7 44 24 04 d6 00 00 	movl   $0xd6,0x4(%esp)
c0108a35:	00 
c0108a36:	c7 04 24 68 ec 10 c0 	movl   $0xc010ec68,(%esp)
c0108a3d:	e8 16 98 ff ff       	call   c0102258 <__panic>
     cprintf("setup Page Table vaddr 0~4MB OVER!\n");
c0108a42:	c7 04 24 a0 ee 10 c0 	movl   $0xc010eea0,(%esp)
c0108a49:	e8 88 8d ff ff       	call   c01017d6 <cprintf>
     
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0108a4e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0108a55:	e9 a3 00 00 00       	jmp    c0108afd <check_swap+0x30c>
          check_rp[i] = alloc_page();
c0108a5a:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0108a61:	e8 43 db ff ff       	call   c01065a9 <alloc_pages>
c0108a66:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0108a69:	89 04 95 e0 2f 1a c0 	mov    %eax,-0x3fe5d020(,%edx,4)
          assert(check_rp[i] != NULL );
c0108a70:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108a73:	8b 04 85 e0 2f 1a c0 	mov    -0x3fe5d020(,%eax,4),%eax
c0108a7a:	85 c0                	test   %eax,%eax
c0108a7c:	75 24                	jne    c0108aa2 <check_swap+0x2b1>
c0108a7e:	c7 44 24 0c c4 ee 10 	movl   $0xc010eec4,0xc(%esp)
c0108a85:	c0 
c0108a86:	c7 44 24 08 ce ec 10 	movl   $0xc010ecce,0x8(%esp)
c0108a8d:	c0 
c0108a8e:	c7 44 24 04 db 00 00 	movl   $0xdb,0x4(%esp)
c0108a95:	00 
c0108a96:	c7 04 24 68 ec 10 c0 	movl   $0xc010ec68,(%esp)
c0108a9d:	e8 b6 97 ff ff       	call   c0102258 <__panic>
          assert(!PageProperty(check_rp[i]));
c0108aa2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108aa5:	8b 04 85 e0 2f 1a c0 	mov    -0x3fe5d020(,%eax,4),%eax
c0108aac:	83 c0 04             	add    $0x4,%eax
c0108aaf:	c7 45 b4 01 00 00 00 	movl   $0x1,-0x4c(%ebp)
c0108ab6:	89 45 b0             	mov    %eax,-0x50(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0108ab9:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0108abc:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c0108abf:	0f a3 10             	bt     %edx,(%eax)
c0108ac2:	19 c0                	sbb    %eax,%eax
c0108ac4:	89 45 ac             	mov    %eax,-0x54(%ebp)
    return oldbit != 0;
c0108ac7:	83 7d ac 00          	cmpl   $0x0,-0x54(%ebp)
c0108acb:	0f 95 c0             	setne  %al
c0108ace:	0f b6 c0             	movzbl %al,%eax
c0108ad1:	85 c0                	test   %eax,%eax
c0108ad3:	74 24                	je     c0108af9 <check_swap+0x308>
c0108ad5:	c7 44 24 0c d8 ee 10 	movl   $0xc010eed8,0xc(%esp)
c0108adc:	c0 
c0108add:	c7 44 24 08 ce ec 10 	movl   $0xc010ecce,0x8(%esp)
c0108ae4:	c0 
c0108ae5:	c7 44 24 04 dc 00 00 	movl   $0xdc,0x4(%esp)
c0108aec:	00 
c0108aed:	c7 04 24 68 ec 10 c0 	movl   $0xc010ec68,(%esp)
c0108af4:	e8 5f 97 ff ff       	call   c0102258 <__panic>
     pte_t *temp_ptep=NULL;
     temp_ptep = get_pte(mm->pgdir, BEING_CHECK_VALID_VADDR, 1);
     assert(temp_ptep!= NULL);
     cprintf("setup Page Table vaddr 0~4MB OVER!\n");
     
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0108af9:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0108afd:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c0108b01:	0f 8e 53 ff ff ff    	jle    c0108a5a <check_swap+0x269>
          check_rp[i] = alloc_page();
          assert(check_rp[i] != NULL );
          assert(!PageProperty(check_rp[i]));
     }
     list_entry_t free_list_store = free_list;
c0108b07:	a1 bc 2f 1a c0       	mov    0xc01a2fbc,%eax
c0108b0c:	8b 15 c0 2f 1a c0    	mov    0xc01a2fc0,%edx
c0108b12:	89 45 98             	mov    %eax,-0x68(%ebp)
c0108b15:	89 55 9c             	mov    %edx,-0x64(%ebp)
c0108b18:	c7 45 a8 bc 2f 1a c0 	movl   $0xc01a2fbc,-0x58(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0108b1f:	8b 45 a8             	mov    -0x58(%ebp),%eax
c0108b22:	8b 55 a8             	mov    -0x58(%ebp),%edx
c0108b25:	89 50 04             	mov    %edx,0x4(%eax)
c0108b28:	8b 45 a8             	mov    -0x58(%ebp),%eax
c0108b2b:	8b 50 04             	mov    0x4(%eax),%edx
c0108b2e:	8b 45 a8             	mov    -0x58(%ebp),%eax
c0108b31:	89 10                	mov    %edx,(%eax)
c0108b33:	c7 45 a4 bc 2f 1a c0 	movl   $0xc01a2fbc,-0x5c(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0108b3a:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c0108b3d:	8b 40 04             	mov    0x4(%eax),%eax
c0108b40:	39 45 a4             	cmp    %eax,-0x5c(%ebp)
c0108b43:	0f 94 c0             	sete   %al
c0108b46:	0f b6 c0             	movzbl %al,%eax
     list_init(&free_list);
     assert(list_empty(&free_list));
c0108b49:	85 c0                	test   %eax,%eax
c0108b4b:	75 24                	jne    c0108b71 <check_swap+0x380>
c0108b4d:	c7 44 24 0c f3 ee 10 	movl   $0xc010eef3,0xc(%esp)
c0108b54:	c0 
c0108b55:	c7 44 24 08 ce ec 10 	movl   $0xc010ecce,0x8(%esp)
c0108b5c:	c0 
c0108b5d:	c7 44 24 04 e0 00 00 	movl   $0xe0,0x4(%esp)
c0108b64:	00 
c0108b65:	c7 04 24 68 ec 10 c0 	movl   $0xc010ec68,(%esp)
c0108b6c:	e8 e7 96 ff ff       	call   c0102258 <__panic>
     
     //assert(alloc_page() == NULL);
     
     unsigned int nr_free_store = nr_free;
c0108b71:	a1 c4 2f 1a c0       	mov    0xc01a2fc4,%eax
c0108b76:	89 45 d0             	mov    %eax,-0x30(%ebp)
     nr_free = 0;
c0108b79:	c7 05 c4 2f 1a c0 00 	movl   $0x0,0xc01a2fc4
c0108b80:	00 00 00 
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0108b83:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0108b8a:	eb 1e                	jmp    c0108baa <check_swap+0x3b9>
        free_pages(check_rp[i],1);
c0108b8c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108b8f:	8b 04 85 e0 2f 1a c0 	mov    -0x3fe5d020(,%eax,4),%eax
c0108b96:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0108b9d:	00 
c0108b9e:	89 04 24             	mov    %eax,(%esp)
c0108ba1:	e8 7f da ff ff       	call   c0106625 <free_pages>
     
     //assert(alloc_page() == NULL);
     
     unsigned int nr_free_store = nr_free;
     nr_free = 0;
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0108ba6:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0108baa:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c0108bae:	7e dc                	jle    c0108b8c <check_swap+0x39b>
        free_pages(check_rp[i],1);
     }
     assert(nr_free==CHECK_VALID_PHY_PAGE_NUM);
c0108bb0:	a1 c4 2f 1a c0       	mov    0xc01a2fc4,%eax
c0108bb5:	83 f8 04             	cmp    $0x4,%eax
c0108bb8:	74 24                	je     c0108bde <check_swap+0x3ed>
c0108bba:	c7 44 24 0c 0c ef 10 	movl   $0xc010ef0c,0xc(%esp)
c0108bc1:	c0 
c0108bc2:	c7 44 24 08 ce ec 10 	movl   $0xc010ecce,0x8(%esp)
c0108bc9:	c0 
c0108bca:	c7 44 24 04 e9 00 00 	movl   $0xe9,0x4(%esp)
c0108bd1:	00 
c0108bd2:	c7 04 24 68 ec 10 c0 	movl   $0xc010ec68,(%esp)
c0108bd9:	e8 7a 96 ff ff       	call   c0102258 <__panic>
     
     cprintf("set up init env for check_swap begin!\n");
c0108bde:	c7 04 24 30 ef 10 c0 	movl   $0xc010ef30,(%esp)
c0108be5:	e8 ec 8b ff ff       	call   c01017d6 <cprintf>
     //setup initial vir_page<->phy_page environment for page relpacement algorithm 

     
     pgfault_num=0;
c0108bea:	c7 05 7c 0f 1a c0 00 	movl   $0x0,0xc01a0f7c
c0108bf1:	00 00 00 
     
     check_content_set();
c0108bf4:	e8 28 fa ff ff       	call   c0108621 <check_content_set>
     assert( nr_free == 0);         
c0108bf9:	a1 c4 2f 1a c0       	mov    0xc01a2fc4,%eax
c0108bfe:	85 c0                	test   %eax,%eax
c0108c00:	74 24                	je     c0108c26 <check_swap+0x435>
c0108c02:	c7 44 24 0c 57 ef 10 	movl   $0xc010ef57,0xc(%esp)
c0108c09:	c0 
c0108c0a:	c7 44 24 08 ce ec 10 	movl   $0xc010ecce,0x8(%esp)
c0108c11:	c0 
c0108c12:	c7 44 24 04 f2 00 00 	movl   $0xf2,0x4(%esp)
c0108c19:	00 
c0108c1a:	c7 04 24 68 ec 10 c0 	movl   $0xc010ec68,(%esp)
c0108c21:	e8 32 96 ff ff       	call   c0102258 <__panic>
     for(i = 0; i<MAX_SEQ_NO ; i++) 
c0108c26:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0108c2d:	eb 26                	jmp    c0108c55 <check_swap+0x464>
         swap_out_seq_no[i]=swap_in_seq_no[i]=-1;
c0108c2f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108c32:	c7 04 85 00 30 1a c0 	movl   $0xffffffff,-0x3fe5d000(,%eax,4)
c0108c39:	ff ff ff ff 
c0108c3d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108c40:	8b 14 85 00 30 1a c0 	mov    -0x3fe5d000(,%eax,4),%edx
c0108c47:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108c4a:	89 14 85 40 30 1a c0 	mov    %edx,-0x3fe5cfc0(,%eax,4)
     
     pgfault_num=0;
     
     check_content_set();
     assert( nr_free == 0);         
     for(i = 0; i<MAX_SEQ_NO ; i++) 
c0108c51:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0108c55:	83 7d ec 09          	cmpl   $0x9,-0x14(%ebp)
c0108c59:	7e d4                	jle    c0108c2f <check_swap+0x43e>
         swap_out_seq_no[i]=swap_in_seq_no[i]=-1;
     
     for (i= 0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0108c5b:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0108c62:	e9 eb 00 00 00       	jmp    c0108d52 <check_swap+0x561>
         check_ptep[i]=0;
c0108c67:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108c6a:	c7 04 85 94 30 1a c0 	movl   $0x0,-0x3fe5cf6c(,%eax,4)
c0108c71:	00 00 00 00 
         check_ptep[i] = get_pte(pgdir, (i+1)*0x1000, 0);
c0108c75:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108c78:	83 c0 01             	add    $0x1,%eax
c0108c7b:	c1 e0 0c             	shl    $0xc,%eax
c0108c7e:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0108c85:	00 
c0108c86:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108c8a:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108c8d:	89 04 24             	mov    %eax,(%esp)
c0108c90:	e8 a9 e0 ff ff       	call   c0106d3e <get_pte>
c0108c95:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0108c98:	89 04 95 94 30 1a c0 	mov    %eax,-0x3fe5cf6c(,%edx,4)
         //cprintf("i %d, check_ptep addr %x, value %x\n", i, check_ptep[i], *check_ptep[i]);
         assert(check_ptep[i] != NULL);
c0108c9f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108ca2:	8b 04 85 94 30 1a c0 	mov    -0x3fe5cf6c(,%eax,4),%eax
c0108ca9:	85 c0                	test   %eax,%eax
c0108cab:	75 24                	jne    c0108cd1 <check_swap+0x4e0>
c0108cad:	c7 44 24 0c 64 ef 10 	movl   $0xc010ef64,0xc(%esp)
c0108cb4:	c0 
c0108cb5:	c7 44 24 08 ce ec 10 	movl   $0xc010ecce,0x8(%esp)
c0108cbc:	c0 
c0108cbd:	c7 44 24 04 fa 00 00 	movl   $0xfa,0x4(%esp)
c0108cc4:	00 
c0108cc5:	c7 04 24 68 ec 10 c0 	movl   $0xc010ec68,(%esp)
c0108ccc:	e8 87 95 ff ff       	call   c0102258 <__panic>
         assert(pte2page(*check_ptep[i]) == check_rp[i]);
c0108cd1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108cd4:	8b 04 85 94 30 1a c0 	mov    -0x3fe5cf6c(,%eax,4),%eax
c0108cdb:	8b 00                	mov    (%eax),%eax
c0108cdd:	89 04 24             	mov    %eax,(%esp)
c0108ce0:	e8 9f f5 ff ff       	call   c0108284 <pte2page>
c0108ce5:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0108ce8:	8b 14 95 e0 2f 1a c0 	mov    -0x3fe5d020(,%edx,4),%edx
c0108cef:	39 d0                	cmp    %edx,%eax
c0108cf1:	74 24                	je     c0108d17 <check_swap+0x526>
c0108cf3:	c7 44 24 0c 7c ef 10 	movl   $0xc010ef7c,0xc(%esp)
c0108cfa:	c0 
c0108cfb:	c7 44 24 08 ce ec 10 	movl   $0xc010ecce,0x8(%esp)
c0108d02:	c0 
c0108d03:	c7 44 24 04 fb 00 00 	movl   $0xfb,0x4(%esp)
c0108d0a:	00 
c0108d0b:	c7 04 24 68 ec 10 c0 	movl   $0xc010ec68,(%esp)
c0108d12:	e8 41 95 ff ff       	call   c0102258 <__panic>
         assert((*check_ptep[i] & PTE_P));          
c0108d17:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108d1a:	8b 04 85 94 30 1a c0 	mov    -0x3fe5cf6c(,%eax,4),%eax
c0108d21:	8b 00                	mov    (%eax),%eax
c0108d23:	83 e0 01             	and    $0x1,%eax
c0108d26:	85 c0                	test   %eax,%eax
c0108d28:	75 24                	jne    c0108d4e <check_swap+0x55d>
c0108d2a:	c7 44 24 0c a4 ef 10 	movl   $0xc010efa4,0xc(%esp)
c0108d31:	c0 
c0108d32:	c7 44 24 08 ce ec 10 	movl   $0xc010ecce,0x8(%esp)
c0108d39:	c0 
c0108d3a:	c7 44 24 04 fc 00 00 	movl   $0xfc,0x4(%esp)
c0108d41:	00 
c0108d42:	c7 04 24 68 ec 10 c0 	movl   $0xc010ec68,(%esp)
c0108d49:	e8 0a 95 ff ff       	call   c0102258 <__panic>
     check_content_set();
     assert( nr_free == 0);         
     for(i = 0; i<MAX_SEQ_NO ; i++) 
         swap_out_seq_no[i]=swap_in_seq_no[i]=-1;
     
     for (i= 0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0108d4e:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0108d52:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c0108d56:	0f 8e 0b ff ff ff    	jle    c0108c67 <check_swap+0x476>
         //cprintf("i %d, check_ptep addr %x, value %x\n", i, check_ptep[i], *check_ptep[i]);
         assert(check_ptep[i] != NULL);
         assert(pte2page(*check_ptep[i]) == check_rp[i]);
         assert((*check_ptep[i] & PTE_P));          
     }
     cprintf("set up init env for check_swap over!\n");
c0108d5c:	c7 04 24 c0 ef 10 c0 	movl   $0xc010efc0,(%esp)
c0108d63:	e8 6e 8a ff ff       	call   c01017d6 <cprintf>
     // now access the virt pages to test  page relpacement algorithm 
     ret=check_content_access();
c0108d68:	e8 6c fa ff ff       	call   c01087d9 <check_content_access>
c0108d6d:	89 45 cc             	mov    %eax,-0x34(%ebp)
     assert(ret==0);
c0108d70:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c0108d74:	74 24                	je     c0108d9a <check_swap+0x5a9>
c0108d76:	c7 44 24 0c e6 ef 10 	movl   $0xc010efe6,0xc(%esp)
c0108d7d:	c0 
c0108d7e:	c7 44 24 08 ce ec 10 	movl   $0xc010ecce,0x8(%esp)
c0108d85:	c0 
c0108d86:	c7 44 24 04 01 01 00 	movl   $0x101,0x4(%esp)
c0108d8d:	00 
c0108d8e:	c7 04 24 68 ec 10 c0 	movl   $0xc010ec68,(%esp)
c0108d95:	e8 be 94 ff ff       	call   c0102258 <__panic>
     
     //restore kernel mem env
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0108d9a:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0108da1:	eb 1e                	jmp    c0108dc1 <check_swap+0x5d0>
         free_pages(check_rp[i],1);
c0108da3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108da6:	8b 04 85 e0 2f 1a c0 	mov    -0x3fe5d020(,%eax,4),%eax
c0108dad:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0108db4:	00 
c0108db5:	89 04 24             	mov    %eax,(%esp)
c0108db8:	e8 68 d8 ff ff       	call   c0106625 <free_pages>
     // now access the virt pages to test  page relpacement algorithm 
     ret=check_content_access();
     assert(ret==0);
     
     //restore kernel mem env
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0108dbd:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0108dc1:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c0108dc5:	7e dc                	jle    c0108da3 <check_swap+0x5b2>
         free_pages(check_rp[i],1);
     } 

     //free_page(pte2page(*temp_ptep));
    free_page(pa2page(pgdir[0]));
c0108dc7:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108dca:	8b 00                	mov    (%eax),%eax
c0108dcc:	89 04 24             	mov    %eax,(%esp)
c0108dcf:	e8 61 f4 ff ff       	call   c0108235 <pa2page>
c0108dd4:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0108ddb:	00 
c0108ddc:	89 04 24             	mov    %eax,(%esp)
c0108ddf:	e8 41 d8 ff ff       	call   c0106625 <free_pages>
     pgdir[0] = 0;
c0108de4:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108de7:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
     mm->pgdir = NULL;
c0108ded:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108df0:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
     mm_destroy(mm);
c0108df7:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108dfa:	89 04 24             	mov    %eax,(%esp)
c0108dfd:	e8 ee 08 00 00       	call   c01096f0 <mm_destroy>
     check_mm_struct = NULL;
c0108e02:	c7 05 ac 30 1a c0 00 	movl   $0x0,0xc01a30ac
c0108e09:	00 00 00 
     
     nr_free = nr_free_store;
c0108e0c:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0108e0f:	a3 c4 2f 1a c0       	mov    %eax,0xc01a2fc4
     free_list = free_list_store;
c0108e14:	8b 45 98             	mov    -0x68(%ebp),%eax
c0108e17:	8b 55 9c             	mov    -0x64(%ebp),%edx
c0108e1a:	a3 bc 2f 1a c0       	mov    %eax,0xc01a2fbc
c0108e1f:	89 15 c0 2f 1a c0    	mov    %edx,0xc01a2fc0

     
     le = &free_list;
c0108e25:	c7 45 e8 bc 2f 1a c0 	movl   $0xc01a2fbc,-0x18(%ebp)
     while ((le = list_next(le)) != &free_list) {
c0108e2c:	eb 1d                	jmp    c0108e4b <check_swap+0x65a>
         struct Page *p = le2page(le, page_link);
c0108e2e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108e31:	83 e8 10             	sub    $0x10,%eax
c0108e34:	89 45 c8             	mov    %eax,-0x38(%ebp)
         count --, total -= p->property;
c0108e37:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c0108e3b:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0108e3e:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0108e41:	8b 40 08             	mov    0x8(%eax),%eax
c0108e44:	29 c2                	sub    %eax,%edx
c0108e46:	89 d0                	mov    %edx,%eax
c0108e48:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0108e4b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108e4e:	89 45 a0             	mov    %eax,-0x60(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0108e51:	8b 45 a0             	mov    -0x60(%ebp),%eax
c0108e54:	8b 40 04             	mov    0x4(%eax),%eax
     nr_free = nr_free_store;
     free_list = free_list_store;

     
     le = &free_list;
     while ((le = list_next(le)) != &free_list) {
c0108e57:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0108e5a:	81 7d e8 bc 2f 1a c0 	cmpl   $0xc01a2fbc,-0x18(%ebp)
c0108e61:	75 cb                	jne    c0108e2e <check_swap+0x63d>
         struct Page *p = le2page(le, page_link);
         count --, total -= p->property;
     }
     cprintf("count is %d, total is %d\n",count,total);
c0108e63:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108e66:	89 44 24 08          	mov    %eax,0x8(%esp)
c0108e6a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108e6d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108e71:	c7 04 24 ed ef 10 c0 	movl   $0xc010efed,(%esp)
c0108e78:	e8 59 89 ff ff       	call   c01017d6 <cprintf>
     //assert(count == 0);
     
     cprintf("check_swap() succeeded!\n");
c0108e7d:	c7 04 24 07 f0 10 c0 	movl   $0xc010f007,(%esp)
c0108e84:	e8 4d 89 ff ff       	call   c01017d6 <cprintf>
}
c0108e89:	83 c4 74             	add    $0x74,%esp
c0108e8c:	5b                   	pop    %ebx
c0108e8d:	5d                   	pop    %ebp
c0108e8e:	c3                   	ret    

c0108e8f <_fifo_init_mm>:
 * (2) _fifo_init_mm: init pra_list_head and let  mm->sm_priv point to the addr of pra_list_head.
 *              Now, From the memory control struct mm_struct, we can access FIFO PRA
 */
static int
_fifo_init_mm(struct mm_struct *mm)
{     
c0108e8f:	55                   	push   %ebp
c0108e90:	89 e5                	mov    %esp,%ebp
c0108e92:	83 ec 10             	sub    $0x10,%esp
c0108e95:	c7 45 fc a4 30 1a c0 	movl   $0xc01a30a4,-0x4(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0108e9c:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0108e9f:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0108ea2:	89 50 04             	mov    %edx,0x4(%eax)
c0108ea5:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0108ea8:	8b 50 04             	mov    0x4(%eax),%edx
c0108eab:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0108eae:	89 10                	mov    %edx,(%eax)
     list_init(&pra_list_head);
     mm->sm_priv = &pra_list_head;
c0108eb0:	8b 45 08             	mov    0x8(%ebp),%eax
c0108eb3:	c7 40 14 a4 30 1a c0 	movl   $0xc01a30a4,0x14(%eax)
     //cprintf(" mm->sm_priv %x in fifo_init_mm\n",mm->sm_priv);
     return 0;
c0108eba:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0108ebf:	c9                   	leave  
c0108ec0:	c3                   	ret    

c0108ec1 <_fifo_map_swappable>:
/*
 * (3)_fifo_map_swappable: According FIFO PRA, we should link the most recent arrival page at the back of pra_list_head qeueue
 */
static int
_fifo_map_swappable(struct mm_struct *mm, uintptr_t addr, struct Page *page, int swap_in)
{
c0108ec1:	55                   	push   %ebp
c0108ec2:	89 e5                	mov    %esp,%ebp
c0108ec4:	83 ec 48             	sub    $0x48,%esp
    list_entry_t *head=(list_entry_t*) mm->sm_priv;
c0108ec7:	8b 45 08             	mov    0x8(%ebp),%eax
c0108eca:	8b 40 14             	mov    0x14(%eax),%eax
c0108ecd:	89 45 f4             	mov    %eax,-0xc(%ebp)
    list_entry_t *entry=&(page->pra_page_link);
c0108ed0:	8b 45 10             	mov    0x10(%ebp),%eax
c0108ed3:	83 c0 18             	add    $0x18,%eax
c0108ed6:	89 45 f0             	mov    %eax,-0x10(%ebp)
 
    assert(entry != NULL && head != NULL);
c0108ed9:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0108edd:	74 06                	je     c0108ee5 <_fifo_map_swappable+0x24>
c0108edf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0108ee3:	75 24                	jne    c0108f09 <_fifo_map_swappable+0x48>
c0108ee5:	c7 44 24 0c 20 f0 10 	movl   $0xc010f020,0xc(%esp)
c0108eec:	c0 
c0108eed:	c7 44 24 08 3e f0 10 	movl   $0xc010f03e,0x8(%esp)
c0108ef4:	c0 
c0108ef5:	c7 44 24 04 32 00 00 	movl   $0x32,0x4(%esp)
c0108efc:	00 
c0108efd:	c7 04 24 53 f0 10 c0 	movl   $0xc010f053,(%esp)
c0108f04:	e8 4f 93 ff ff       	call   c0102258 <__panic>
c0108f09:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108f0c:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0108f0f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108f12:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0108f15:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108f18:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0108f1b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108f1e:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c0108f21:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108f24:	8b 40 04             	mov    0x4(%eax),%eax
c0108f27:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0108f2a:	89 55 dc             	mov    %edx,-0x24(%ebp)
c0108f2d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0108f30:	89 55 d8             	mov    %edx,-0x28(%ebp)
c0108f33:	89 45 d4             	mov    %eax,-0x2c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0108f36:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0108f39:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0108f3c:	89 10                	mov    %edx,(%eax)
c0108f3e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0108f41:	8b 10                	mov    (%eax),%edx
c0108f43:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0108f46:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0108f49:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108f4c:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0108f4f:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0108f52:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108f55:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0108f58:	89 10                	mov    %edx,(%eax)
    //record the page access situlation
    /*LAB3 EXERCISE 2: YOUR CODE*/ 
    //(1)link the most recent arrival page at the back of the pra_list_head qeueue.
    list_add(head, entry);
    return 0;
c0108f5a:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0108f5f:	c9                   	leave  
c0108f60:	c3                   	ret    

c0108f61 <_fifo_swap_out_victim>:
 *  (4)_fifo_swap_out_victim: According FIFO PRA, we should unlink the  earliest arrival page in front of pra_list_head qeueue,
 *                            then set the addr of addr of this page to ptr_page.
 */
static int
_fifo_swap_out_victim(struct mm_struct *mm, struct Page ** ptr_page, int in_tick)
{
c0108f61:	55                   	push   %ebp
c0108f62:	89 e5                	mov    %esp,%ebp
c0108f64:	83 ec 38             	sub    $0x38,%esp
     list_entry_t *head=(list_entry_t*) mm->sm_priv;
c0108f67:	8b 45 08             	mov    0x8(%ebp),%eax
c0108f6a:	8b 40 14             	mov    0x14(%eax),%eax
c0108f6d:	89 45 f4             	mov    %eax,-0xc(%ebp)
         assert(head != NULL);
c0108f70:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0108f74:	75 24                	jne    c0108f9a <_fifo_swap_out_victim+0x39>
c0108f76:	c7 44 24 0c 67 f0 10 	movl   $0xc010f067,0xc(%esp)
c0108f7d:	c0 
c0108f7e:	c7 44 24 08 3e f0 10 	movl   $0xc010f03e,0x8(%esp)
c0108f85:	c0 
c0108f86:	c7 44 24 04 41 00 00 	movl   $0x41,0x4(%esp)
c0108f8d:	00 
c0108f8e:	c7 04 24 53 f0 10 c0 	movl   $0xc010f053,(%esp)
c0108f95:	e8 be 92 ff ff       	call   c0102258 <__panic>
     assert(in_tick==0);
c0108f9a:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0108f9e:	74 24                	je     c0108fc4 <_fifo_swap_out_victim+0x63>
c0108fa0:	c7 44 24 0c 74 f0 10 	movl   $0xc010f074,0xc(%esp)
c0108fa7:	c0 
c0108fa8:	c7 44 24 08 3e f0 10 	movl   $0xc010f03e,0x8(%esp)
c0108faf:	c0 
c0108fb0:	c7 44 24 04 42 00 00 	movl   $0x42,0x4(%esp)
c0108fb7:	00 
c0108fb8:	c7 04 24 53 f0 10 c0 	movl   $0xc010f053,(%esp)
c0108fbf:	e8 94 92 ff ff       	call   c0102258 <__panic>
     /* Select the victim */
     /*LAB3 EXERCISE 2: YOUR CODE*/ 
     //(1)  unlink the  earliest arrival page in front of pra_list_head qeueue
     //(2)  set the addr of addr of this page to ptr_page
     /* Select the tail */
     list_entry_t *le = head->prev;
c0108fc4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108fc7:	8b 00                	mov    (%eax),%eax
c0108fc9:	89 45 f0             	mov    %eax,-0x10(%ebp)
     assert(head!=le);
c0108fcc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108fcf:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0108fd2:	75 24                	jne    c0108ff8 <_fifo_swap_out_victim+0x97>
c0108fd4:	c7 44 24 0c 7f f0 10 	movl   $0xc010f07f,0xc(%esp)
c0108fdb:	c0 
c0108fdc:	c7 44 24 08 3e f0 10 	movl   $0xc010f03e,0x8(%esp)
c0108fe3:	c0 
c0108fe4:	c7 44 24 04 49 00 00 	movl   $0x49,0x4(%esp)
c0108feb:	00 
c0108fec:	c7 04 24 53 f0 10 c0 	movl   $0xc010f053,(%esp)
c0108ff3:	e8 60 92 ff ff       	call   c0102258 <__panic>
     struct Page *p = le2page(le, pra_page_link);
c0108ff8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108ffb:	83 e8 18             	sub    $0x18,%eax
c0108ffe:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0109001:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109004:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c0109007:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010900a:	8b 40 04             	mov    0x4(%eax),%eax
c010900d:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0109010:	8b 12                	mov    (%edx),%edx
c0109012:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c0109015:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c0109018:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010901b:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010901e:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0109021:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0109024:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0109027:	89 10                	mov    %edx,(%eax)
     list_del(le);
     assert(p !=NULL);
c0109029:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010902d:	75 24                	jne    c0109053 <_fifo_swap_out_victim+0xf2>
c010902f:	c7 44 24 0c 88 f0 10 	movl   $0xc010f088,0xc(%esp)
c0109036:	c0 
c0109037:	c7 44 24 08 3e f0 10 	movl   $0xc010f03e,0x8(%esp)
c010903e:	c0 
c010903f:	c7 44 24 04 4c 00 00 	movl   $0x4c,0x4(%esp)
c0109046:	00 
c0109047:	c7 04 24 53 f0 10 c0 	movl   $0xc010f053,(%esp)
c010904e:	e8 05 92 ff ff       	call   c0102258 <__panic>
     *ptr_page = p;
c0109053:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109056:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0109059:	89 10                	mov    %edx,(%eax)
     return 0;
c010905b:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109060:	c9                   	leave  
c0109061:	c3                   	ret    

c0109062 <_fifo_check_swap>:

static int
_fifo_check_swap(void) {
c0109062:	55                   	push   %ebp
c0109063:	89 e5                	mov    %esp,%ebp
c0109065:	83 ec 18             	sub    $0x18,%esp
    cprintf("write Virt Page c in fifo_check_swap\n");
c0109068:	c7 04 24 94 f0 10 c0 	movl   $0xc010f094,(%esp)
c010906f:	e8 62 87 ff ff       	call   c01017d6 <cprintf>
    *(unsigned char *)0x3000 = 0x0c;
c0109074:	b8 00 30 00 00       	mov    $0x3000,%eax
c0109079:	c6 00 0c             	movb   $0xc,(%eax)
    assert(pgfault_num==4);
c010907c:	a1 7c 0f 1a c0       	mov    0xc01a0f7c,%eax
c0109081:	83 f8 04             	cmp    $0x4,%eax
c0109084:	74 24                	je     c01090aa <_fifo_check_swap+0x48>
c0109086:	c7 44 24 0c ba f0 10 	movl   $0xc010f0ba,0xc(%esp)
c010908d:	c0 
c010908e:	c7 44 24 08 3e f0 10 	movl   $0xc010f03e,0x8(%esp)
c0109095:	c0 
c0109096:	c7 44 24 04 55 00 00 	movl   $0x55,0x4(%esp)
c010909d:	00 
c010909e:	c7 04 24 53 f0 10 c0 	movl   $0xc010f053,(%esp)
c01090a5:	e8 ae 91 ff ff       	call   c0102258 <__panic>
    cprintf("write Virt Page a in fifo_check_swap\n");
c01090aa:	c7 04 24 cc f0 10 c0 	movl   $0xc010f0cc,(%esp)
c01090b1:	e8 20 87 ff ff       	call   c01017d6 <cprintf>
    *(unsigned char *)0x1000 = 0x0a;
c01090b6:	b8 00 10 00 00       	mov    $0x1000,%eax
c01090bb:	c6 00 0a             	movb   $0xa,(%eax)
    assert(pgfault_num==4);
c01090be:	a1 7c 0f 1a c0       	mov    0xc01a0f7c,%eax
c01090c3:	83 f8 04             	cmp    $0x4,%eax
c01090c6:	74 24                	je     c01090ec <_fifo_check_swap+0x8a>
c01090c8:	c7 44 24 0c ba f0 10 	movl   $0xc010f0ba,0xc(%esp)
c01090cf:	c0 
c01090d0:	c7 44 24 08 3e f0 10 	movl   $0xc010f03e,0x8(%esp)
c01090d7:	c0 
c01090d8:	c7 44 24 04 58 00 00 	movl   $0x58,0x4(%esp)
c01090df:	00 
c01090e0:	c7 04 24 53 f0 10 c0 	movl   $0xc010f053,(%esp)
c01090e7:	e8 6c 91 ff ff       	call   c0102258 <__panic>
    cprintf("write Virt Page d in fifo_check_swap\n");
c01090ec:	c7 04 24 f4 f0 10 c0 	movl   $0xc010f0f4,(%esp)
c01090f3:	e8 de 86 ff ff       	call   c01017d6 <cprintf>
    *(unsigned char *)0x4000 = 0x0d;
c01090f8:	b8 00 40 00 00       	mov    $0x4000,%eax
c01090fd:	c6 00 0d             	movb   $0xd,(%eax)
    assert(pgfault_num==4);
c0109100:	a1 7c 0f 1a c0       	mov    0xc01a0f7c,%eax
c0109105:	83 f8 04             	cmp    $0x4,%eax
c0109108:	74 24                	je     c010912e <_fifo_check_swap+0xcc>
c010910a:	c7 44 24 0c ba f0 10 	movl   $0xc010f0ba,0xc(%esp)
c0109111:	c0 
c0109112:	c7 44 24 08 3e f0 10 	movl   $0xc010f03e,0x8(%esp)
c0109119:	c0 
c010911a:	c7 44 24 04 5b 00 00 	movl   $0x5b,0x4(%esp)
c0109121:	00 
c0109122:	c7 04 24 53 f0 10 c0 	movl   $0xc010f053,(%esp)
c0109129:	e8 2a 91 ff ff       	call   c0102258 <__panic>
    cprintf("write Virt Page b in fifo_check_swap\n");
c010912e:	c7 04 24 1c f1 10 c0 	movl   $0xc010f11c,(%esp)
c0109135:	e8 9c 86 ff ff       	call   c01017d6 <cprintf>
    *(unsigned char *)0x2000 = 0x0b;
c010913a:	b8 00 20 00 00       	mov    $0x2000,%eax
c010913f:	c6 00 0b             	movb   $0xb,(%eax)
    assert(pgfault_num==4);
c0109142:	a1 7c 0f 1a c0       	mov    0xc01a0f7c,%eax
c0109147:	83 f8 04             	cmp    $0x4,%eax
c010914a:	74 24                	je     c0109170 <_fifo_check_swap+0x10e>
c010914c:	c7 44 24 0c ba f0 10 	movl   $0xc010f0ba,0xc(%esp)
c0109153:	c0 
c0109154:	c7 44 24 08 3e f0 10 	movl   $0xc010f03e,0x8(%esp)
c010915b:	c0 
c010915c:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c0109163:	00 
c0109164:	c7 04 24 53 f0 10 c0 	movl   $0xc010f053,(%esp)
c010916b:	e8 e8 90 ff ff       	call   c0102258 <__panic>
    cprintf("write Virt Page e in fifo_check_swap\n");
c0109170:	c7 04 24 44 f1 10 c0 	movl   $0xc010f144,(%esp)
c0109177:	e8 5a 86 ff ff       	call   c01017d6 <cprintf>
    *(unsigned char *)0x5000 = 0x0e;
c010917c:	b8 00 50 00 00       	mov    $0x5000,%eax
c0109181:	c6 00 0e             	movb   $0xe,(%eax)
    assert(pgfault_num==5);
c0109184:	a1 7c 0f 1a c0       	mov    0xc01a0f7c,%eax
c0109189:	83 f8 05             	cmp    $0x5,%eax
c010918c:	74 24                	je     c01091b2 <_fifo_check_swap+0x150>
c010918e:	c7 44 24 0c 6a f1 10 	movl   $0xc010f16a,0xc(%esp)
c0109195:	c0 
c0109196:	c7 44 24 08 3e f0 10 	movl   $0xc010f03e,0x8(%esp)
c010919d:	c0 
c010919e:	c7 44 24 04 61 00 00 	movl   $0x61,0x4(%esp)
c01091a5:	00 
c01091a6:	c7 04 24 53 f0 10 c0 	movl   $0xc010f053,(%esp)
c01091ad:	e8 a6 90 ff ff       	call   c0102258 <__panic>
    cprintf("write Virt Page b in fifo_check_swap\n");
c01091b2:	c7 04 24 1c f1 10 c0 	movl   $0xc010f11c,(%esp)
c01091b9:	e8 18 86 ff ff       	call   c01017d6 <cprintf>
    *(unsigned char *)0x2000 = 0x0b;
c01091be:	b8 00 20 00 00       	mov    $0x2000,%eax
c01091c3:	c6 00 0b             	movb   $0xb,(%eax)
    assert(pgfault_num==5);
c01091c6:	a1 7c 0f 1a c0       	mov    0xc01a0f7c,%eax
c01091cb:	83 f8 05             	cmp    $0x5,%eax
c01091ce:	74 24                	je     c01091f4 <_fifo_check_swap+0x192>
c01091d0:	c7 44 24 0c 6a f1 10 	movl   $0xc010f16a,0xc(%esp)
c01091d7:	c0 
c01091d8:	c7 44 24 08 3e f0 10 	movl   $0xc010f03e,0x8(%esp)
c01091df:	c0 
c01091e0:	c7 44 24 04 64 00 00 	movl   $0x64,0x4(%esp)
c01091e7:	00 
c01091e8:	c7 04 24 53 f0 10 c0 	movl   $0xc010f053,(%esp)
c01091ef:	e8 64 90 ff ff       	call   c0102258 <__panic>
    cprintf("write Virt Page a in fifo_check_swap\n");
c01091f4:	c7 04 24 cc f0 10 c0 	movl   $0xc010f0cc,(%esp)
c01091fb:	e8 d6 85 ff ff       	call   c01017d6 <cprintf>
    *(unsigned char *)0x1000 = 0x0a;
c0109200:	b8 00 10 00 00       	mov    $0x1000,%eax
c0109205:	c6 00 0a             	movb   $0xa,(%eax)
    assert(pgfault_num==6);
c0109208:	a1 7c 0f 1a c0       	mov    0xc01a0f7c,%eax
c010920d:	83 f8 06             	cmp    $0x6,%eax
c0109210:	74 24                	je     c0109236 <_fifo_check_swap+0x1d4>
c0109212:	c7 44 24 0c 79 f1 10 	movl   $0xc010f179,0xc(%esp)
c0109219:	c0 
c010921a:	c7 44 24 08 3e f0 10 	movl   $0xc010f03e,0x8(%esp)
c0109221:	c0 
c0109222:	c7 44 24 04 67 00 00 	movl   $0x67,0x4(%esp)
c0109229:	00 
c010922a:	c7 04 24 53 f0 10 c0 	movl   $0xc010f053,(%esp)
c0109231:	e8 22 90 ff ff       	call   c0102258 <__panic>
    cprintf("write Virt Page b in fifo_check_swap\n");
c0109236:	c7 04 24 1c f1 10 c0 	movl   $0xc010f11c,(%esp)
c010923d:	e8 94 85 ff ff       	call   c01017d6 <cprintf>
    *(unsigned char *)0x2000 = 0x0b;
c0109242:	b8 00 20 00 00       	mov    $0x2000,%eax
c0109247:	c6 00 0b             	movb   $0xb,(%eax)
    assert(pgfault_num==7);
c010924a:	a1 7c 0f 1a c0       	mov    0xc01a0f7c,%eax
c010924f:	83 f8 07             	cmp    $0x7,%eax
c0109252:	74 24                	je     c0109278 <_fifo_check_swap+0x216>
c0109254:	c7 44 24 0c 88 f1 10 	movl   $0xc010f188,0xc(%esp)
c010925b:	c0 
c010925c:	c7 44 24 08 3e f0 10 	movl   $0xc010f03e,0x8(%esp)
c0109263:	c0 
c0109264:	c7 44 24 04 6a 00 00 	movl   $0x6a,0x4(%esp)
c010926b:	00 
c010926c:	c7 04 24 53 f0 10 c0 	movl   $0xc010f053,(%esp)
c0109273:	e8 e0 8f ff ff       	call   c0102258 <__panic>
    cprintf("write Virt Page c in fifo_check_swap\n");
c0109278:	c7 04 24 94 f0 10 c0 	movl   $0xc010f094,(%esp)
c010927f:	e8 52 85 ff ff       	call   c01017d6 <cprintf>
    *(unsigned char *)0x3000 = 0x0c;
c0109284:	b8 00 30 00 00       	mov    $0x3000,%eax
c0109289:	c6 00 0c             	movb   $0xc,(%eax)
    assert(pgfault_num==8);
c010928c:	a1 7c 0f 1a c0       	mov    0xc01a0f7c,%eax
c0109291:	83 f8 08             	cmp    $0x8,%eax
c0109294:	74 24                	je     c01092ba <_fifo_check_swap+0x258>
c0109296:	c7 44 24 0c 97 f1 10 	movl   $0xc010f197,0xc(%esp)
c010929d:	c0 
c010929e:	c7 44 24 08 3e f0 10 	movl   $0xc010f03e,0x8(%esp)
c01092a5:	c0 
c01092a6:	c7 44 24 04 6d 00 00 	movl   $0x6d,0x4(%esp)
c01092ad:	00 
c01092ae:	c7 04 24 53 f0 10 c0 	movl   $0xc010f053,(%esp)
c01092b5:	e8 9e 8f ff ff       	call   c0102258 <__panic>
    cprintf("write Virt Page d in fifo_check_swap\n");
c01092ba:	c7 04 24 f4 f0 10 c0 	movl   $0xc010f0f4,(%esp)
c01092c1:	e8 10 85 ff ff       	call   c01017d6 <cprintf>
    *(unsigned char *)0x4000 = 0x0d;
c01092c6:	b8 00 40 00 00       	mov    $0x4000,%eax
c01092cb:	c6 00 0d             	movb   $0xd,(%eax)
    assert(pgfault_num==9);
c01092ce:	a1 7c 0f 1a c0       	mov    0xc01a0f7c,%eax
c01092d3:	83 f8 09             	cmp    $0x9,%eax
c01092d6:	74 24                	je     c01092fc <_fifo_check_swap+0x29a>
c01092d8:	c7 44 24 0c a6 f1 10 	movl   $0xc010f1a6,0xc(%esp)
c01092df:	c0 
c01092e0:	c7 44 24 08 3e f0 10 	movl   $0xc010f03e,0x8(%esp)
c01092e7:	c0 
c01092e8:	c7 44 24 04 70 00 00 	movl   $0x70,0x4(%esp)
c01092ef:	00 
c01092f0:	c7 04 24 53 f0 10 c0 	movl   $0xc010f053,(%esp)
c01092f7:	e8 5c 8f ff ff       	call   c0102258 <__panic>
    return 0;
c01092fc:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109301:	c9                   	leave  
c0109302:	c3                   	ret    

c0109303 <_fifo_init>:


static int
_fifo_init(void)
{
c0109303:	55                   	push   %ebp
c0109304:	89 e5                	mov    %esp,%ebp
    return 0;
c0109306:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010930b:	5d                   	pop    %ebp
c010930c:	c3                   	ret    

c010930d <_fifo_set_unswappable>:

static int
_fifo_set_unswappable(struct mm_struct *mm, uintptr_t addr)
{
c010930d:	55                   	push   %ebp
c010930e:	89 e5                	mov    %esp,%ebp
    return 0;
c0109310:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109315:	5d                   	pop    %ebp
c0109316:	c3                   	ret    

c0109317 <_fifo_tick_event>:

static int
_fifo_tick_event(struct mm_struct *mm)
{ return 0; }
c0109317:	55                   	push   %ebp
c0109318:	89 e5                	mov    %esp,%ebp
c010931a:	b8 00 00 00 00       	mov    $0x0,%eax
c010931f:	5d                   	pop    %ebp
c0109320:	c3                   	ret    

c0109321 <lock_init>:
#define local_intr_restore(x)   __intr_restore(x);

typedef volatile bool lock_t;

static inline void
lock_init(lock_t *lock) {
c0109321:	55                   	push   %ebp
c0109322:	89 e5                	mov    %esp,%ebp
    *lock = 0;
c0109324:	8b 45 08             	mov    0x8(%ebp),%eax
c0109327:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
c010932d:	5d                   	pop    %ebp
c010932e:	c3                   	ret    

c010932f <mm_count>:
bool user_mem_check(struct mm_struct *mm, uintptr_t start, size_t len, bool write);
bool copy_from_user(struct mm_struct *mm, void *dst, const void *src, size_t len, bool writable);
bool copy_to_user(struct mm_struct *mm, void *dst, const void *src, size_t len);

static inline int
mm_count(struct mm_struct *mm) {
c010932f:	55                   	push   %ebp
c0109330:	89 e5                	mov    %esp,%ebp
    return mm->mm_count;
c0109332:	8b 45 08             	mov    0x8(%ebp),%eax
c0109335:	8b 40 18             	mov    0x18(%eax),%eax
}
c0109338:	5d                   	pop    %ebp
c0109339:	c3                   	ret    

c010933a <set_mm_count>:

static inline void
set_mm_count(struct mm_struct *mm, int val) {
c010933a:	55                   	push   %ebp
c010933b:	89 e5                	mov    %esp,%ebp
    mm->mm_count = val;
c010933d:	8b 45 08             	mov    0x8(%ebp),%eax
c0109340:	8b 55 0c             	mov    0xc(%ebp),%edx
c0109343:	89 50 18             	mov    %edx,0x18(%eax)
}
c0109346:	5d                   	pop    %ebp
c0109347:	c3                   	ret    

c0109348 <pa2page>:
page2pa(struct Page *page) {
    return page2ppn(page) << PGSHIFT;
}

static inline struct Page *
pa2page(uintptr_t pa) {
c0109348:	55                   	push   %ebp
c0109349:	89 e5                	mov    %esp,%ebp
c010934b:	83 ec 18             	sub    $0x18,%esp
    if (PPN(pa) >= npage) {
c010934e:	8b 45 08             	mov    0x8(%ebp),%eax
c0109351:	c1 e8 0c             	shr    $0xc,%eax
c0109354:	89 c2                	mov    %eax,%edx
c0109356:	a1 e0 0e 1a c0       	mov    0xc01a0ee0,%eax
c010935b:	39 c2                	cmp    %eax,%edx
c010935d:	72 1c                	jb     c010937b <pa2page+0x33>
        panic("pa2page called with invalid pa");
c010935f:	c7 44 24 08 c8 f1 10 	movl   $0xc010f1c8,0x8(%esp)
c0109366:	c0 
c0109367:	c7 44 24 04 60 00 00 	movl   $0x60,0x4(%esp)
c010936e:	00 
c010936f:	c7 04 24 e7 f1 10 c0 	movl   $0xc010f1e7,(%esp)
c0109376:	e8 dd 8e ff ff       	call   c0102258 <__panic>
    }
    return &pages[PPN(pa)];
c010937b:	8b 0d d0 2f 1a c0    	mov    0xc01a2fd0,%ecx
c0109381:	8b 45 08             	mov    0x8(%ebp),%eax
c0109384:	c1 e8 0c             	shr    $0xc,%eax
c0109387:	89 c2                	mov    %eax,%edx
c0109389:	89 d0                	mov    %edx,%eax
c010938b:	c1 e0 03             	shl    $0x3,%eax
c010938e:	01 d0                	add    %edx,%eax
c0109390:	c1 e0 02             	shl    $0x2,%eax
c0109393:	01 c8                	add    %ecx,%eax
}
c0109395:	c9                   	leave  
c0109396:	c3                   	ret    

c0109397 <mm_create>:
static void check_vma_struct(void);
static void check_pgfault(void);

// mm_create -  alloc a mm_struct & initialize it.
struct mm_struct *
mm_create(void) {
c0109397:	55                   	push   %ebp
c0109398:	89 e5                	mov    %esp,%ebp
c010939a:	83 ec 28             	sub    $0x28,%esp
    struct mm_struct *mm = kmalloc(sizeof(struct mm_struct));
c010939d:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
c01093a4:	e8 49 cd ff ff       	call   c01060f2 <kmalloc>
c01093a9:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (mm != NULL) {
c01093ac:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01093b0:	74 79                	je     c010942b <mm_create+0x94>
        list_init(&(mm->mmap_list));
c01093b2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01093b5:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c01093b8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01093bb:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01093be:	89 50 04             	mov    %edx,0x4(%eax)
c01093c1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01093c4:	8b 50 04             	mov    0x4(%eax),%edx
c01093c7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01093ca:	89 10                	mov    %edx,(%eax)
        mm->mmap_cache = NULL;
c01093cc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01093cf:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        mm->pgdir = NULL;
c01093d6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01093d9:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
        mm->map_count = 0;
c01093e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01093e3:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)

        if (swap_init_ok) swap_init_mm(mm);
c01093ea:	a1 70 0f 1a c0       	mov    0xc01a0f70,%eax
c01093ef:	85 c0                	test   %eax,%eax
c01093f1:	74 0d                	je     c0109400 <mm_create+0x69>
c01093f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01093f6:	89 04 24             	mov    %eax,(%esp)
c01093f9:	e8 54 ef ff ff       	call   c0108352 <swap_init_mm>
c01093fe:	eb 0a                	jmp    c010940a <mm_create+0x73>
        else mm->sm_priv = NULL;
c0109400:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109403:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
        
        set_mm_count(mm, 0);
c010940a:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0109411:	00 
c0109412:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109415:	89 04 24             	mov    %eax,(%esp)
c0109418:	e8 1d ff ff ff       	call   c010933a <set_mm_count>
        lock_init(&(mm->mm_lock));
c010941d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109420:	83 c0 1c             	add    $0x1c,%eax
c0109423:	89 04 24             	mov    %eax,(%esp)
c0109426:	e8 f6 fe ff ff       	call   c0109321 <lock_init>
    }    
    return mm;
c010942b:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010942e:	c9                   	leave  
c010942f:	c3                   	ret    

c0109430 <vma_create>:

// vma_create - alloc a vma_struct & initialize it. (addr range: vm_start~vm_end)
struct vma_struct *
vma_create(uintptr_t vm_start, uintptr_t vm_end, uint32_t vm_flags) {
c0109430:	55                   	push   %ebp
c0109431:	89 e5                	mov    %esp,%ebp
c0109433:	83 ec 28             	sub    $0x28,%esp
    struct vma_struct *vma = kmalloc(sizeof(struct vma_struct));
c0109436:	c7 04 24 18 00 00 00 	movl   $0x18,(%esp)
c010943d:	e8 b0 cc ff ff       	call   c01060f2 <kmalloc>
c0109442:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (vma != NULL) {
c0109445:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109449:	74 1b                	je     c0109466 <vma_create+0x36>
        vma->vm_start = vm_start;
c010944b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010944e:	8b 55 08             	mov    0x8(%ebp),%edx
c0109451:	89 50 04             	mov    %edx,0x4(%eax)
        vma->vm_end = vm_end;
c0109454:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109457:	8b 55 0c             	mov    0xc(%ebp),%edx
c010945a:	89 50 08             	mov    %edx,0x8(%eax)
        vma->vm_flags = vm_flags;
c010945d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109460:	8b 55 10             	mov    0x10(%ebp),%edx
c0109463:	89 50 0c             	mov    %edx,0xc(%eax)
    }
    return vma;
c0109466:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0109469:	c9                   	leave  
c010946a:	c3                   	ret    

c010946b <find_vma>:


// find_vma - find a vma  (vma->vm_start <= addr <= vma_vm_end)
struct vma_struct *
find_vma(struct mm_struct *mm, uintptr_t addr) {
c010946b:	55                   	push   %ebp
c010946c:	89 e5                	mov    %esp,%ebp
c010946e:	83 ec 20             	sub    $0x20,%esp
    struct vma_struct *vma = NULL;
c0109471:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    if (mm != NULL) {
c0109478:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010947c:	0f 84 95 00 00 00    	je     c0109517 <find_vma+0xac>
        vma = mm->mmap_cache;
c0109482:	8b 45 08             	mov    0x8(%ebp),%eax
c0109485:	8b 40 08             	mov    0x8(%eax),%eax
c0109488:	89 45 fc             	mov    %eax,-0x4(%ebp)
        if (!(vma != NULL && vma->vm_start <= addr && vma->vm_end > addr)) {
c010948b:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c010948f:	74 16                	je     c01094a7 <find_vma+0x3c>
c0109491:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109494:	8b 40 04             	mov    0x4(%eax),%eax
c0109497:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010949a:	77 0b                	ja     c01094a7 <find_vma+0x3c>
c010949c:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010949f:	8b 40 08             	mov    0x8(%eax),%eax
c01094a2:	3b 45 0c             	cmp    0xc(%ebp),%eax
c01094a5:	77 61                	ja     c0109508 <find_vma+0x9d>
                bool found = 0;
c01094a7:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
                list_entry_t *list = &(mm->mmap_list), *le = list;
c01094ae:	8b 45 08             	mov    0x8(%ebp),%eax
c01094b1:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01094b4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01094b7:	89 45 f4             	mov    %eax,-0xc(%ebp)
                while ((le = list_next(le)) != list) {
c01094ba:	eb 28                	jmp    c01094e4 <find_vma+0x79>
                    vma = le2vma(le, list_link);
c01094bc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01094bf:	83 e8 10             	sub    $0x10,%eax
c01094c2:	89 45 fc             	mov    %eax,-0x4(%ebp)
                    if (vma->vm_start<=addr && addr < vma->vm_end) {
c01094c5:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01094c8:	8b 40 04             	mov    0x4(%eax),%eax
c01094cb:	3b 45 0c             	cmp    0xc(%ebp),%eax
c01094ce:	77 14                	ja     c01094e4 <find_vma+0x79>
c01094d0:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01094d3:	8b 40 08             	mov    0x8(%eax),%eax
c01094d6:	3b 45 0c             	cmp    0xc(%ebp),%eax
c01094d9:	76 09                	jbe    c01094e4 <find_vma+0x79>
                        found = 1;
c01094db:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%ebp)
                        break;
c01094e2:	eb 17                	jmp    c01094fb <find_vma+0x90>
c01094e4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01094e7:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c01094ea:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01094ed:	8b 40 04             	mov    0x4(%eax),%eax
    if (mm != NULL) {
        vma = mm->mmap_cache;
        if (!(vma != NULL && vma->vm_start <= addr && vma->vm_end > addr)) {
                bool found = 0;
                list_entry_t *list = &(mm->mmap_list), *le = list;
                while ((le = list_next(le)) != list) {
c01094f0:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01094f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01094f6:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c01094f9:	75 c1                	jne    c01094bc <find_vma+0x51>
                    if (vma->vm_start<=addr && addr < vma->vm_end) {
                        found = 1;
                        break;
                    }
                }
                if (!found) {
c01094fb:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
c01094ff:	75 07                	jne    c0109508 <find_vma+0x9d>
                    vma = NULL;
c0109501:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
                }
        }
        if (vma != NULL) {
c0109508:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c010950c:	74 09                	je     c0109517 <find_vma+0xac>
            mm->mmap_cache = vma;
c010950e:	8b 45 08             	mov    0x8(%ebp),%eax
c0109511:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0109514:	89 50 08             	mov    %edx,0x8(%eax)
        }
    }
    return vma;
c0109517:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c010951a:	c9                   	leave  
c010951b:	c3                   	ret    

c010951c <check_vma_overlap>:


// check_vma_overlap - check if vma1 overlaps vma2 ?
static inline void
check_vma_overlap(struct vma_struct *prev, struct vma_struct *next) {
c010951c:	55                   	push   %ebp
c010951d:	89 e5                	mov    %esp,%ebp
c010951f:	83 ec 18             	sub    $0x18,%esp
    assert(prev->vm_start < prev->vm_end);
c0109522:	8b 45 08             	mov    0x8(%ebp),%eax
c0109525:	8b 50 04             	mov    0x4(%eax),%edx
c0109528:	8b 45 08             	mov    0x8(%ebp),%eax
c010952b:	8b 40 08             	mov    0x8(%eax),%eax
c010952e:	39 c2                	cmp    %eax,%edx
c0109530:	72 24                	jb     c0109556 <check_vma_overlap+0x3a>
c0109532:	c7 44 24 0c f5 f1 10 	movl   $0xc010f1f5,0xc(%esp)
c0109539:	c0 
c010953a:	c7 44 24 08 13 f2 10 	movl   $0xc010f213,0x8(%esp)
c0109541:	c0 
c0109542:	c7 44 24 04 6b 00 00 	movl   $0x6b,0x4(%esp)
c0109549:	00 
c010954a:	c7 04 24 28 f2 10 c0 	movl   $0xc010f228,(%esp)
c0109551:	e8 02 8d ff ff       	call   c0102258 <__panic>
    assert(prev->vm_end <= next->vm_start);
c0109556:	8b 45 08             	mov    0x8(%ebp),%eax
c0109559:	8b 50 08             	mov    0x8(%eax),%edx
c010955c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010955f:	8b 40 04             	mov    0x4(%eax),%eax
c0109562:	39 c2                	cmp    %eax,%edx
c0109564:	76 24                	jbe    c010958a <check_vma_overlap+0x6e>
c0109566:	c7 44 24 0c 38 f2 10 	movl   $0xc010f238,0xc(%esp)
c010956d:	c0 
c010956e:	c7 44 24 08 13 f2 10 	movl   $0xc010f213,0x8(%esp)
c0109575:	c0 
c0109576:	c7 44 24 04 6c 00 00 	movl   $0x6c,0x4(%esp)
c010957d:	00 
c010957e:	c7 04 24 28 f2 10 c0 	movl   $0xc010f228,(%esp)
c0109585:	e8 ce 8c ff ff       	call   c0102258 <__panic>
    assert(next->vm_start < next->vm_end);
c010958a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010958d:	8b 50 04             	mov    0x4(%eax),%edx
c0109590:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109593:	8b 40 08             	mov    0x8(%eax),%eax
c0109596:	39 c2                	cmp    %eax,%edx
c0109598:	72 24                	jb     c01095be <check_vma_overlap+0xa2>
c010959a:	c7 44 24 0c 57 f2 10 	movl   $0xc010f257,0xc(%esp)
c01095a1:	c0 
c01095a2:	c7 44 24 08 13 f2 10 	movl   $0xc010f213,0x8(%esp)
c01095a9:	c0 
c01095aa:	c7 44 24 04 6d 00 00 	movl   $0x6d,0x4(%esp)
c01095b1:	00 
c01095b2:	c7 04 24 28 f2 10 c0 	movl   $0xc010f228,(%esp)
c01095b9:	e8 9a 8c ff ff       	call   c0102258 <__panic>
}
c01095be:	c9                   	leave  
c01095bf:	c3                   	ret    

c01095c0 <insert_vma_struct>:


// insert_vma_struct -insert vma in mm's list link
void
insert_vma_struct(struct mm_struct *mm, struct vma_struct *vma) {
c01095c0:	55                   	push   %ebp
c01095c1:	89 e5                	mov    %esp,%ebp
c01095c3:	83 ec 48             	sub    $0x48,%esp
    assert(vma->vm_start < vma->vm_end);
c01095c6:	8b 45 0c             	mov    0xc(%ebp),%eax
c01095c9:	8b 50 04             	mov    0x4(%eax),%edx
c01095cc:	8b 45 0c             	mov    0xc(%ebp),%eax
c01095cf:	8b 40 08             	mov    0x8(%eax),%eax
c01095d2:	39 c2                	cmp    %eax,%edx
c01095d4:	72 24                	jb     c01095fa <insert_vma_struct+0x3a>
c01095d6:	c7 44 24 0c 75 f2 10 	movl   $0xc010f275,0xc(%esp)
c01095dd:	c0 
c01095de:	c7 44 24 08 13 f2 10 	movl   $0xc010f213,0x8(%esp)
c01095e5:	c0 
c01095e6:	c7 44 24 04 74 00 00 	movl   $0x74,0x4(%esp)
c01095ed:	00 
c01095ee:	c7 04 24 28 f2 10 c0 	movl   $0xc010f228,(%esp)
c01095f5:	e8 5e 8c ff ff       	call   c0102258 <__panic>
    list_entry_t *list = &(mm->mmap_list);
c01095fa:	8b 45 08             	mov    0x8(%ebp),%eax
c01095fd:	89 45 ec             	mov    %eax,-0x14(%ebp)
    list_entry_t *le_prev = list, *le_next;
c0109600:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109603:	89 45 f4             	mov    %eax,-0xc(%ebp)

        list_entry_t *le = list;
c0109606:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109609:	89 45 f0             	mov    %eax,-0x10(%ebp)
        while ((le = list_next(le)) != list) {
c010960c:	eb 21                	jmp    c010962f <insert_vma_struct+0x6f>
            struct vma_struct *mmap_prev = le2vma(le, list_link);
c010960e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109611:	83 e8 10             	sub    $0x10,%eax
c0109614:	89 45 e8             	mov    %eax,-0x18(%ebp)
            if (mmap_prev->vm_start > vma->vm_start) {
c0109617:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010961a:	8b 50 04             	mov    0x4(%eax),%edx
c010961d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109620:	8b 40 04             	mov    0x4(%eax),%eax
c0109623:	39 c2                	cmp    %eax,%edx
c0109625:	76 02                	jbe    c0109629 <insert_vma_struct+0x69>
                break;
c0109627:	eb 1d                	jmp    c0109646 <insert_vma_struct+0x86>
            }
            le_prev = le;
c0109629:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010962c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010962f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109632:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0109635:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0109638:	8b 40 04             	mov    0x4(%eax),%eax
    assert(vma->vm_start < vma->vm_end);
    list_entry_t *list = &(mm->mmap_list);
    list_entry_t *le_prev = list, *le_next;

        list_entry_t *le = list;
        while ((le = list_next(le)) != list) {
c010963b:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010963e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109641:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0109644:	75 c8                	jne    c010960e <insert_vma_struct+0x4e>
c0109646:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109649:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010964c:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010964f:	8b 40 04             	mov    0x4(%eax),%eax
                break;
            }
            le_prev = le;
        }

    le_next = list_next(le_prev);
c0109652:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    /* check overlap */
    if (le_prev != list) {
c0109655:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109658:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c010965b:	74 15                	je     c0109672 <insert_vma_struct+0xb2>
        check_vma_overlap(le2vma(le_prev, list_link), vma);
c010965d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109660:	8d 50 f0             	lea    -0x10(%eax),%edx
c0109663:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109666:	89 44 24 04          	mov    %eax,0x4(%esp)
c010966a:	89 14 24             	mov    %edx,(%esp)
c010966d:	e8 aa fe ff ff       	call   c010951c <check_vma_overlap>
    }
    if (le_next != list) {
c0109672:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109675:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0109678:	74 15                	je     c010968f <insert_vma_struct+0xcf>
        check_vma_overlap(vma, le2vma(le_next, list_link));
c010967a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010967d:	83 e8 10             	sub    $0x10,%eax
c0109680:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109684:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109687:	89 04 24             	mov    %eax,(%esp)
c010968a:	e8 8d fe ff ff       	call   c010951c <check_vma_overlap>
    }

    vma->vm_mm = mm;
c010968f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109692:	8b 55 08             	mov    0x8(%ebp),%edx
c0109695:	89 10                	mov    %edx,(%eax)
    list_add_after(le_prev, &(vma->list_link));
c0109697:	8b 45 0c             	mov    0xc(%ebp),%eax
c010969a:	8d 50 10             	lea    0x10(%eax),%edx
c010969d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01096a0:	89 45 d8             	mov    %eax,-0x28(%ebp)
c01096a3:	89 55 d4             	mov    %edx,-0x2c(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c01096a6:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01096a9:	8b 40 04             	mov    0x4(%eax),%eax
c01096ac:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01096af:	89 55 d0             	mov    %edx,-0x30(%ebp)
c01096b2:	8b 55 d8             	mov    -0x28(%ebp),%edx
c01096b5:	89 55 cc             	mov    %edx,-0x34(%ebp)
c01096b8:	89 45 c8             	mov    %eax,-0x38(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c01096bb:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01096be:	8b 55 d0             	mov    -0x30(%ebp),%edx
c01096c1:	89 10                	mov    %edx,(%eax)
c01096c3:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01096c6:	8b 10                	mov    (%eax),%edx
c01096c8:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01096cb:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c01096ce:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01096d1:	8b 55 c8             	mov    -0x38(%ebp),%edx
c01096d4:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c01096d7:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01096da:	8b 55 cc             	mov    -0x34(%ebp),%edx
c01096dd:	89 10                	mov    %edx,(%eax)

    mm->map_count ++;
c01096df:	8b 45 08             	mov    0x8(%ebp),%eax
c01096e2:	8b 40 10             	mov    0x10(%eax),%eax
c01096e5:	8d 50 01             	lea    0x1(%eax),%edx
c01096e8:	8b 45 08             	mov    0x8(%ebp),%eax
c01096eb:	89 50 10             	mov    %edx,0x10(%eax)
}
c01096ee:	c9                   	leave  
c01096ef:	c3                   	ret    

c01096f0 <mm_destroy>:

// mm_destroy - free mm and mm internal fields
void
mm_destroy(struct mm_struct *mm) {
c01096f0:	55                   	push   %ebp
c01096f1:	89 e5                	mov    %esp,%ebp
c01096f3:	83 ec 38             	sub    $0x38,%esp
    assert(mm_count(mm) == 0);
c01096f6:	8b 45 08             	mov    0x8(%ebp),%eax
c01096f9:	89 04 24             	mov    %eax,(%esp)
c01096fc:	e8 2e fc ff ff       	call   c010932f <mm_count>
c0109701:	85 c0                	test   %eax,%eax
c0109703:	74 24                	je     c0109729 <mm_destroy+0x39>
c0109705:	c7 44 24 0c 91 f2 10 	movl   $0xc010f291,0xc(%esp)
c010970c:	c0 
c010970d:	c7 44 24 08 13 f2 10 	movl   $0xc010f213,0x8(%esp)
c0109714:	c0 
c0109715:	c7 44 24 04 94 00 00 	movl   $0x94,0x4(%esp)
c010971c:	00 
c010971d:	c7 04 24 28 f2 10 c0 	movl   $0xc010f228,(%esp)
c0109724:	e8 2f 8b ff ff       	call   c0102258 <__panic>

    list_entry_t *list = &(mm->mmap_list), *le;
c0109729:	8b 45 08             	mov    0x8(%ebp),%eax
c010972c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(list)) != list) {
c010972f:	eb 36                	jmp    c0109767 <mm_destroy+0x77>
c0109731:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109734:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c0109737:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010973a:	8b 40 04             	mov    0x4(%eax),%eax
c010973d:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0109740:	8b 12                	mov    (%edx),%edx
c0109742:	89 55 e8             	mov    %edx,-0x18(%ebp)
c0109745:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c0109748:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010974b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010974e:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0109751:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109754:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0109757:	89 10                	mov    %edx,(%eax)
        list_del(le);
        kfree(le2vma(le, list_link));  //kfree vma        
c0109759:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010975c:	83 e8 10             	sub    $0x10,%eax
c010975f:	89 04 24             	mov    %eax,(%esp)
c0109762:	e8 a6 c9 ff ff       	call   c010610d <kfree>
c0109767:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010976a:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010976d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0109770:	8b 40 04             	mov    0x4(%eax),%eax
void
mm_destroy(struct mm_struct *mm) {
    assert(mm_count(mm) == 0);

    list_entry_t *list = &(mm->mmap_list), *le;
    while ((le = list_next(list)) != list) {
c0109773:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0109776:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109779:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c010977c:	75 b3                	jne    c0109731 <mm_destroy+0x41>
        list_del(le);
        kfree(le2vma(le, list_link));  //kfree vma        
    }
    kfree(mm); //kfree mm
c010977e:	8b 45 08             	mov    0x8(%ebp),%eax
c0109781:	89 04 24             	mov    %eax,(%esp)
c0109784:	e8 84 c9 ff ff       	call   c010610d <kfree>
    mm=NULL;
c0109789:	c7 45 08 00 00 00 00 	movl   $0x0,0x8(%ebp)
}
c0109790:	c9                   	leave  
c0109791:	c3                   	ret    

c0109792 <mm_map>:

int
mm_map(struct mm_struct *mm, uintptr_t addr, size_t len, uint32_t vm_flags,
       struct vma_struct **vma_store) {
c0109792:	55                   	push   %ebp
c0109793:	89 e5                	mov    %esp,%ebp
c0109795:	83 ec 38             	sub    $0x38,%esp
    uintptr_t start = ROUNDDOWN(addr, PGSIZE), end = ROUNDUP(addr + len, PGSIZE);
c0109798:	8b 45 0c             	mov    0xc(%ebp),%eax
c010979b:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010979e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01097a1:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01097a6:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01097a9:	c7 45 e8 00 10 00 00 	movl   $0x1000,-0x18(%ebp)
c01097b0:	8b 45 10             	mov    0x10(%ebp),%eax
c01097b3:	8b 55 0c             	mov    0xc(%ebp),%edx
c01097b6:	01 c2                	add    %eax,%edx
c01097b8:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01097bb:	01 d0                	add    %edx,%eax
c01097bd:	83 e8 01             	sub    $0x1,%eax
c01097c0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01097c3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01097c6:	ba 00 00 00 00       	mov    $0x0,%edx
c01097cb:	f7 75 e8             	divl   -0x18(%ebp)
c01097ce:	89 d0                	mov    %edx,%eax
c01097d0:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01097d3:	29 c2                	sub    %eax,%edx
c01097d5:	89 d0                	mov    %edx,%eax
c01097d7:	89 45 e0             	mov    %eax,-0x20(%ebp)
    if (!USER_ACCESS(start, end)) {
c01097da:	81 7d ec ff ff 1f 00 	cmpl   $0x1fffff,-0x14(%ebp)
c01097e1:	76 11                	jbe    c01097f4 <mm_map+0x62>
c01097e3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01097e6:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c01097e9:	73 09                	jae    c01097f4 <mm_map+0x62>
c01097eb:	81 7d e0 00 00 00 b0 	cmpl   $0xb0000000,-0x20(%ebp)
c01097f2:	76 0a                	jbe    c01097fe <mm_map+0x6c>
        return -E_INVAL;
c01097f4:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c01097f9:	e9 ae 00 00 00       	jmp    c01098ac <mm_map+0x11a>
    }

    assert(mm != NULL);
c01097fe:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0109802:	75 24                	jne    c0109828 <mm_map+0x96>
c0109804:	c7 44 24 0c a3 f2 10 	movl   $0xc010f2a3,0xc(%esp)
c010980b:	c0 
c010980c:	c7 44 24 08 13 f2 10 	movl   $0xc010f213,0x8(%esp)
c0109813:	c0 
c0109814:	c7 44 24 04 a7 00 00 	movl   $0xa7,0x4(%esp)
c010981b:	00 
c010981c:	c7 04 24 28 f2 10 c0 	movl   $0xc010f228,(%esp)
c0109823:	e8 30 8a ff ff       	call   c0102258 <__panic>

    int ret = -E_INVAL;
c0109828:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)

    struct vma_struct *vma;
    if ((vma = find_vma(mm, start)) != NULL && end > vma->vm_start) {
c010982f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109832:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109836:	8b 45 08             	mov    0x8(%ebp),%eax
c0109839:	89 04 24             	mov    %eax,(%esp)
c010983c:	e8 2a fc ff ff       	call   c010946b <find_vma>
c0109841:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0109844:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0109848:	74 0d                	je     c0109857 <mm_map+0xc5>
c010984a:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010984d:	8b 40 04             	mov    0x4(%eax),%eax
c0109850:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0109853:	73 02                	jae    c0109857 <mm_map+0xc5>
        goto out;
c0109855:	eb 52                	jmp    c01098a9 <mm_map+0x117>
    }
    ret = -E_NO_MEM;
c0109857:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

    if ((vma = vma_create(start, end, vm_flags)) == NULL) {
c010985e:	8b 45 14             	mov    0x14(%ebp),%eax
c0109861:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109865:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0109868:	89 44 24 04          	mov    %eax,0x4(%esp)
c010986c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010986f:	89 04 24             	mov    %eax,(%esp)
c0109872:	e8 b9 fb ff ff       	call   c0109430 <vma_create>
c0109877:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010987a:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c010987e:	75 02                	jne    c0109882 <mm_map+0xf0>
        goto out;
c0109880:	eb 27                	jmp    c01098a9 <mm_map+0x117>
    }
    insert_vma_struct(mm, vma);
c0109882:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0109885:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109889:	8b 45 08             	mov    0x8(%ebp),%eax
c010988c:	89 04 24             	mov    %eax,(%esp)
c010988f:	e8 2c fd ff ff       	call   c01095c0 <insert_vma_struct>
    if (vma_store != NULL) {
c0109894:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c0109898:	74 08                	je     c01098a2 <mm_map+0x110>
        *vma_store = vma;
c010989a:	8b 45 18             	mov    0x18(%ebp),%eax
c010989d:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01098a0:	89 10                	mov    %edx,(%eax)
    }
    ret = 0;
c01098a2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

out:
    return ret;
c01098a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01098ac:	c9                   	leave  
c01098ad:	c3                   	ret    

c01098ae <dup_mmap>:

int
dup_mmap(struct mm_struct *to, struct mm_struct *from) {
c01098ae:	55                   	push   %ebp
c01098af:	89 e5                	mov    %esp,%ebp
c01098b1:	56                   	push   %esi
c01098b2:	53                   	push   %ebx
c01098b3:	83 ec 40             	sub    $0x40,%esp
    assert(to != NULL && from != NULL);
c01098b6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01098ba:	74 06                	je     c01098c2 <dup_mmap+0x14>
c01098bc:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c01098c0:	75 24                	jne    c01098e6 <dup_mmap+0x38>
c01098c2:	c7 44 24 0c ae f2 10 	movl   $0xc010f2ae,0xc(%esp)
c01098c9:	c0 
c01098ca:	c7 44 24 08 13 f2 10 	movl   $0xc010f213,0x8(%esp)
c01098d1:	c0 
c01098d2:	c7 44 24 04 c0 00 00 	movl   $0xc0,0x4(%esp)
c01098d9:	00 
c01098da:	c7 04 24 28 f2 10 c0 	movl   $0xc010f228,(%esp)
c01098e1:	e8 72 89 ff ff       	call   c0102258 <__panic>
    list_entry_t *list = &(from->mmap_list), *le = list;
c01098e6:	8b 45 0c             	mov    0xc(%ebp),%eax
c01098e9:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01098ec:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01098ef:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_prev(le)) != list) {
c01098f2:	e9 92 00 00 00       	jmp    c0109989 <dup_mmap+0xdb>
        struct vma_struct *vma, *nvma;
        vma = le2vma(le, list_link);
c01098f7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01098fa:	83 e8 10             	sub    $0x10,%eax
c01098fd:	89 45 ec             	mov    %eax,-0x14(%ebp)
        nvma = vma_create(vma->vm_start, vma->vm_end, vma->vm_flags);
c0109900:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109903:	8b 48 0c             	mov    0xc(%eax),%ecx
c0109906:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109909:	8b 50 08             	mov    0x8(%eax),%edx
c010990c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010990f:	8b 40 04             	mov    0x4(%eax),%eax
c0109912:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0109916:	89 54 24 04          	mov    %edx,0x4(%esp)
c010991a:	89 04 24             	mov    %eax,(%esp)
c010991d:	e8 0e fb ff ff       	call   c0109430 <vma_create>
c0109922:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (nvma == NULL) {
c0109925:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0109929:	75 07                	jne    c0109932 <dup_mmap+0x84>
            return -E_NO_MEM;
c010992b:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0109930:	eb 76                	jmp    c01099a8 <dup_mmap+0xfa>
        }

        insert_vma_struct(to, nvma);
c0109932:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109935:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109939:	8b 45 08             	mov    0x8(%ebp),%eax
c010993c:	89 04 24             	mov    %eax,(%esp)
c010993f:	e8 7c fc ff ff       	call   c01095c0 <insert_vma_struct>

        bool share = 0;
c0109944:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
        if (copy_range(to->pgdir, from->pgdir, vma->vm_start, vma->vm_end, share) != 0) {
c010994b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010994e:	8b 58 08             	mov    0x8(%eax),%ebx
c0109951:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109954:	8b 48 04             	mov    0x4(%eax),%ecx
c0109957:	8b 45 0c             	mov    0xc(%ebp),%eax
c010995a:	8b 50 0c             	mov    0xc(%eax),%edx
c010995d:	8b 45 08             	mov    0x8(%ebp),%eax
c0109960:	8b 40 0c             	mov    0xc(%eax),%eax
c0109963:	8b 75 e4             	mov    -0x1c(%ebp),%esi
c0109966:	89 74 24 10          	mov    %esi,0x10(%esp)
c010996a:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c010996e:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0109972:	89 54 24 04          	mov    %edx,0x4(%esp)
c0109976:	89 04 24             	mov    %eax,(%esp)
c0109979:	e8 ad d7 ff ff       	call   c010712b <copy_range>
c010997e:	85 c0                	test   %eax,%eax
c0109980:	74 07                	je     c0109989 <dup_mmap+0xdb>
            return -E_NO_MEM;
c0109982:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0109987:	eb 1f                	jmp    c01099a8 <dup_mmap+0xfa>
c0109989:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010998c:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c010998f:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0109992:	8b 00                	mov    (%eax),%eax

int
dup_mmap(struct mm_struct *to, struct mm_struct *from) {
    assert(to != NULL && from != NULL);
    list_entry_t *list = &(from->mmap_list), *le = list;
    while ((le = list_prev(le)) != list) {
c0109994:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109997:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010999a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010999d:	0f 85 54 ff ff ff    	jne    c01098f7 <dup_mmap+0x49>
        bool share = 0;
        if (copy_range(to->pgdir, from->pgdir, vma->vm_start, vma->vm_end, share) != 0) {
            return -E_NO_MEM;
        }
    }
    return 0;
c01099a3:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01099a8:	83 c4 40             	add    $0x40,%esp
c01099ab:	5b                   	pop    %ebx
c01099ac:	5e                   	pop    %esi
c01099ad:	5d                   	pop    %ebp
c01099ae:	c3                   	ret    

c01099af <exit_mmap>:

void
exit_mmap(struct mm_struct *mm) {
c01099af:	55                   	push   %ebp
c01099b0:	89 e5                	mov    %esp,%ebp
c01099b2:	83 ec 38             	sub    $0x38,%esp
    assert(mm != NULL && mm_count(mm) == 0);
c01099b5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01099b9:	74 0f                	je     c01099ca <exit_mmap+0x1b>
c01099bb:	8b 45 08             	mov    0x8(%ebp),%eax
c01099be:	89 04 24             	mov    %eax,(%esp)
c01099c1:	e8 69 f9 ff ff       	call   c010932f <mm_count>
c01099c6:	85 c0                	test   %eax,%eax
c01099c8:	74 24                	je     c01099ee <exit_mmap+0x3f>
c01099ca:	c7 44 24 0c cc f2 10 	movl   $0xc010f2cc,0xc(%esp)
c01099d1:	c0 
c01099d2:	c7 44 24 08 13 f2 10 	movl   $0xc010f213,0x8(%esp)
c01099d9:	c0 
c01099da:	c7 44 24 04 d6 00 00 	movl   $0xd6,0x4(%esp)
c01099e1:	00 
c01099e2:	c7 04 24 28 f2 10 c0 	movl   $0xc010f228,(%esp)
c01099e9:	e8 6a 88 ff ff       	call   c0102258 <__panic>
    pde_t *pgdir = mm->pgdir;
c01099ee:	8b 45 08             	mov    0x8(%ebp),%eax
c01099f1:	8b 40 0c             	mov    0xc(%eax),%eax
c01099f4:	89 45 f0             	mov    %eax,-0x10(%ebp)
    list_entry_t *list = &(mm->mmap_list), *le = list;
c01099f7:	8b 45 08             	mov    0x8(%ebp),%eax
c01099fa:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01099fd:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109a00:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(le)) != list) {
c0109a03:	eb 28                	jmp    c0109a2d <exit_mmap+0x7e>
        struct vma_struct *vma = le2vma(le, list_link);
c0109a05:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109a08:	83 e8 10             	sub    $0x10,%eax
c0109a0b:	89 45 e8             	mov    %eax,-0x18(%ebp)
        unmap_range(pgdir, vma->vm_start, vma->vm_end);
c0109a0e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109a11:	8b 50 08             	mov    0x8(%eax),%edx
c0109a14:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109a17:	8b 40 04             	mov    0x4(%eax),%eax
c0109a1a:	89 54 24 08          	mov    %edx,0x8(%esp)
c0109a1e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109a22:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109a25:	89 04 24             	mov    %eax,(%esp)
c0109a28:	e8 03 d5 ff ff       	call   c0106f30 <unmap_range>
c0109a2d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109a30:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0109a33:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0109a36:	8b 40 04             	mov    0x4(%eax),%eax
void
exit_mmap(struct mm_struct *mm) {
    assert(mm != NULL && mm_count(mm) == 0);
    pde_t *pgdir = mm->pgdir;
    list_entry_t *list = &(mm->mmap_list), *le = list;
    while ((le = list_next(le)) != list) {
c0109a39:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109a3c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109a3f:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0109a42:	75 c1                	jne    c0109a05 <exit_mmap+0x56>
        struct vma_struct *vma = le2vma(le, list_link);
        unmap_range(pgdir, vma->vm_start, vma->vm_end);
    }
    while ((le = list_next(le)) != list) {
c0109a44:	eb 28                	jmp    c0109a6e <exit_mmap+0xbf>
        struct vma_struct *vma = le2vma(le, list_link);
c0109a46:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109a49:	83 e8 10             	sub    $0x10,%eax
c0109a4c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        exit_range(pgdir, vma->vm_start, vma->vm_end);
c0109a4f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109a52:	8b 50 08             	mov    0x8(%eax),%edx
c0109a55:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109a58:	8b 40 04             	mov    0x4(%eax),%eax
c0109a5b:	89 54 24 08          	mov    %edx,0x8(%esp)
c0109a5f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109a63:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109a66:	89 04 24             	mov    %eax,(%esp)
c0109a69:	e8 b6 d5 ff ff       	call   c0107024 <exit_range>
c0109a6e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109a71:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0109a74:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0109a77:	8b 40 04             	mov    0x4(%eax),%eax
    list_entry_t *list = &(mm->mmap_list), *le = list;
    while ((le = list_next(le)) != list) {
        struct vma_struct *vma = le2vma(le, list_link);
        unmap_range(pgdir, vma->vm_start, vma->vm_end);
    }
    while ((le = list_next(le)) != list) {
c0109a7a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109a7d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109a80:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0109a83:	75 c1                	jne    c0109a46 <exit_mmap+0x97>
        struct vma_struct *vma = le2vma(le, list_link);
        exit_range(pgdir, vma->vm_start, vma->vm_end);
    }
}
c0109a85:	c9                   	leave  
c0109a86:	c3                   	ret    

c0109a87 <copy_from_user>:

bool
copy_from_user(struct mm_struct *mm, void *dst, const void *src, size_t len, bool writable) {
c0109a87:	55                   	push   %ebp
c0109a88:	89 e5                	mov    %esp,%ebp
c0109a8a:	83 ec 18             	sub    $0x18,%esp
    if (!user_mem_check(mm, (uintptr_t)src, len, writable)) {
c0109a8d:	8b 45 10             	mov    0x10(%ebp),%eax
c0109a90:	8b 55 18             	mov    0x18(%ebp),%edx
c0109a93:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0109a97:	8b 55 14             	mov    0x14(%ebp),%edx
c0109a9a:	89 54 24 08          	mov    %edx,0x8(%esp)
c0109a9e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109aa2:	8b 45 08             	mov    0x8(%ebp),%eax
c0109aa5:	89 04 24             	mov    %eax,(%esp)
c0109aa8:	e8 dc 09 00 00       	call   c010a489 <user_mem_check>
c0109aad:	85 c0                	test   %eax,%eax
c0109aaf:	75 07                	jne    c0109ab8 <copy_from_user+0x31>
        return 0;
c0109ab1:	b8 00 00 00 00       	mov    $0x0,%eax
c0109ab6:	eb 1e                	jmp    c0109ad6 <copy_from_user+0x4f>
    }
    memcpy(dst, src, len);
c0109ab8:	8b 45 14             	mov    0x14(%ebp),%eax
c0109abb:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109abf:	8b 45 10             	mov    0x10(%ebp),%eax
c0109ac2:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109ac6:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109ac9:	89 04 24             	mov    %eax,(%esp)
c0109acc:	e8 58 39 00 00       	call   c010d429 <memcpy>
    return 1;
c0109ad1:	b8 01 00 00 00       	mov    $0x1,%eax
}
c0109ad6:	c9                   	leave  
c0109ad7:	c3                   	ret    

c0109ad8 <copy_to_user>:

bool
copy_to_user(struct mm_struct *mm, void *dst, const void *src, size_t len) {
c0109ad8:	55                   	push   %ebp
c0109ad9:	89 e5                	mov    %esp,%ebp
c0109adb:	83 ec 18             	sub    $0x18,%esp
    if (!user_mem_check(mm, (uintptr_t)dst, len, 1)) {
c0109ade:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109ae1:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c0109ae8:	00 
c0109ae9:	8b 55 14             	mov    0x14(%ebp),%edx
c0109aec:	89 54 24 08          	mov    %edx,0x8(%esp)
c0109af0:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109af4:	8b 45 08             	mov    0x8(%ebp),%eax
c0109af7:	89 04 24             	mov    %eax,(%esp)
c0109afa:	e8 8a 09 00 00       	call   c010a489 <user_mem_check>
c0109aff:	85 c0                	test   %eax,%eax
c0109b01:	75 07                	jne    c0109b0a <copy_to_user+0x32>
        return 0;
c0109b03:	b8 00 00 00 00       	mov    $0x0,%eax
c0109b08:	eb 1e                	jmp    c0109b28 <copy_to_user+0x50>
    }
    memcpy(dst, src, len);
c0109b0a:	8b 45 14             	mov    0x14(%ebp),%eax
c0109b0d:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109b11:	8b 45 10             	mov    0x10(%ebp),%eax
c0109b14:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109b18:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109b1b:	89 04 24             	mov    %eax,(%esp)
c0109b1e:	e8 06 39 00 00       	call   c010d429 <memcpy>
    return 1;
c0109b23:	b8 01 00 00 00       	mov    $0x1,%eax
}
c0109b28:	c9                   	leave  
c0109b29:	c3                   	ret    

c0109b2a <vmm_init>:

// vmm_init - initialize virtual memory management
//          - now just call check_vmm to check correctness of vmm
void
vmm_init(void) {
c0109b2a:	55                   	push   %ebp
c0109b2b:	89 e5                	mov    %esp,%ebp
c0109b2d:	83 ec 08             	sub    $0x8,%esp
    check_vmm();
c0109b30:	e8 02 00 00 00       	call   c0109b37 <check_vmm>
}
c0109b35:	c9                   	leave  
c0109b36:	c3                   	ret    

c0109b37 <check_vmm>:

// check_vmm - check correctness of vmm
static void
check_vmm(void) {
c0109b37:	55                   	push   %ebp
c0109b38:	89 e5                	mov    %esp,%ebp
c0109b3a:	83 ec 28             	sub    $0x28,%esp
    size_t nr_free_pages_store = nr_free_pages();
c0109b3d:	e8 22 cb ff ff       	call   c0106664 <nr_free_pages>
c0109b42:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    check_vma_struct();
c0109b45:	e8 13 00 00 00       	call   c0109b5d <check_vma_struct>
    check_pgfault();
c0109b4a:	e8 a7 04 00 00       	call   c0109ff6 <check_pgfault>

//    assert(nr_free_pages_store == nr_free_pages());

    cprintf("check_vmm() succeeded.\n");
c0109b4f:	c7 04 24 ec f2 10 c0 	movl   $0xc010f2ec,(%esp)
c0109b56:	e8 7b 7c ff ff       	call   c01017d6 <cprintf>
}
c0109b5b:	c9                   	leave  
c0109b5c:	c3                   	ret    

c0109b5d <check_vma_struct>:

static void
check_vma_struct(void) {
c0109b5d:	55                   	push   %ebp
c0109b5e:	89 e5                	mov    %esp,%ebp
c0109b60:	83 ec 68             	sub    $0x68,%esp
    size_t nr_free_pages_store = nr_free_pages();
c0109b63:	e8 fc ca ff ff       	call   c0106664 <nr_free_pages>
c0109b68:	89 45 ec             	mov    %eax,-0x14(%ebp)

    struct mm_struct *mm = mm_create();
c0109b6b:	e8 27 f8 ff ff       	call   c0109397 <mm_create>
c0109b70:	89 45 e8             	mov    %eax,-0x18(%ebp)
    assert(mm != NULL);
c0109b73:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0109b77:	75 24                	jne    c0109b9d <check_vma_struct+0x40>
c0109b79:	c7 44 24 0c a3 f2 10 	movl   $0xc010f2a3,0xc(%esp)
c0109b80:	c0 
c0109b81:	c7 44 24 08 13 f2 10 	movl   $0xc010f213,0x8(%esp)
c0109b88:	c0 
c0109b89:	c7 44 24 04 0e 01 00 	movl   $0x10e,0x4(%esp)
c0109b90:	00 
c0109b91:	c7 04 24 28 f2 10 c0 	movl   $0xc010f228,(%esp)
c0109b98:	e8 bb 86 ff ff       	call   c0102258 <__panic>

    int step1 = 10, step2 = step1 * 10;
c0109b9d:	c7 45 e4 0a 00 00 00 	movl   $0xa,-0x1c(%ebp)
c0109ba4:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0109ba7:	89 d0                	mov    %edx,%eax
c0109ba9:	c1 e0 02             	shl    $0x2,%eax
c0109bac:	01 d0                	add    %edx,%eax
c0109bae:	01 c0                	add    %eax,%eax
c0109bb0:	89 45 e0             	mov    %eax,-0x20(%ebp)

    int i;
    for (i = step1; i >= 1; i --) {
c0109bb3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109bb6:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109bb9:	eb 70                	jmp    c0109c2b <check_vma_struct+0xce>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
c0109bbb:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109bbe:	89 d0                	mov    %edx,%eax
c0109bc0:	c1 e0 02             	shl    $0x2,%eax
c0109bc3:	01 d0                	add    %edx,%eax
c0109bc5:	83 c0 02             	add    $0x2,%eax
c0109bc8:	89 c1                	mov    %eax,%ecx
c0109bca:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109bcd:	89 d0                	mov    %edx,%eax
c0109bcf:	c1 e0 02             	shl    $0x2,%eax
c0109bd2:	01 d0                	add    %edx,%eax
c0109bd4:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0109bdb:	00 
c0109bdc:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c0109be0:	89 04 24             	mov    %eax,(%esp)
c0109be3:	e8 48 f8 ff ff       	call   c0109430 <vma_create>
c0109be8:	89 45 dc             	mov    %eax,-0x24(%ebp)
        assert(vma != NULL);
c0109beb:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0109bef:	75 24                	jne    c0109c15 <check_vma_struct+0xb8>
c0109bf1:	c7 44 24 0c 04 f3 10 	movl   $0xc010f304,0xc(%esp)
c0109bf8:	c0 
c0109bf9:	c7 44 24 08 13 f2 10 	movl   $0xc010f213,0x8(%esp)
c0109c00:	c0 
c0109c01:	c7 44 24 04 15 01 00 	movl   $0x115,0x4(%esp)
c0109c08:	00 
c0109c09:	c7 04 24 28 f2 10 c0 	movl   $0xc010f228,(%esp)
c0109c10:	e8 43 86 ff ff       	call   c0102258 <__panic>
        insert_vma_struct(mm, vma);
c0109c15:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0109c18:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109c1c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109c1f:	89 04 24             	mov    %eax,(%esp)
c0109c22:	e8 99 f9 ff ff       	call   c01095c0 <insert_vma_struct>
    assert(mm != NULL);

    int step1 = 10, step2 = step1 * 10;

    int i;
    for (i = step1; i >= 1; i --) {
c0109c27:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c0109c2b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109c2f:	7f 8a                	jg     c0109bbb <check_vma_struct+0x5e>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
        assert(vma != NULL);
        insert_vma_struct(mm, vma);
    }

    for (i = step1 + 1; i <= step2; i ++) {
c0109c31:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109c34:	83 c0 01             	add    $0x1,%eax
c0109c37:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109c3a:	eb 70                	jmp    c0109cac <check_vma_struct+0x14f>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
c0109c3c:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109c3f:	89 d0                	mov    %edx,%eax
c0109c41:	c1 e0 02             	shl    $0x2,%eax
c0109c44:	01 d0                	add    %edx,%eax
c0109c46:	83 c0 02             	add    $0x2,%eax
c0109c49:	89 c1                	mov    %eax,%ecx
c0109c4b:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109c4e:	89 d0                	mov    %edx,%eax
c0109c50:	c1 e0 02             	shl    $0x2,%eax
c0109c53:	01 d0                	add    %edx,%eax
c0109c55:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0109c5c:	00 
c0109c5d:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c0109c61:	89 04 24             	mov    %eax,(%esp)
c0109c64:	e8 c7 f7 ff ff       	call   c0109430 <vma_create>
c0109c69:	89 45 d8             	mov    %eax,-0x28(%ebp)
        assert(vma != NULL);
c0109c6c:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
c0109c70:	75 24                	jne    c0109c96 <check_vma_struct+0x139>
c0109c72:	c7 44 24 0c 04 f3 10 	movl   $0xc010f304,0xc(%esp)
c0109c79:	c0 
c0109c7a:	c7 44 24 08 13 f2 10 	movl   $0xc010f213,0x8(%esp)
c0109c81:	c0 
c0109c82:	c7 44 24 04 1b 01 00 	movl   $0x11b,0x4(%esp)
c0109c89:	00 
c0109c8a:	c7 04 24 28 f2 10 c0 	movl   $0xc010f228,(%esp)
c0109c91:	e8 c2 85 ff ff       	call   c0102258 <__panic>
        insert_vma_struct(mm, vma);
c0109c96:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0109c99:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109c9d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109ca0:	89 04 24             	mov    %eax,(%esp)
c0109ca3:	e8 18 f9 ff ff       	call   c01095c0 <insert_vma_struct>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
        assert(vma != NULL);
        insert_vma_struct(mm, vma);
    }

    for (i = step1 + 1; i <= step2; i ++) {
c0109ca8:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0109cac:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109caf:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0109cb2:	7e 88                	jle    c0109c3c <check_vma_struct+0xdf>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
        assert(vma != NULL);
        insert_vma_struct(mm, vma);
    }

    list_entry_t *le = list_next(&(mm->mmap_list));
c0109cb4:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109cb7:	89 45 b8             	mov    %eax,-0x48(%ebp)
c0109cba:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0109cbd:	8b 40 04             	mov    0x4(%eax),%eax
c0109cc0:	89 45 f0             	mov    %eax,-0x10(%ebp)

    for (i = 1; i <= step2; i ++) {
c0109cc3:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
c0109cca:	e9 97 00 00 00       	jmp    c0109d66 <check_vma_struct+0x209>
        assert(le != &(mm->mmap_list));
c0109ccf:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109cd2:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0109cd5:	75 24                	jne    c0109cfb <check_vma_struct+0x19e>
c0109cd7:	c7 44 24 0c 10 f3 10 	movl   $0xc010f310,0xc(%esp)
c0109cde:	c0 
c0109cdf:	c7 44 24 08 13 f2 10 	movl   $0xc010f213,0x8(%esp)
c0109ce6:	c0 
c0109ce7:	c7 44 24 04 22 01 00 	movl   $0x122,0x4(%esp)
c0109cee:	00 
c0109cef:	c7 04 24 28 f2 10 c0 	movl   $0xc010f228,(%esp)
c0109cf6:	e8 5d 85 ff ff       	call   c0102258 <__panic>
        struct vma_struct *mmap = le2vma(le, list_link);
c0109cfb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109cfe:	83 e8 10             	sub    $0x10,%eax
c0109d01:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        assert(mmap->vm_start == i * 5 && mmap->vm_end == i * 5 + 2);
c0109d04:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0109d07:	8b 48 04             	mov    0x4(%eax),%ecx
c0109d0a:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109d0d:	89 d0                	mov    %edx,%eax
c0109d0f:	c1 e0 02             	shl    $0x2,%eax
c0109d12:	01 d0                	add    %edx,%eax
c0109d14:	39 c1                	cmp    %eax,%ecx
c0109d16:	75 17                	jne    c0109d2f <check_vma_struct+0x1d2>
c0109d18:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0109d1b:	8b 48 08             	mov    0x8(%eax),%ecx
c0109d1e:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109d21:	89 d0                	mov    %edx,%eax
c0109d23:	c1 e0 02             	shl    $0x2,%eax
c0109d26:	01 d0                	add    %edx,%eax
c0109d28:	83 c0 02             	add    $0x2,%eax
c0109d2b:	39 c1                	cmp    %eax,%ecx
c0109d2d:	74 24                	je     c0109d53 <check_vma_struct+0x1f6>
c0109d2f:	c7 44 24 0c 28 f3 10 	movl   $0xc010f328,0xc(%esp)
c0109d36:	c0 
c0109d37:	c7 44 24 08 13 f2 10 	movl   $0xc010f213,0x8(%esp)
c0109d3e:	c0 
c0109d3f:	c7 44 24 04 24 01 00 	movl   $0x124,0x4(%esp)
c0109d46:	00 
c0109d47:	c7 04 24 28 f2 10 c0 	movl   $0xc010f228,(%esp)
c0109d4e:	e8 05 85 ff ff       	call   c0102258 <__panic>
c0109d53:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109d56:	89 45 b4             	mov    %eax,-0x4c(%ebp)
c0109d59:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0109d5c:	8b 40 04             	mov    0x4(%eax),%eax
        le = list_next(le);
c0109d5f:	89 45 f0             	mov    %eax,-0x10(%ebp)
        insert_vma_struct(mm, vma);
    }

    list_entry_t *le = list_next(&(mm->mmap_list));

    for (i = 1; i <= step2; i ++) {
c0109d62:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0109d66:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109d69:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0109d6c:	0f 8e 5d ff ff ff    	jle    c0109ccf <check_vma_struct+0x172>
        struct vma_struct *mmap = le2vma(le, list_link);
        assert(mmap->vm_start == i * 5 && mmap->vm_end == i * 5 + 2);
        le = list_next(le);
    }

    for (i = 5; i <= 5 * step2; i +=5) {
c0109d72:	c7 45 f4 05 00 00 00 	movl   $0x5,-0xc(%ebp)
c0109d79:	e9 cd 01 00 00       	jmp    c0109f4b <check_vma_struct+0x3ee>
        struct vma_struct *vma1 = find_vma(mm, i);
c0109d7e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109d81:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109d85:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109d88:	89 04 24             	mov    %eax,(%esp)
c0109d8b:	e8 db f6 ff ff       	call   c010946b <find_vma>
c0109d90:	89 45 d0             	mov    %eax,-0x30(%ebp)
        assert(vma1 != NULL);
c0109d93:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
c0109d97:	75 24                	jne    c0109dbd <check_vma_struct+0x260>
c0109d99:	c7 44 24 0c 5d f3 10 	movl   $0xc010f35d,0xc(%esp)
c0109da0:	c0 
c0109da1:	c7 44 24 08 13 f2 10 	movl   $0xc010f213,0x8(%esp)
c0109da8:	c0 
c0109da9:	c7 44 24 04 2a 01 00 	movl   $0x12a,0x4(%esp)
c0109db0:	00 
c0109db1:	c7 04 24 28 f2 10 c0 	movl   $0xc010f228,(%esp)
c0109db8:	e8 9b 84 ff ff       	call   c0102258 <__panic>
        struct vma_struct *vma2 = find_vma(mm, i+1);
c0109dbd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109dc0:	83 c0 01             	add    $0x1,%eax
c0109dc3:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109dc7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109dca:	89 04 24             	mov    %eax,(%esp)
c0109dcd:	e8 99 f6 ff ff       	call   c010946b <find_vma>
c0109dd2:	89 45 cc             	mov    %eax,-0x34(%ebp)
        assert(vma2 != NULL);
c0109dd5:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c0109dd9:	75 24                	jne    c0109dff <check_vma_struct+0x2a2>
c0109ddb:	c7 44 24 0c 6a f3 10 	movl   $0xc010f36a,0xc(%esp)
c0109de2:	c0 
c0109de3:	c7 44 24 08 13 f2 10 	movl   $0xc010f213,0x8(%esp)
c0109dea:	c0 
c0109deb:	c7 44 24 04 2c 01 00 	movl   $0x12c,0x4(%esp)
c0109df2:	00 
c0109df3:	c7 04 24 28 f2 10 c0 	movl   $0xc010f228,(%esp)
c0109dfa:	e8 59 84 ff ff       	call   c0102258 <__panic>
        struct vma_struct *vma3 = find_vma(mm, i+2);
c0109dff:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109e02:	83 c0 02             	add    $0x2,%eax
c0109e05:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109e09:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109e0c:	89 04 24             	mov    %eax,(%esp)
c0109e0f:	e8 57 f6 ff ff       	call   c010946b <find_vma>
c0109e14:	89 45 c8             	mov    %eax,-0x38(%ebp)
        assert(vma3 == NULL);
c0109e17:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
c0109e1b:	74 24                	je     c0109e41 <check_vma_struct+0x2e4>
c0109e1d:	c7 44 24 0c 77 f3 10 	movl   $0xc010f377,0xc(%esp)
c0109e24:	c0 
c0109e25:	c7 44 24 08 13 f2 10 	movl   $0xc010f213,0x8(%esp)
c0109e2c:	c0 
c0109e2d:	c7 44 24 04 2e 01 00 	movl   $0x12e,0x4(%esp)
c0109e34:	00 
c0109e35:	c7 04 24 28 f2 10 c0 	movl   $0xc010f228,(%esp)
c0109e3c:	e8 17 84 ff ff       	call   c0102258 <__panic>
        struct vma_struct *vma4 = find_vma(mm, i+3);
c0109e41:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109e44:	83 c0 03             	add    $0x3,%eax
c0109e47:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109e4b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109e4e:	89 04 24             	mov    %eax,(%esp)
c0109e51:	e8 15 f6 ff ff       	call   c010946b <find_vma>
c0109e56:	89 45 c4             	mov    %eax,-0x3c(%ebp)
        assert(vma4 == NULL);
c0109e59:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
c0109e5d:	74 24                	je     c0109e83 <check_vma_struct+0x326>
c0109e5f:	c7 44 24 0c 84 f3 10 	movl   $0xc010f384,0xc(%esp)
c0109e66:	c0 
c0109e67:	c7 44 24 08 13 f2 10 	movl   $0xc010f213,0x8(%esp)
c0109e6e:	c0 
c0109e6f:	c7 44 24 04 30 01 00 	movl   $0x130,0x4(%esp)
c0109e76:	00 
c0109e77:	c7 04 24 28 f2 10 c0 	movl   $0xc010f228,(%esp)
c0109e7e:	e8 d5 83 ff ff       	call   c0102258 <__panic>
        struct vma_struct *vma5 = find_vma(mm, i+4);
c0109e83:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109e86:	83 c0 04             	add    $0x4,%eax
c0109e89:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109e8d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109e90:	89 04 24             	mov    %eax,(%esp)
c0109e93:	e8 d3 f5 ff ff       	call   c010946b <find_vma>
c0109e98:	89 45 c0             	mov    %eax,-0x40(%ebp)
        assert(vma5 == NULL);
c0109e9b:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
c0109e9f:	74 24                	je     c0109ec5 <check_vma_struct+0x368>
c0109ea1:	c7 44 24 0c 91 f3 10 	movl   $0xc010f391,0xc(%esp)
c0109ea8:	c0 
c0109ea9:	c7 44 24 08 13 f2 10 	movl   $0xc010f213,0x8(%esp)
c0109eb0:	c0 
c0109eb1:	c7 44 24 04 32 01 00 	movl   $0x132,0x4(%esp)
c0109eb8:	00 
c0109eb9:	c7 04 24 28 f2 10 c0 	movl   $0xc010f228,(%esp)
c0109ec0:	e8 93 83 ff ff       	call   c0102258 <__panic>

        assert(vma1->vm_start == i  && vma1->vm_end == i  + 2);
c0109ec5:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0109ec8:	8b 50 04             	mov    0x4(%eax),%edx
c0109ecb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109ece:	39 c2                	cmp    %eax,%edx
c0109ed0:	75 10                	jne    c0109ee2 <check_vma_struct+0x385>
c0109ed2:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0109ed5:	8b 50 08             	mov    0x8(%eax),%edx
c0109ed8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109edb:	83 c0 02             	add    $0x2,%eax
c0109ede:	39 c2                	cmp    %eax,%edx
c0109ee0:	74 24                	je     c0109f06 <check_vma_struct+0x3a9>
c0109ee2:	c7 44 24 0c a0 f3 10 	movl   $0xc010f3a0,0xc(%esp)
c0109ee9:	c0 
c0109eea:	c7 44 24 08 13 f2 10 	movl   $0xc010f213,0x8(%esp)
c0109ef1:	c0 
c0109ef2:	c7 44 24 04 34 01 00 	movl   $0x134,0x4(%esp)
c0109ef9:	00 
c0109efa:	c7 04 24 28 f2 10 c0 	movl   $0xc010f228,(%esp)
c0109f01:	e8 52 83 ff ff       	call   c0102258 <__panic>
        assert(vma2->vm_start == i  && vma2->vm_end == i  + 2);
c0109f06:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0109f09:	8b 50 04             	mov    0x4(%eax),%edx
c0109f0c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109f0f:	39 c2                	cmp    %eax,%edx
c0109f11:	75 10                	jne    c0109f23 <check_vma_struct+0x3c6>
c0109f13:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0109f16:	8b 50 08             	mov    0x8(%eax),%edx
c0109f19:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109f1c:	83 c0 02             	add    $0x2,%eax
c0109f1f:	39 c2                	cmp    %eax,%edx
c0109f21:	74 24                	je     c0109f47 <check_vma_struct+0x3ea>
c0109f23:	c7 44 24 0c d0 f3 10 	movl   $0xc010f3d0,0xc(%esp)
c0109f2a:	c0 
c0109f2b:	c7 44 24 08 13 f2 10 	movl   $0xc010f213,0x8(%esp)
c0109f32:	c0 
c0109f33:	c7 44 24 04 35 01 00 	movl   $0x135,0x4(%esp)
c0109f3a:	00 
c0109f3b:	c7 04 24 28 f2 10 c0 	movl   $0xc010f228,(%esp)
c0109f42:	e8 11 83 ff ff       	call   c0102258 <__panic>
        struct vma_struct *mmap = le2vma(le, list_link);
        assert(mmap->vm_start == i * 5 && mmap->vm_end == i * 5 + 2);
        le = list_next(le);
    }

    for (i = 5; i <= 5 * step2; i +=5) {
c0109f47:	83 45 f4 05          	addl   $0x5,-0xc(%ebp)
c0109f4b:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0109f4e:	89 d0                	mov    %edx,%eax
c0109f50:	c1 e0 02             	shl    $0x2,%eax
c0109f53:	01 d0                	add    %edx,%eax
c0109f55:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0109f58:	0f 8d 20 fe ff ff    	jge    c0109d7e <check_vma_struct+0x221>

        assert(vma1->vm_start == i  && vma1->vm_end == i  + 2);
        assert(vma2->vm_start == i  && vma2->vm_end == i  + 2);
    }

    for (i =4; i>=0; i--) {
c0109f5e:	c7 45 f4 04 00 00 00 	movl   $0x4,-0xc(%ebp)
c0109f65:	eb 70                	jmp    c0109fd7 <check_vma_struct+0x47a>
        struct vma_struct *vma_below_5= find_vma(mm,i);
c0109f67:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109f6a:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109f6e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109f71:	89 04 24             	mov    %eax,(%esp)
c0109f74:	e8 f2 f4 ff ff       	call   c010946b <find_vma>
c0109f79:	89 45 bc             	mov    %eax,-0x44(%ebp)
        if (vma_below_5 != NULL ) {
c0109f7c:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c0109f80:	74 27                	je     c0109fa9 <check_vma_struct+0x44c>
           cprintf("vma_below_5: i %x, start %x, end %x\n",i, vma_below_5->vm_start, vma_below_5->vm_end); 
c0109f82:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0109f85:	8b 50 08             	mov    0x8(%eax),%edx
c0109f88:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0109f8b:	8b 40 04             	mov    0x4(%eax),%eax
c0109f8e:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0109f92:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109f96:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109f99:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109f9d:	c7 04 24 00 f4 10 c0 	movl   $0xc010f400,(%esp)
c0109fa4:	e8 2d 78 ff ff       	call   c01017d6 <cprintf>
        }
        assert(vma_below_5 == NULL);
c0109fa9:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c0109fad:	74 24                	je     c0109fd3 <check_vma_struct+0x476>
c0109faf:	c7 44 24 0c 25 f4 10 	movl   $0xc010f425,0xc(%esp)
c0109fb6:	c0 
c0109fb7:	c7 44 24 08 13 f2 10 	movl   $0xc010f213,0x8(%esp)
c0109fbe:	c0 
c0109fbf:	c7 44 24 04 3d 01 00 	movl   $0x13d,0x4(%esp)
c0109fc6:	00 
c0109fc7:	c7 04 24 28 f2 10 c0 	movl   $0xc010f228,(%esp)
c0109fce:	e8 85 82 ff ff       	call   c0102258 <__panic>

        assert(vma1->vm_start == i  && vma1->vm_end == i  + 2);
        assert(vma2->vm_start == i  && vma2->vm_end == i  + 2);
    }

    for (i =4; i>=0; i--) {
c0109fd3:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c0109fd7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109fdb:	79 8a                	jns    c0109f67 <check_vma_struct+0x40a>
           cprintf("vma_below_5: i %x, start %x, end %x\n",i, vma_below_5->vm_start, vma_below_5->vm_end); 
        }
        assert(vma_below_5 == NULL);
    }

    mm_destroy(mm);
c0109fdd:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109fe0:	89 04 24             	mov    %eax,(%esp)
c0109fe3:	e8 08 f7 ff ff       	call   c01096f0 <mm_destroy>

//    assert(nr_free_pages_store == nr_free_pages());

    cprintf("check_vma_struct() succeeded!\n");
c0109fe8:	c7 04 24 3c f4 10 c0 	movl   $0xc010f43c,(%esp)
c0109fef:	e8 e2 77 ff ff       	call   c01017d6 <cprintf>
}
c0109ff4:	c9                   	leave  
c0109ff5:	c3                   	ret    

c0109ff6 <check_pgfault>:

struct mm_struct *check_mm_struct;

// check_pgfault - check correctness of pgfault handler
static void
check_pgfault(void) {
c0109ff6:	55                   	push   %ebp
c0109ff7:	89 e5                	mov    %esp,%ebp
c0109ff9:	83 ec 38             	sub    $0x38,%esp
    size_t nr_free_pages_store = nr_free_pages();
c0109ffc:	e8 63 c6 ff ff       	call   c0106664 <nr_free_pages>
c010a001:	89 45 ec             	mov    %eax,-0x14(%ebp)

    check_mm_struct = mm_create();
c010a004:	e8 8e f3 ff ff       	call   c0109397 <mm_create>
c010a009:	a3 ac 30 1a c0       	mov    %eax,0xc01a30ac
    assert(check_mm_struct != NULL);
c010a00e:	a1 ac 30 1a c0       	mov    0xc01a30ac,%eax
c010a013:	85 c0                	test   %eax,%eax
c010a015:	75 24                	jne    c010a03b <check_pgfault+0x45>
c010a017:	c7 44 24 0c 5b f4 10 	movl   $0xc010f45b,0xc(%esp)
c010a01e:	c0 
c010a01f:	c7 44 24 08 13 f2 10 	movl   $0xc010f213,0x8(%esp)
c010a026:	c0 
c010a027:	c7 44 24 04 4f 01 00 	movl   $0x14f,0x4(%esp)
c010a02e:	00 
c010a02f:	c7 04 24 28 f2 10 c0 	movl   $0xc010f228,(%esp)
c010a036:	e8 1d 82 ff ff       	call   c0102258 <__panic>

    struct mm_struct *mm = check_mm_struct;
c010a03b:	a1 ac 30 1a c0       	mov    0xc01a30ac,%eax
c010a040:	89 45 e8             	mov    %eax,-0x18(%ebp)
    pde_t *pgdir = mm->pgdir = boot_pgdir;
c010a043:	8b 15 e4 0e 1a c0    	mov    0xc01a0ee4,%edx
c010a049:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010a04c:	89 50 0c             	mov    %edx,0xc(%eax)
c010a04f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010a052:	8b 40 0c             	mov    0xc(%eax),%eax
c010a055:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    assert(pgdir[0] == 0);
c010a058:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a05b:	8b 00                	mov    (%eax),%eax
c010a05d:	85 c0                	test   %eax,%eax
c010a05f:	74 24                	je     c010a085 <check_pgfault+0x8f>
c010a061:	c7 44 24 0c 73 f4 10 	movl   $0xc010f473,0xc(%esp)
c010a068:	c0 
c010a069:	c7 44 24 08 13 f2 10 	movl   $0xc010f213,0x8(%esp)
c010a070:	c0 
c010a071:	c7 44 24 04 53 01 00 	movl   $0x153,0x4(%esp)
c010a078:	00 
c010a079:	c7 04 24 28 f2 10 c0 	movl   $0xc010f228,(%esp)
c010a080:	e8 d3 81 ff ff       	call   c0102258 <__panic>

    struct vma_struct *vma = vma_create(0, PTSIZE, VM_WRITE);
c010a085:	c7 44 24 08 02 00 00 	movl   $0x2,0x8(%esp)
c010a08c:	00 
c010a08d:	c7 44 24 04 00 00 40 	movl   $0x400000,0x4(%esp)
c010a094:	00 
c010a095:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c010a09c:	e8 8f f3 ff ff       	call   c0109430 <vma_create>
c010a0a1:	89 45 e0             	mov    %eax,-0x20(%ebp)
    assert(vma != NULL);
c010a0a4:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c010a0a8:	75 24                	jne    c010a0ce <check_pgfault+0xd8>
c010a0aa:	c7 44 24 0c 04 f3 10 	movl   $0xc010f304,0xc(%esp)
c010a0b1:	c0 
c010a0b2:	c7 44 24 08 13 f2 10 	movl   $0xc010f213,0x8(%esp)
c010a0b9:	c0 
c010a0ba:	c7 44 24 04 56 01 00 	movl   $0x156,0x4(%esp)
c010a0c1:	00 
c010a0c2:	c7 04 24 28 f2 10 c0 	movl   $0xc010f228,(%esp)
c010a0c9:	e8 8a 81 ff ff       	call   c0102258 <__panic>

    insert_vma_struct(mm, vma);
c010a0ce:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010a0d1:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a0d5:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010a0d8:	89 04 24             	mov    %eax,(%esp)
c010a0db:	e8 e0 f4 ff ff       	call   c01095c0 <insert_vma_struct>

    uintptr_t addr = 0x100;
c010a0e0:	c7 45 dc 00 01 00 00 	movl   $0x100,-0x24(%ebp)
    assert(find_vma(mm, addr) == vma);
c010a0e7:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010a0ea:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a0ee:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010a0f1:	89 04 24             	mov    %eax,(%esp)
c010a0f4:	e8 72 f3 ff ff       	call   c010946b <find_vma>
c010a0f9:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c010a0fc:	74 24                	je     c010a122 <check_pgfault+0x12c>
c010a0fe:	c7 44 24 0c 81 f4 10 	movl   $0xc010f481,0xc(%esp)
c010a105:	c0 
c010a106:	c7 44 24 08 13 f2 10 	movl   $0xc010f213,0x8(%esp)
c010a10d:	c0 
c010a10e:	c7 44 24 04 5b 01 00 	movl   $0x15b,0x4(%esp)
c010a115:	00 
c010a116:	c7 04 24 28 f2 10 c0 	movl   $0xc010f228,(%esp)
c010a11d:	e8 36 81 ff ff       	call   c0102258 <__panic>

    int i, sum = 0;
c010a122:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    for (i = 0; i < 100; i ++) {
c010a129:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010a130:	eb 17                	jmp    c010a149 <check_pgfault+0x153>
        *(char *)(addr + i) = i;
c010a132:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010a135:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010a138:	01 d0                	add    %edx,%eax
c010a13a:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010a13d:	88 10                	mov    %dl,(%eax)
        sum += i;
c010a13f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a142:	01 45 f0             	add    %eax,-0x10(%ebp)

    uintptr_t addr = 0x100;
    assert(find_vma(mm, addr) == vma);

    int i, sum = 0;
    for (i = 0; i < 100; i ++) {
c010a145:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010a149:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
c010a14d:	7e e3                	jle    c010a132 <check_pgfault+0x13c>
        *(char *)(addr + i) = i;
        sum += i;
    }
    for (i = 0; i < 100; i ++) {
c010a14f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010a156:	eb 15                	jmp    c010a16d <check_pgfault+0x177>
        sum -= *(char *)(addr + i);
c010a158:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010a15b:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010a15e:	01 d0                	add    %edx,%eax
c010a160:	0f b6 00             	movzbl (%eax),%eax
c010a163:	0f be c0             	movsbl %al,%eax
c010a166:	29 45 f0             	sub    %eax,-0x10(%ebp)
    int i, sum = 0;
    for (i = 0; i < 100; i ++) {
        *(char *)(addr + i) = i;
        sum += i;
    }
    for (i = 0; i < 100; i ++) {
c010a169:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010a16d:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
c010a171:	7e e5                	jle    c010a158 <check_pgfault+0x162>
        sum -= *(char *)(addr + i);
    }
    assert(sum == 0);
c010a173:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010a177:	74 24                	je     c010a19d <check_pgfault+0x1a7>
c010a179:	c7 44 24 0c 9b f4 10 	movl   $0xc010f49b,0xc(%esp)
c010a180:	c0 
c010a181:	c7 44 24 08 13 f2 10 	movl   $0xc010f213,0x8(%esp)
c010a188:	c0 
c010a189:	c7 44 24 04 65 01 00 	movl   $0x165,0x4(%esp)
c010a190:	00 
c010a191:	c7 04 24 28 f2 10 c0 	movl   $0xc010f228,(%esp)
c010a198:	e8 bb 80 ff ff       	call   c0102258 <__panic>

    page_remove(pgdir, ROUNDDOWN(addr, PGSIZE));
c010a19d:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010a1a0:	89 45 d8             	mov    %eax,-0x28(%ebp)
c010a1a3:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010a1a6:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010a1ab:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a1af:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a1b2:	89 04 24             	mov    %eax,(%esp)
c010a1b5:	e8 94 d1 ff ff       	call   c010734e <page_remove>
    free_page(pa2page(pgdir[0]));
c010a1ba:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a1bd:	8b 00                	mov    (%eax),%eax
c010a1bf:	89 04 24             	mov    %eax,(%esp)
c010a1c2:	e8 81 f1 ff ff       	call   c0109348 <pa2page>
c010a1c7:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010a1ce:	00 
c010a1cf:	89 04 24             	mov    %eax,(%esp)
c010a1d2:	e8 4e c4 ff ff       	call   c0106625 <free_pages>
    pgdir[0] = 0;
c010a1d7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a1da:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    mm->pgdir = NULL;
c010a1e0:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010a1e3:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
    mm_destroy(mm);
c010a1ea:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010a1ed:	89 04 24             	mov    %eax,(%esp)
c010a1f0:	e8 fb f4 ff ff       	call   c01096f0 <mm_destroy>
    check_mm_struct = NULL;
c010a1f5:	c7 05 ac 30 1a c0 00 	movl   $0x0,0xc01a30ac
c010a1fc:	00 00 00 

    assert(nr_free_pages_store == nr_free_pages());
c010a1ff:	e8 60 c4 ff ff       	call   c0106664 <nr_free_pages>
c010a204:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c010a207:	74 24                	je     c010a22d <check_pgfault+0x237>
c010a209:	c7 44 24 0c a4 f4 10 	movl   $0xc010f4a4,0xc(%esp)
c010a210:	c0 
c010a211:	c7 44 24 08 13 f2 10 	movl   $0xc010f213,0x8(%esp)
c010a218:	c0 
c010a219:	c7 44 24 04 6f 01 00 	movl   $0x16f,0x4(%esp)
c010a220:	00 
c010a221:	c7 04 24 28 f2 10 c0 	movl   $0xc010f228,(%esp)
c010a228:	e8 2b 80 ff ff       	call   c0102258 <__panic>

    cprintf("check_pgfault() succeeded!\n");
c010a22d:	c7 04 24 cb f4 10 c0 	movl   $0xc010f4cb,(%esp)
c010a234:	e8 9d 75 ff ff       	call   c01017d6 <cprintf>
}
c010a239:	c9                   	leave  
c010a23a:	c3                   	ret    

c010a23b <do_pgfault>:
 *            was a read (0) or write (1).
 *         -- The U/S flag (bit 2) indicates whether the processor was executing at user mode (1)
 *            or supervisor mode (0) at the time of the exception.
 */
int
do_pgfault(struct mm_struct *mm, uint32_t error_code, uintptr_t addr) {
c010a23b:	55                   	push   %ebp
c010a23c:	89 e5                	mov    %esp,%ebp
c010a23e:	83 ec 38             	sub    $0x38,%esp
    int ret = -E_INVAL;
c010a241:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
    //try to find a vma which include addr
    struct vma_struct *vma = find_vma(mm, addr);
c010a248:	8b 45 10             	mov    0x10(%ebp),%eax
c010a24b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a24f:	8b 45 08             	mov    0x8(%ebp),%eax
c010a252:	89 04 24             	mov    %eax,(%esp)
c010a255:	e8 11 f2 ff ff       	call   c010946b <find_vma>
c010a25a:	89 45 ec             	mov    %eax,-0x14(%ebp)

    pgfault_num++;
c010a25d:	a1 7c 0f 1a c0       	mov    0xc01a0f7c,%eax
c010a262:	83 c0 01             	add    $0x1,%eax
c010a265:	a3 7c 0f 1a c0       	mov    %eax,0xc01a0f7c
    //If the addr is in the range of a mm's vma?
    if (vma == NULL || vma->vm_start > addr) {
c010a26a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010a26e:	74 0b                	je     c010a27b <do_pgfault+0x40>
c010a270:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a273:	8b 40 04             	mov    0x4(%eax),%eax
c010a276:	3b 45 10             	cmp    0x10(%ebp),%eax
c010a279:	76 18                	jbe    c010a293 <do_pgfault+0x58>
        cprintf("not valid addr %x, and  can not find it in vma\n", addr);
c010a27b:	8b 45 10             	mov    0x10(%ebp),%eax
c010a27e:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a282:	c7 04 24 e8 f4 10 c0 	movl   $0xc010f4e8,(%esp)
c010a289:	e8 48 75 ff ff       	call   c01017d6 <cprintf>
        goto failed;
c010a28e:	e9 f1 01 00 00       	jmp    c010a484 <do_pgfault+0x249>
    }
    //check the error_code
    switch (error_code & 3) {
c010a293:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a296:	83 e0 03             	and    $0x3,%eax
c010a299:	85 c0                	test   %eax,%eax
c010a29b:	74 36                	je     c010a2d3 <do_pgfault+0x98>
c010a29d:	83 f8 01             	cmp    $0x1,%eax
c010a2a0:	74 20                	je     c010a2c2 <do_pgfault+0x87>
    default:
            /* error code flag : default is 3 ( W/R=1, P=1): write, present */
    case 2: /* error code flag : (W/R=1, P=0): write, not present */
        if (!(vma->vm_flags & VM_WRITE)) {
c010a2a2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a2a5:	8b 40 0c             	mov    0xc(%eax),%eax
c010a2a8:	83 e0 02             	and    $0x2,%eax
c010a2ab:	85 c0                	test   %eax,%eax
c010a2ad:	75 11                	jne    c010a2c0 <do_pgfault+0x85>
            cprintf("do_pgfault failed: error code flag = write AND not present, but the addr's vma cannot write\n");
c010a2af:	c7 04 24 18 f5 10 c0 	movl   $0xc010f518,(%esp)
c010a2b6:	e8 1b 75 ff ff       	call   c01017d6 <cprintf>
            goto failed;
c010a2bb:	e9 c4 01 00 00       	jmp    c010a484 <do_pgfault+0x249>
        }
        break;
c010a2c0:	eb 2f                	jmp    c010a2f1 <do_pgfault+0xb6>
    case 1: /* error code flag : (W/R=0, P=1): read, present */
        cprintf("do_pgfault failed: error code flag = read AND present\n");
c010a2c2:	c7 04 24 78 f5 10 c0 	movl   $0xc010f578,(%esp)
c010a2c9:	e8 08 75 ff ff       	call   c01017d6 <cprintf>
        goto failed;
c010a2ce:	e9 b1 01 00 00       	jmp    c010a484 <do_pgfault+0x249>
    case 0: /* error code flag : (W/R=0, P=0): read, not present */
        if (!(vma->vm_flags & (VM_READ | VM_EXEC))) {
c010a2d3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a2d6:	8b 40 0c             	mov    0xc(%eax),%eax
c010a2d9:	83 e0 05             	and    $0x5,%eax
c010a2dc:	85 c0                	test   %eax,%eax
c010a2de:	75 11                	jne    c010a2f1 <do_pgfault+0xb6>
            cprintf("do_pgfault failed: error code flag = read AND not present, but the addr's vma cannot read or exec\n");
c010a2e0:	c7 04 24 b0 f5 10 c0 	movl   $0xc010f5b0,(%esp)
c010a2e7:	e8 ea 74 ff ff       	call   c01017d6 <cprintf>
            goto failed;
c010a2ec:	e9 93 01 00 00       	jmp    c010a484 <do_pgfault+0x249>
     *    (write an non_existed addr && addr is writable) OR
     *    (read  an non_existed addr && addr is readable)
     * THEN
     *    continue process
     */
    uint32_t perm = PTE_U;
c010a2f1:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
    if (vma->vm_flags & VM_WRITE) {
c010a2f8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a2fb:	8b 40 0c             	mov    0xc(%eax),%eax
c010a2fe:	83 e0 02             	and    $0x2,%eax
c010a301:	85 c0                	test   %eax,%eax
c010a303:	74 04                	je     c010a309 <do_pgfault+0xce>
        perm |= PTE_W;
c010a305:	83 4d f0 02          	orl    $0x2,-0x10(%ebp)
    }
    addr = ROUNDDOWN(addr, PGSIZE);
c010a309:	8b 45 10             	mov    0x10(%ebp),%eax
c010a30c:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010a30f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010a312:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010a317:	89 45 10             	mov    %eax,0x10(%ebp)

    ret = -E_NO_MEM;
c010a31a:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

    pte_t *ptep=NULL;
c010a321:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
        }
   }
#endif
    // try to find a pte, if pte's PT(Page Table) isn't existed, then create a PT.
    // (notice the 3th parameter '1')
    if ((ptep = get_pte(mm->pgdir, addr, 1)) == NULL) {
c010a328:	8b 45 08             	mov    0x8(%ebp),%eax
c010a32b:	8b 40 0c             	mov    0xc(%eax),%eax
c010a32e:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c010a335:	00 
c010a336:	8b 55 10             	mov    0x10(%ebp),%edx
c010a339:	89 54 24 04          	mov    %edx,0x4(%esp)
c010a33d:	89 04 24             	mov    %eax,(%esp)
c010a340:	e8 f9 c9 ff ff       	call   c0106d3e <get_pte>
c010a345:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010a348:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010a34c:	75 11                	jne    c010a35f <do_pgfault+0x124>
        cprintf("get_pte in do_pgfault failed\n");
c010a34e:	c7 04 24 13 f6 10 c0 	movl   $0xc010f613,(%esp)
c010a355:	e8 7c 74 ff ff       	call   c01017d6 <cprintf>
        goto failed;
c010a35a:	e9 25 01 00 00       	jmp    c010a484 <do_pgfault+0x249>
    }
    
    if (*ptep == 0) { // if the phy addr isn't exist, then alloc a page & map the phy addr with logical addr
c010a35f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a362:	8b 00                	mov    (%eax),%eax
c010a364:	85 c0                	test   %eax,%eax
c010a366:	75 35                	jne    c010a39d <do_pgfault+0x162>
        if (pgdir_alloc_page(mm->pgdir, addr, perm) == NULL) {
c010a368:	8b 45 08             	mov    0x8(%ebp),%eax
c010a36b:	8b 40 0c             	mov    0xc(%eax),%eax
c010a36e:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010a371:	89 54 24 08          	mov    %edx,0x8(%esp)
c010a375:	8b 55 10             	mov    0x10(%ebp),%edx
c010a378:	89 54 24 04          	mov    %edx,0x4(%esp)
c010a37c:	89 04 24             	mov    %eax,(%esp)
c010a37f:	e8 24 d1 ff ff       	call   c01074a8 <pgdir_alloc_page>
c010a384:	85 c0                	test   %eax,%eax
c010a386:	0f 85 f1 00 00 00    	jne    c010a47d <do_pgfault+0x242>
            cprintf("pgdir_alloc_page in do_pgfault failed\n");
c010a38c:	c7 04 24 34 f6 10 c0 	movl   $0xc010f634,(%esp)
c010a393:	e8 3e 74 ff ff       	call   c01017d6 <cprintf>
            goto failed;
c010a398:	e9 e7 00 00 00       	jmp    c010a484 <do_pgfault+0x249>
        }
    }
    else {
        struct Page *page=NULL;
c010a39d:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
        cprintf("do pgfault: ptep %x, pte %x\n",ptep, *ptep);
c010a3a4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a3a7:	8b 00                	mov    (%eax),%eax
c010a3a9:	89 44 24 08          	mov    %eax,0x8(%esp)
c010a3ad:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a3b0:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a3b4:	c7 04 24 5b f6 10 c0 	movl   $0xc010f65b,(%esp)
c010a3bb:	e8 16 74 ff ff       	call   c01017d6 <cprintf>
        if (*ptep & PTE_P) {
c010a3c0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a3c3:	8b 00                	mov    (%eax),%eax
c010a3c5:	83 e0 01             	and    $0x1,%eax
c010a3c8:	85 c0                	test   %eax,%eax
c010a3ca:	74 1c                	je     c010a3e8 <do_pgfault+0x1ad>
            //if process write to this existed readonly page (PTE_P means existed), then should be here now.
            //we can implement the delayed memory space copy for fork child process (AKA copy on write, COW).
            //we didn't implement now, we will do it in future.
            panic("error write a non-writable pte");
c010a3cc:	c7 44 24 08 78 f6 10 	movl   $0xc010f678,0x8(%esp)
c010a3d3:	c0 
c010a3d4:	c7 44 24 04 ff 01 00 	movl   $0x1ff,0x4(%esp)
c010a3db:	00 
c010a3dc:	c7 04 24 28 f2 10 c0 	movl   $0xc010f228,(%esp)
c010a3e3:	e8 70 7e ff ff       	call   c0102258 <__panic>
            //page = pte2page(*ptep);
        } else{
           // if this pte is a swap entry, then load data from disk to a page with phy addr
           // and call page_insert to map the phy addr with logical addr
           if(swap_init_ok) {               
c010a3e8:	a1 70 0f 1a c0       	mov    0xc01a0f70,%eax
c010a3ed:	85 c0                	test   %eax,%eax
c010a3ef:	74 30                	je     c010a421 <do_pgfault+0x1e6>
               if ((ret = swap_in(mm, addr, &page)) != 0) {
c010a3f1:	8d 45 e0             	lea    -0x20(%ebp),%eax
c010a3f4:	89 44 24 08          	mov    %eax,0x8(%esp)
c010a3f8:	8b 45 10             	mov    0x10(%ebp),%eax
c010a3fb:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a3ff:	8b 45 08             	mov    0x8(%ebp),%eax
c010a402:	89 04 24             	mov    %eax,(%esp)
c010a405:	e8 41 e1 ff ff       	call   c010854b <swap_in>
c010a40a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a40d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a411:	74 26                	je     c010a439 <do_pgfault+0x1fe>
                   cprintf("swap_in in do_pgfault failed\n");
c010a413:	c7 04 24 97 f6 10 c0 	movl   $0xc010f697,(%esp)
c010a41a:	e8 b7 73 ff ff       	call   c01017d6 <cprintf>
                   goto failed;
c010a41f:	eb 63                	jmp    c010a484 <do_pgfault+0x249>
               }    

           }  
           else {
            cprintf("no swap_init_ok but ptep is %x, failed\n",*ptep);
c010a421:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a424:	8b 00                	mov    (%eax),%eax
c010a426:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a42a:	c7 04 24 b8 f6 10 c0 	movl   $0xc010f6b8,(%esp)
c010a431:	e8 a0 73 ff ff       	call   c01017d6 <cprintf>
            goto failed;
c010a436:	90                   	nop
c010a437:	eb 4b                	jmp    c010a484 <do_pgfault+0x249>
           }
       } 
       page_insert(mm->pgdir, page, addr, perm);
c010a439:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010a43c:	8b 45 08             	mov    0x8(%ebp),%eax
c010a43f:	8b 40 0c             	mov    0xc(%eax),%eax
c010a442:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c010a445:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c010a449:	8b 4d 10             	mov    0x10(%ebp),%ecx
c010a44c:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c010a450:	89 54 24 04          	mov    %edx,0x4(%esp)
c010a454:	89 04 24             	mov    %eax,(%esp)
c010a457:	e8 36 cf ff ff       	call   c0107392 <page_insert>
       swap_map_swappable(mm, addr, page, 1);
c010a45c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010a45f:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c010a466:	00 
c010a467:	89 44 24 08          	mov    %eax,0x8(%esp)
c010a46b:	8b 45 10             	mov    0x10(%ebp),%eax
c010a46e:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a472:	8b 45 08             	mov    0x8(%ebp),%eax
c010a475:	89 04 24             	mov    %eax,(%esp)
c010a478:	e8 05 df ff ff       	call   c0108382 <swap_map_swappable>
   }
   ret = 0;
c010a47d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
failed:
    return ret;
c010a484:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010a487:	c9                   	leave  
c010a488:	c3                   	ret    

c010a489 <user_mem_check>:

bool
user_mem_check(struct mm_struct *mm, uintptr_t addr, size_t len, bool write) {
c010a489:	55                   	push   %ebp
c010a48a:	89 e5                	mov    %esp,%ebp
c010a48c:	83 ec 18             	sub    $0x18,%esp
    if (mm != NULL) {
c010a48f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010a493:	0f 84 e0 00 00 00    	je     c010a579 <user_mem_check+0xf0>
        if (!USER_ACCESS(addr, addr + len)) {
c010a499:	81 7d 0c ff ff 1f 00 	cmpl   $0x1fffff,0xc(%ebp)
c010a4a0:	76 1c                	jbe    c010a4be <user_mem_check+0x35>
c010a4a2:	8b 45 10             	mov    0x10(%ebp),%eax
c010a4a5:	8b 55 0c             	mov    0xc(%ebp),%edx
c010a4a8:	01 d0                	add    %edx,%eax
c010a4aa:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010a4ad:	76 0f                	jbe    c010a4be <user_mem_check+0x35>
c010a4af:	8b 45 10             	mov    0x10(%ebp),%eax
c010a4b2:	8b 55 0c             	mov    0xc(%ebp),%edx
c010a4b5:	01 d0                	add    %edx,%eax
c010a4b7:	3d 00 00 00 b0       	cmp    $0xb0000000,%eax
c010a4bc:	76 0a                	jbe    c010a4c8 <user_mem_check+0x3f>
            return 0;
c010a4be:	b8 00 00 00 00       	mov    $0x0,%eax
c010a4c3:	e9 e2 00 00 00       	jmp    c010a5aa <user_mem_check+0x121>
        }
        struct vma_struct *vma;
        uintptr_t start = addr, end = addr + len;
c010a4c8:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a4cb:	89 45 fc             	mov    %eax,-0x4(%ebp)
c010a4ce:	8b 45 10             	mov    0x10(%ebp),%eax
c010a4d1:	8b 55 0c             	mov    0xc(%ebp),%edx
c010a4d4:	01 d0                	add    %edx,%eax
c010a4d6:	89 45 f8             	mov    %eax,-0x8(%ebp)
        while (start < end) {
c010a4d9:	e9 88 00 00 00       	jmp    c010a566 <user_mem_check+0xdd>
            if ((vma = find_vma(mm, start)) == NULL || start < vma->vm_start) {
c010a4de:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a4e1:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a4e5:	8b 45 08             	mov    0x8(%ebp),%eax
c010a4e8:	89 04 24             	mov    %eax,(%esp)
c010a4eb:	e8 7b ef ff ff       	call   c010946b <find_vma>
c010a4f0:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a4f3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a4f7:	74 0b                	je     c010a504 <user_mem_check+0x7b>
c010a4f9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a4fc:	8b 40 04             	mov    0x4(%eax),%eax
c010a4ff:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c010a502:	76 0a                	jbe    c010a50e <user_mem_check+0x85>
                return 0;
c010a504:	b8 00 00 00 00       	mov    $0x0,%eax
c010a509:	e9 9c 00 00 00       	jmp    c010a5aa <user_mem_check+0x121>
            }
            if (!(vma->vm_flags & ((write) ? VM_WRITE : VM_READ))) {
c010a50e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a511:	8b 50 0c             	mov    0xc(%eax),%edx
c010a514:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c010a518:	74 07                	je     c010a521 <user_mem_check+0x98>
c010a51a:	b8 02 00 00 00       	mov    $0x2,%eax
c010a51f:	eb 05                	jmp    c010a526 <user_mem_check+0x9d>
c010a521:	b8 01 00 00 00       	mov    $0x1,%eax
c010a526:	21 d0                	and    %edx,%eax
c010a528:	85 c0                	test   %eax,%eax
c010a52a:	75 07                	jne    c010a533 <user_mem_check+0xaa>
                return 0;
c010a52c:	b8 00 00 00 00       	mov    $0x0,%eax
c010a531:	eb 77                	jmp    c010a5aa <user_mem_check+0x121>
            }
            if (write && (vma->vm_flags & VM_STACK)) {
c010a533:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c010a537:	74 24                	je     c010a55d <user_mem_check+0xd4>
c010a539:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a53c:	8b 40 0c             	mov    0xc(%eax),%eax
c010a53f:	83 e0 08             	and    $0x8,%eax
c010a542:	85 c0                	test   %eax,%eax
c010a544:	74 17                	je     c010a55d <user_mem_check+0xd4>
                if (start < vma->vm_start + PGSIZE) { //check stack start & size
c010a546:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a549:	8b 40 04             	mov    0x4(%eax),%eax
c010a54c:	05 00 10 00 00       	add    $0x1000,%eax
c010a551:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c010a554:	76 07                	jbe    c010a55d <user_mem_check+0xd4>
                    return 0;
c010a556:	b8 00 00 00 00       	mov    $0x0,%eax
c010a55b:	eb 4d                	jmp    c010a5aa <user_mem_check+0x121>
                }
            }
            start = vma->vm_end;
c010a55d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a560:	8b 40 08             	mov    0x8(%eax),%eax
c010a563:	89 45 fc             	mov    %eax,-0x4(%ebp)
        if (!USER_ACCESS(addr, addr + len)) {
            return 0;
        }
        struct vma_struct *vma;
        uintptr_t start = addr, end = addr + len;
        while (start < end) {
c010a566:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a569:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c010a56c:	0f 82 6c ff ff ff    	jb     c010a4de <user_mem_check+0x55>
                    return 0;
                }
            }
            start = vma->vm_end;
        }
        return 1;
c010a572:	b8 01 00 00 00       	mov    $0x1,%eax
c010a577:	eb 31                	jmp    c010a5aa <user_mem_check+0x121>
    }
    return KERN_ACCESS(addr, addr + len);
c010a579:	81 7d 0c ff ff ff bf 	cmpl   $0xbfffffff,0xc(%ebp)
c010a580:	76 23                	jbe    c010a5a5 <user_mem_check+0x11c>
c010a582:	8b 45 10             	mov    0x10(%ebp),%eax
c010a585:	8b 55 0c             	mov    0xc(%ebp),%edx
c010a588:	01 d0                	add    %edx,%eax
c010a58a:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010a58d:	76 16                	jbe    c010a5a5 <user_mem_check+0x11c>
c010a58f:	8b 45 10             	mov    0x10(%ebp),%eax
c010a592:	8b 55 0c             	mov    0xc(%ebp),%edx
c010a595:	01 d0                	add    %edx,%eax
c010a597:	3d 00 00 00 f8       	cmp    $0xf8000000,%eax
c010a59c:	77 07                	ja     c010a5a5 <user_mem_check+0x11c>
c010a59e:	b8 01 00 00 00       	mov    $0x1,%eax
c010a5a3:	eb 05                	jmp    c010a5aa <user_mem_check+0x121>
c010a5a5:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010a5aa:	c9                   	leave  
c010a5ab:	c3                   	ret    

c010a5ac <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c010a5ac:	55                   	push   %ebp
c010a5ad:	89 e5                	mov    %esp,%ebp
    return page - pages;
c010a5af:	8b 55 08             	mov    0x8(%ebp),%edx
c010a5b2:	a1 d0 2f 1a c0       	mov    0xc01a2fd0,%eax
c010a5b7:	29 c2                	sub    %eax,%edx
c010a5b9:	89 d0                	mov    %edx,%eax
c010a5bb:	c1 f8 02             	sar    $0x2,%eax
c010a5be:	69 c0 39 8e e3 38    	imul   $0x38e38e39,%eax,%eax
}
c010a5c4:	5d                   	pop    %ebp
c010a5c5:	c3                   	ret    

c010a5c6 <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c010a5c6:	55                   	push   %ebp
c010a5c7:	89 e5                	mov    %esp,%ebp
c010a5c9:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c010a5cc:	8b 45 08             	mov    0x8(%ebp),%eax
c010a5cf:	89 04 24             	mov    %eax,(%esp)
c010a5d2:	e8 d5 ff ff ff       	call   c010a5ac <page2ppn>
c010a5d7:	c1 e0 0c             	shl    $0xc,%eax
}
c010a5da:	c9                   	leave  
c010a5db:	c3                   	ret    

c010a5dc <page2kva>:
    }
    return &pages[PPN(pa)];
}

static inline void *
page2kva(struct Page *page) {
c010a5dc:	55                   	push   %ebp
c010a5dd:	89 e5                	mov    %esp,%ebp
c010a5df:	83 ec 28             	sub    $0x28,%esp
    return KADDR(page2pa(page));
c010a5e2:	8b 45 08             	mov    0x8(%ebp),%eax
c010a5e5:	89 04 24             	mov    %eax,(%esp)
c010a5e8:	e8 d9 ff ff ff       	call   c010a5c6 <page2pa>
c010a5ed:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a5f0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a5f3:	c1 e8 0c             	shr    $0xc,%eax
c010a5f6:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010a5f9:	a1 e0 0e 1a c0       	mov    0xc01a0ee0,%eax
c010a5fe:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c010a601:	72 23                	jb     c010a626 <page2kva+0x4a>
c010a603:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a606:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010a60a:	c7 44 24 08 e0 f6 10 	movl   $0xc010f6e0,0x8(%esp)
c010a611:	c0 
c010a612:	c7 44 24 04 67 00 00 	movl   $0x67,0x4(%esp)
c010a619:	00 
c010a61a:	c7 04 24 03 f7 10 c0 	movl   $0xc010f703,(%esp)
c010a621:	e8 32 7c ff ff       	call   c0102258 <__panic>
c010a626:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a629:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c010a62e:	c9                   	leave  
c010a62f:	c3                   	ret    

c010a630 <swapfs_init>:
#include <ide.h>
#include <pmm.h>
#include <assert.h>

void
swapfs_init(void) {
c010a630:	55                   	push   %ebp
c010a631:	89 e5                	mov    %esp,%ebp
c010a633:	83 ec 18             	sub    $0x18,%esp
    static_assert((PGSIZE % SECTSIZE) == 0);
    if (!ide_device_valid(SWAP_DEV_NO)) {
c010a636:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010a63d:	e8 66 89 ff ff       	call   c0102fa8 <ide_device_valid>
c010a642:	85 c0                	test   %eax,%eax
c010a644:	75 1c                	jne    c010a662 <swapfs_init+0x32>
        panic("swap fs isn't available.\n");
c010a646:	c7 44 24 08 11 f7 10 	movl   $0xc010f711,0x8(%esp)
c010a64d:	c0 
c010a64e:	c7 44 24 04 0d 00 00 	movl   $0xd,0x4(%esp)
c010a655:	00 
c010a656:	c7 04 24 2b f7 10 c0 	movl   $0xc010f72b,(%esp)
c010a65d:	e8 f6 7b ff ff       	call   c0102258 <__panic>
    }
    max_swap_offset = ide_device_size(SWAP_DEV_NO) / (PGSIZE / SECTSIZE);
c010a662:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010a669:	e8 79 89 ff ff       	call   c0102fe7 <ide_device_size>
c010a66e:	c1 e8 03             	shr    $0x3,%eax
c010a671:	a3 7c 30 1a c0       	mov    %eax,0xc01a307c
}
c010a676:	c9                   	leave  
c010a677:	c3                   	ret    

c010a678 <swapfs_read>:

int
swapfs_read(swap_entry_t entry, struct Page *page) {
c010a678:	55                   	push   %ebp
c010a679:	89 e5                	mov    %esp,%ebp
c010a67b:	83 ec 28             	sub    $0x28,%esp
    return ide_read_secs(SWAP_DEV_NO, swap_offset(entry) * PAGE_NSECT, page2kva(page), PAGE_NSECT);
c010a67e:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a681:	89 04 24             	mov    %eax,(%esp)
c010a684:	e8 53 ff ff ff       	call   c010a5dc <page2kva>
c010a689:	8b 55 08             	mov    0x8(%ebp),%edx
c010a68c:	c1 ea 08             	shr    $0x8,%edx
c010a68f:	89 55 f4             	mov    %edx,-0xc(%ebp)
c010a692:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a696:	74 0b                	je     c010a6a3 <swapfs_read+0x2b>
c010a698:	8b 15 7c 30 1a c0    	mov    0xc01a307c,%edx
c010a69e:	39 55 f4             	cmp    %edx,-0xc(%ebp)
c010a6a1:	72 23                	jb     c010a6c6 <swapfs_read+0x4e>
c010a6a3:	8b 45 08             	mov    0x8(%ebp),%eax
c010a6a6:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010a6aa:	c7 44 24 08 3c f7 10 	movl   $0xc010f73c,0x8(%esp)
c010a6b1:	c0 
c010a6b2:	c7 44 24 04 14 00 00 	movl   $0x14,0x4(%esp)
c010a6b9:	00 
c010a6ba:	c7 04 24 2b f7 10 c0 	movl   $0xc010f72b,(%esp)
c010a6c1:	e8 92 7b ff ff       	call   c0102258 <__panic>
c010a6c6:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010a6c9:	c1 e2 03             	shl    $0x3,%edx
c010a6cc:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
c010a6d3:	00 
c010a6d4:	89 44 24 08          	mov    %eax,0x8(%esp)
c010a6d8:	89 54 24 04          	mov    %edx,0x4(%esp)
c010a6dc:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010a6e3:	e8 3e 89 ff ff       	call   c0103026 <ide_read_secs>
}
c010a6e8:	c9                   	leave  
c010a6e9:	c3                   	ret    

c010a6ea <swapfs_write>:

int
swapfs_write(swap_entry_t entry, struct Page *page) {
c010a6ea:	55                   	push   %ebp
c010a6eb:	89 e5                	mov    %esp,%ebp
c010a6ed:	83 ec 28             	sub    $0x28,%esp
    return ide_write_secs(SWAP_DEV_NO, swap_offset(entry) * PAGE_NSECT, page2kva(page), PAGE_NSECT);
c010a6f0:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a6f3:	89 04 24             	mov    %eax,(%esp)
c010a6f6:	e8 e1 fe ff ff       	call   c010a5dc <page2kva>
c010a6fb:	8b 55 08             	mov    0x8(%ebp),%edx
c010a6fe:	c1 ea 08             	shr    $0x8,%edx
c010a701:	89 55 f4             	mov    %edx,-0xc(%ebp)
c010a704:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a708:	74 0b                	je     c010a715 <swapfs_write+0x2b>
c010a70a:	8b 15 7c 30 1a c0    	mov    0xc01a307c,%edx
c010a710:	39 55 f4             	cmp    %edx,-0xc(%ebp)
c010a713:	72 23                	jb     c010a738 <swapfs_write+0x4e>
c010a715:	8b 45 08             	mov    0x8(%ebp),%eax
c010a718:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010a71c:	c7 44 24 08 3c f7 10 	movl   $0xc010f73c,0x8(%esp)
c010a723:	c0 
c010a724:	c7 44 24 04 19 00 00 	movl   $0x19,0x4(%esp)
c010a72b:	00 
c010a72c:	c7 04 24 2b f7 10 c0 	movl   $0xc010f72b,(%esp)
c010a733:	e8 20 7b ff ff       	call   c0102258 <__panic>
c010a738:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010a73b:	c1 e2 03             	shl    $0x3,%edx
c010a73e:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
c010a745:	00 
c010a746:	89 44 24 08          	mov    %eax,0x8(%esp)
c010a74a:	89 54 24 04          	mov    %edx,0x4(%esp)
c010a74e:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010a755:	e8 0e 8b ff ff       	call   c0103268 <ide_write_secs>
}
c010a75a:	c9                   	leave  
c010a75b:	c3                   	ret    

c010a75c <kernel_thread_entry>:
.text
.globl kernel_thread_entry
kernel_thread_entry:        # void kernel_thread(void)

    pushl %edx              # push arg
c010a75c:	52                   	push   %edx
    call *%ebx              # call fn
c010a75d:	ff d3                	call   *%ebx

    pushl %eax              # save the return value of fn(arg)
c010a75f:	50                   	push   %eax
    call do_exit            # call do_exit to terminate current thread
c010a760:	e8 7c 0c 00 00       	call   c010b3e1 <do_exit>

c010a765 <test_and_set_bit>:
 * test_and_set_bit - Atomically set a bit and return its old value
 * @nr:     the bit to set
 * @addr:   the address to count from
 * */
static inline bool
test_and_set_bit(int nr, volatile void *addr) {
c010a765:	55                   	push   %ebp
c010a766:	89 e5                	mov    %esp,%ebp
c010a768:	83 ec 10             	sub    $0x10,%esp
    int oldbit;
    asm volatile ("btsl %2, %1; sbbl %0, %0" : "=r" (oldbit), "=m" (*(volatile long *)addr) : "Ir" (nr) : "memory");
c010a76b:	8b 55 0c             	mov    0xc(%ebp),%edx
c010a76e:	8b 45 08             	mov    0x8(%ebp),%eax
c010a771:	0f ab 02             	bts    %eax,(%edx)
c010a774:	19 c0                	sbb    %eax,%eax
c010a776:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return oldbit != 0;
c010a779:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c010a77d:	0f 95 c0             	setne  %al
c010a780:	0f b6 c0             	movzbl %al,%eax
}
c010a783:	c9                   	leave  
c010a784:	c3                   	ret    

c010a785 <test_and_clear_bit>:
 * test_and_clear_bit - Atomically clear a bit and return its old value
 * @nr:     the bit to clear
 * @addr:   the address to count from
 * */
static inline bool
test_and_clear_bit(int nr, volatile void *addr) {
c010a785:	55                   	push   %ebp
c010a786:	89 e5                	mov    %esp,%ebp
c010a788:	83 ec 10             	sub    $0x10,%esp
    int oldbit;
    asm volatile ("btrl %2, %1; sbbl %0, %0" : "=r" (oldbit), "=m" (*(volatile long *)addr) : "Ir" (nr) : "memory");
c010a78b:	8b 55 0c             	mov    0xc(%ebp),%edx
c010a78e:	8b 45 08             	mov    0x8(%ebp),%eax
c010a791:	0f b3 02             	btr    %eax,(%edx)
c010a794:	19 c0                	sbb    %eax,%eax
c010a796:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return oldbit != 0;
c010a799:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c010a79d:	0f 95 c0             	setne  %al
c010a7a0:	0f b6 c0             	movzbl %al,%eax
}
c010a7a3:	c9                   	leave  
c010a7a4:	c3                   	ret    

c010a7a5 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c010a7a5:	55                   	push   %ebp
c010a7a6:	89 e5                	mov    %esp,%ebp
c010a7a8:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c010a7ab:	9c                   	pushf  
c010a7ac:	58                   	pop    %eax
c010a7ad:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c010a7b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c010a7b3:	25 00 02 00 00       	and    $0x200,%eax
c010a7b8:	85 c0                	test   %eax,%eax
c010a7ba:	74 0c                	je     c010a7c8 <__intr_save+0x23>
        intr_disable();
c010a7bc:	e8 ef 8c ff ff       	call   c01034b0 <intr_disable>
        return 1;
c010a7c1:	b8 01 00 00 00       	mov    $0x1,%eax
c010a7c6:	eb 05                	jmp    c010a7cd <__intr_save+0x28>
    }
    return 0;
c010a7c8:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010a7cd:	c9                   	leave  
c010a7ce:	c3                   	ret    

c010a7cf <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c010a7cf:	55                   	push   %ebp
c010a7d0:	89 e5                	mov    %esp,%ebp
c010a7d2:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c010a7d5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010a7d9:	74 05                	je     c010a7e0 <__intr_restore+0x11>
        intr_enable();
c010a7db:	e8 ca 8c ff ff       	call   c01034aa <intr_enable>
    }
}
c010a7e0:	c9                   	leave  
c010a7e1:	c3                   	ret    

c010a7e2 <try_lock>:
lock_init(lock_t *lock) {
    *lock = 0;
}

static inline bool
try_lock(lock_t *lock) {
c010a7e2:	55                   	push   %ebp
c010a7e3:	89 e5                	mov    %esp,%ebp
c010a7e5:	83 ec 08             	sub    $0x8,%esp
    return !test_and_set_bit(0, lock);
c010a7e8:	8b 45 08             	mov    0x8(%ebp),%eax
c010a7eb:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a7ef:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c010a7f6:	e8 6a ff ff ff       	call   c010a765 <test_and_set_bit>
c010a7fb:	85 c0                	test   %eax,%eax
c010a7fd:	0f 94 c0             	sete   %al
c010a800:	0f b6 c0             	movzbl %al,%eax
}
c010a803:	c9                   	leave  
c010a804:	c3                   	ret    

c010a805 <lock>:

static inline void
lock(lock_t *lock) {
c010a805:	55                   	push   %ebp
c010a806:	89 e5                	mov    %esp,%ebp
c010a808:	83 ec 18             	sub    $0x18,%esp
    while (!try_lock(lock)) {
c010a80b:	eb 05                	jmp    c010a812 <lock+0xd>
        schedule();
c010a80d:	e8 ca 1d 00 00       	call   c010c5dc <schedule>
    return !test_and_set_bit(0, lock);
}

static inline void
lock(lock_t *lock) {
    while (!try_lock(lock)) {
c010a812:	8b 45 08             	mov    0x8(%ebp),%eax
c010a815:	89 04 24             	mov    %eax,(%esp)
c010a818:	e8 c5 ff ff ff       	call   c010a7e2 <try_lock>
c010a81d:	85 c0                	test   %eax,%eax
c010a81f:	74 ec                	je     c010a80d <lock+0x8>
        schedule();
    }
}
c010a821:	c9                   	leave  
c010a822:	c3                   	ret    

c010a823 <unlock>:

static inline void
unlock(lock_t *lock) {
c010a823:	55                   	push   %ebp
c010a824:	89 e5                	mov    %esp,%ebp
c010a826:	83 ec 18             	sub    $0x18,%esp
    if (!test_and_clear_bit(0, lock)) {
c010a829:	8b 45 08             	mov    0x8(%ebp),%eax
c010a82c:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a830:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c010a837:	e8 49 ff ff ff       	call   c010a785 <test_and_clear_bit>
c010a83c:	85 c0                	test   %eax,%eax
c010a83e:	75 1c                	jne    c010a85c <unlock+0x39>
        panic("Unlock failed.\n");
c010a840:	c7 44 24 08 5c f7 10 	movl   $0xc010f75c,0x8(%esp)
c010a847:	c0 
c010a848:	c7 44 24 04 34 00 00 	movl   $0x34,0x4(%esp)
c010a84f:	00 
c010a850:	c7 04 24 6c f7 10 c0 	movl   $0xc010f76c,(%esp)
c010a857:	e8 fc 79 ff ff       	call   c0102258 <__panic>
    }
}
c010a85c:	c9                   	leave  
c010a85d:	c3                   	ret    

c010a85e <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c010a85e:	55                   	push   %ebp
c010a85f:	89 e5                	mov    %esp,%ebp
    return page - pages;
c010a861:	8b 55 08             	mov    0x8(%ebp),%edx
c010a864:	a1 d0 2f 1a c0       	mov    0xc01a2fd0,%eax
c010a869:	29 c2                	sub    %eax,%edx
c010a86b:	89 d0                	mov    %edx,%eax
c010a86d:	c1 f8 02             	sar    $0x2,%eax
c010a870:	69 c0 39 8e e3 38    	imul   $0x38e38e39,%eax,%eax
}
c010a876:	5d                   	pop    %ebp
c010a877:	c3                   	ret    

c010a878 <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c010a878:	55                   	push   %ebp
c010a879:	89 e5                	mov    %esp,%ebp
c010a87b:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c010a87e:	8b 45 08             	mov    0x8(%ebp),%eax
c010a881:	89 04 24             	mov    %eax,(%esp)
c010a884:	e8 d5 ff ff ff       	call   c010a85e <page2ppn>
c010a889:	c1 e0 0c             	shl    $0xc,%eax
}
c010a88c:	c9                   	leave  
c010a88d:	c3                   	ret    

c010a88e <pa2page>:

static inline struct Page *
pa2page(uintptr_t pa) {
c010a88e:	55                   	push   %ebp
c010a88f:	89 e5                	mov    %esp,%ebp
c010a891:	83 ec 18             	sub    $0x18,%esp
    if (PPN(pa) >= npage) {
c010a894:	8b 45 08             	mov    0x8(%ebp),%eax
c010a897:	c1 e8 0c             	shr    $0xc,%eax
c010a89a:	89 c2                	mov    %eax,%edx
c010a89c:	a1 e0 0e 1a c0       	mov    0xc01a0ee0,%eax
c010a8a1:	39 c2                	cmp    %eax,%edx
c010a8a3:	72 1c                	jb     c010a8c1 <pa2page+0x33>
        panic("pa2page called with invalid pa");
c010a8a5:	c7 44 24 08 80 f7 10 	movl   $0xc010f780,0x8(%esp)
c010a8ac:	c0 
c010a8ad:	c7 44 24 04 60 00 00 	movl   $0x60,0x4(%esp)
c010a8b4:	00 
c010a8b5:	c7 04 24 9f f7 10 c0 	movl   $0xc010f79f,(%esp)
c010a8bc:	e8 97 79 ff ff       	call   c0102258 <__panic>
    }
    return &pages[PPN(pa)];
c010a8c1:	8b 0d d0 2f 1a c0    	mov    0xc01a2fd0,%ecx
c010a8c7:	8b 45 08             	mov    0x8(%ebp),%eax
c010a8ca:	c1 e8 0c             	shr    $0xc,%eax
c010a8cd:	89 c2                	mov    %eax,%edx
c010a8cf:	89 d0                	mov    %edx,%eax
c010a8d1:	c1 e0 03             	shl    $0x3,%eax
c010a8d4:	01 d0                	add    %edx,%eax
c010a8d6:	c1 e0 02             	shl    $0x2,%eax
c010a8d9:	01 c8                	add    %ecx,%eax
}
c010a8db:	c9                   	leave  
c010a8dc:	c3                   	ret    

c010a8dd <page2kva>:

static inline void *
page2kva(struct Page *page) {
c010a8dd:	55                   	push   %ebp
c010a8de:	89 e5                	mov    %esp,%ebp
c010a8e0:	83 ec 28             	sub    $0x28,%esp
    return KADDR(page2pa(page));
c010a8e3:	8b 45 08             	mov    0x8(%ebp),%eax
c010a8e6:	89 04 24             	mov    %eax,(%esp)
c010a8e9:	e8 8a ff ff ff       	call   c010a878 <page2pa>
c010a8ee:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a8f1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a8f4:	c1 e8 0c             	shr    $0xc,%eax
c010a8f7:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010a8fa:	a1 e0 0e 1a c0       	mov    0xc01a0ee0,%eax
c010a8ff:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c010a902:	72 23                	jb     c010a927 <page2kva+0x4a>
c010a904:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a907:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010a90b:	c7 44 24 08 b0 f7 10 	movl   $0xc010f7b0,0x8(%esp)
c010a912:	c0 
c010a913:	c7 44 24 04 67 00 00 	movl   $0x67,0x4(%esp)
c010a91a:	00 
c010a91b:	c7 04 24 9f f7 10 c0 	movl   $0xc010f79f,(%esp)
c010a922:	e8 31 79 ff ff       	call   c0102258 <__panic>
c010a927:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a92a:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c010a92f:	c9                   	leave  
c010a930:	c3                   	ret    

c010a931 <kva2page>:

static inline struct Page *
kva2page(void *kva) {
c010a931:	55                   	push   %ebp
c010a932:	89 e5                	mov    %esp,%ebp
c010a934:	83 ec 28             	sub    $0x28,%esp
    return pa2page(PADDR(kva));
c010a937:	8b 45 08             	mov    0x8(%ebp),%eax
c010a93a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a93d:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c010a944:	77 23                	ja     c010a969 <kva2page+0x38>
c010a946:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a949:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010a94d:	c7 44 24 08 d4 f7 10 	movl   $0xc010f7d4,0x8(%esp)
c010a954:	c0 
c010a955:	c7 44 24 04 6c 00 00 	movl   $0x6c,0x4(%esp)
c010a95c:	00 
c010a95d:	c7 04 24 9f f7 10 c0 	movl   $0xc010f79f,(%esp)
c010a964:	e8 ef 78 ff ff       	call   c0102258 <__panic>
c010a969:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a96c:	05 00 00 00 40       	add    $0x40000000,%eax
c010a971:	89 04 24             	mov    %eax,(%esp)
c010a974:	e8 15 ff ff ff       	call   c010a88e <pa2page>
}
c010a979:	c9                   	leave  
c010a97a:	c3                   	ret    

c010a97b <mm_count_inc>:

static inline int
mm_count_inc(struct mm_struct *mm) {
c010a97b:	55                   	push   %ebp
c010a97c:	89 e5                	mov    %esp,%ebp
    mm->mm_count += 1;
c010a97e:	8b 45 08             	mov    0x8(%ebp),%eax
c010a981:	8b 40 18             	mov    0x18(%eax),%eax
c010a984:	8d 50 01             	lea    0x1(%eax),%edx
c010a987:	8b 45 08             	mov    0x8(%ebp),%eax
c010a98a:	89 50 18             	mov    %edx,0x18(%eax)
    return mm->mm_count;
c010a98d:	8b 45 08             	mov    0x8(%ebp),%eax
c010a990:	8b 40 18             	mov    0x18(%eax),%eax
}
c010a993:	5d                   	pop    %ebp
c010a994:	c3                   	ret    

c010a995 <mm_count_dec>:

static inline int
mm_count_dec(struct mm_struct *mm) {
c010a995:	55                   	push   %ebp
c010a996:	89 e5                	mov    %esp,%ebp
    mm->mm_count -= 1;
c010a998:	8b 45 08             	mov    0x8(%ebp),%eax
c010a99b:	8b 40 18             	mov    0x18(%eax),%eax
c010a99e:	8d 50 ff             	lea    -0x1(%eax),%edx
c010a9a1:	8b 45 08             	mov    0x8(%ebp),%eax
c010a9a4:	89 50 18             	mov    %edx,0x18(%eax)
    return mm->mm_count;
c010a9a7:	8b 45 08             	mov    0x8(%ebp),%eax
c010a9aa:	8b 40 18             	mov    0x18(%eax),%eax
}
c010a9ad:	5d                   	pop    %ebp
c010a9ae:	c3                   	ret    

c010a9af <lock_mm>:

static inline void
lock_mm(struct mm_struct *mm) {
c010a9af:	55                   	push   %ebp
c010a9b0:	89 e5                	mov    %esp,%ebp
c010a9b2:	83 ec 18             	sub    $0x18,%esp
    if (mm != NULL) {
c010a9b5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010a9b9:	74 0e                	je     c010a9c9 <lock_mm+0x1a>
        lock(&(mm->mm_lock));
c010a9bb:	8b 45 08             	mov    0x8(%ebp),%eax
c010a9be:	83 c0 1c             	add    $0x1c,%eax
c010a9c1:	89 04 24             	mov    %eax,(%esp)
c010a9c4:	e8 3c fe ff ff       	call   c010a805 <lock>
    }
}
c010a9c9:	c9                   	leave  
c010a9ca:	c3                   	ret    

c010a9cb <unlock_mm>:

static inline void
unlock_mm(struct mm_struct *mm) {
c010a9cb:	55                   	push   %ebp
c010a9cc:	89 e5                	mov    %esp,%ebp
c010a9ce:	83 ec 18             	sub    $0x18,%esp
    if (mm != NULL) {
c010a9d1:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010a9d5:	74 0e                	je     c010a9e5 <unlock_mm+0x1a>
        unlock(&(mm->mm_lock));
c010a9d7:	8b 45 08             	mov    0x8(%ebp),%eax
c010a9da:	83 c0 1c             	add    $0x1c,%eax
c010a9dd:	89 04 24             	mov    %eax,(%esp)
c010a9e0:	e8 3e fe ff ff       	call   c010a823 <unlock>
    }
}
c010a9e5:	c9                   	leave  
c010a9e6:	c3                   	ret    

c010a9e7 <alloc_proc>:
void forkrets(struct trapframe *tf);
void switch_to(struct context *from, struct context *to);

// alloc_proc - alloc a proc_struct and init all fields of proc_struct
static struct proc_struct *
alloc_proc(void) {
c010a9e7:	55                   	push   %ebp
c010a9e8:	89 e5                	mov    %esp,%ebp
c010a9ea:	83 ec 28             	sub    $0x28,%esp
    struct proc_struct *proc = kmalloc(sizeof(struct proc_struct));
c010a9ed:	c7 04 24 7c 00 00 00 	movl   $0x7c,(%esp)
c010a9f4:	e8 f9 b6 ff ff       	call   c01060f2 <kmalloc>
c010a9f9:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (proc != NULL) {
c010a9fc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010aa00:	0f 84 cd 00 00 00    	je     c010aad3 <alloc_proc+0xec>
     *       struct trapframe *tf;                       // Trap frame for current interrupt
     *       uintptr_t cr3;                              // CR3 register: the base addr of Page Directroy Table(PDT)
     *       uint32_t flags;                             // Process flag
     *       char name[PROC_NAME_LEN + 1];               // Process name
     */
        proc->state = PROC_UNINIT;
c010aa06:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010aa09:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        proc->pid = -1;
c010aa0f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010aa12:	c7 40 04 ff ff ff ff 	movl   $0xffffffff,0x4(%eax)
        proc->runs = 0;
c010aa19:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010aa1c:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        proc->kstack = 0;
c010aa23:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010aa26:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
        proc->need_resched = 0;
c010aa2d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010aa30:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
        proc->parent = NULL;
c010aa37:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010aa3a:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
        proc->mm = NULL;
c010aa41:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010aa44:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
        memset(&(proc->context), 0, sizeof(struct context));
c010aa4b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010aa4e:	83 c0 1c             	add    $0x1c,%eax
c010aa51:	c7 44 24 08 20 00 00 	movl   $0x20,0x8(%esp)
c010aa58:	00 
c010aa59:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010aa60:	00 
c010aa61:	89 04 24             	mov    %eax,(%esp)
c010aa64:	e8 de 28 00 00       	call   c010d347 <memset>
        proc->tf = NULL;
c010aa69:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010aa6c:	c7 40 3c 00 00 00 00 	movl   $0x0,0x3c(%eax)
        proc->cr3 = boot_cr3;
c010aa73:	8b 15 cc 2f 1a c0    	mov    0xc01a2fcc,%edx
c010aa79:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010aa7c:	89 50 40             	mov    %edx,0x40(%eax)
        proc->flags = 0;
c010aa7f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010aa82:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
        memset(proc->name, 0, PROC_NAME_LEN);
c010aa89:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010aa8c:	83 c0 48             	add    $0x48,%eax
c010aa8f:	c7 44 24 08 0f 00 00 	movl   $0xf,0x8(%esp)
c010aa96:	00 
c010aa97:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010aa9e:	00 
c010aa9f:	89 04 24             	mov    %eax,(%esp)
c010aaa2:	e8 a0 28 00 00       	call   c010d347 <memset>
        proc->wait_state = 0;
c010aaa7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010aaaa:	c7 40 6c 00 00 00 00 	movl   $0x0,0x6c(%eax)
        proc->cptr = proc->optr = proc->yptr = NULL;
c010aab1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010aab4:	c7 40 74 00 00 00 00 	movl   $0x0,0x74(%eax)
c010aabb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010aabe:	8b 50 74             	mov    0x74(%eax),%edx
c010aac1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010aac4:	89 50 78             	mov    %edx,0x78(%eax)
c010aac7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010aaca:	8b 50 78             	mov    0x78(%eax),%edx
c010aacd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010aad0:	89 50 70             	mov    %edx,0x70(%eax)
    }
    return proc;
c010aad3:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010aad6:	c9                   	leave  
c010aad7:	c3                   	ret    

c010aad8 <set_proc_name>:

// set_proc_name - set the name of proc
char *
set_proc_name(struct proc_struct *proc, const char *name) {
c010aad8:	55                   	push   %ebp
c010aad9:	89 e5                	mov    %esp,%ebp
c010aadb:	83 ec 18             	sub    $0x18,%esp
    memset(proc->name, 0, sizeof(proc->name));
c010aade:	8b 45 08             	mov    0x8(%ebp),%eax
c010aae1:	83 c0 48             	add    $0x48,%eax
c010aae4:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
c010aaeb:	00 
c010aaec:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010aaf3:	00 
c010aaf4:	89 04 24             	mov    %eax,(%esp)
c010aaf7:	e8 4b 28 00 00       	call   c010d347 <memset>
    return memcpy(proc->name, name, PROC_NAME_LEN);
c010aafc:	8b 45 08             	mov    0x8(%ebp),%eax
c010aaff:	8d 50 48             	lea    0x48(%eax),%edx
c010ab02:	c7 44 24 08 0f 00 00 	movl   $0xf,0x8(%esp)
c010ab09:	00 
c010ab0a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ab0d:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ab11:	89 14 24             	mov    %edx,(%esp)
c010ab14:	e8 10 29 00 00       	call   c010d429 <memcpy>
}
c010ab19:	c9                   	leave  
c010ab1a:	c3                   	ret    

c010ab1b <get_proc_name>:

// get_proc_name - get the name of proc
char *
get_proc_name(struct proc_struct *proc) {
c010ab1b:	55                   	push   %ebp
c010ab1c:	89 e5                	mov    %esp,%ebp
c010ab1e:	83 ec 18             	sub    $0x18,%esp
    static char name[PROC_NAME_LEN + 1];
    memset(name, 0, sizeof(name));
c010ab21:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
c010ab28:	00 
c010ab29:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010ab30:	00 
c010ab31:	c7 04 24 a8 2f 1a c0 	movl   $0xc01a2fa8,(%esp)
c010ab38:	e8 0a 28 00 00       	call   c010d347 <memset>
    return memcpy(name, proc->name, PROC_NAME_LEN);
c010ab3d:	8b 45 08             	mov    0x8(%ebp),%eax
c010ab40:	83 c0 48             	add    $0x48,%eax
c010ab43:	c7 44 24 08 0f 00 00 	movl   $0xf,0x8(%esp)
c010ab4a:	00 
c010ab4b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ab4f:	c7 04 24 a8 2f 1a c0 	movl   $0xc01a2fa8,(%esp)
c010ab56:	e8 ce 28 00 00       	call   c010d429 <memcpy>
}
c010ab5b:	c9                   	leave  
c010ab5c:	c3                   	ret    

c010ab5d <set_links>:

// set_links - set the relation links of process
static void
set_links(struct proc_struct *proc) {
c010ab5d:	55                   	push   %ebp
c010ab5e:	89 e5                	mov    %esp,%ebp
c010ab60:	83 ec 20             	sub    $0x20,%esp
    list_add(&proc_list, &(proc->list_link));
c010ab63:	8b 45 08             	mov    0x8(%ebp),%eax
c010ab66:	83 c0 58             	add    $0x58,%eax
c010ab69:	c7 45 fc b0 30 1a c0 	movl   $0xc01a30b0,-0x4(%ebp)
c010ab70:	89 45 f8             	mov    %eax,-0x8(%ebp)
c010ab73:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010ab76:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ab79:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010ab7c:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c010ab7f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ab82:	8b 40 04             	mov    0x4(%eax),%eax
c010ab85:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010ab88:	89 55 ec             	mov    %edx,-0x14(%ebp)
c010ab8b:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010ab8e:	89 55 e8             	mov    %edx,-0x18(%ebp)
c010ab91:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c010ab94:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010ab97:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010ab9a:	89 10                	mov    %edx,(%eax)
c010ab9c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010ab9f:	8b 10                	mov    (%eax),%edx
c010aba1:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010aba4:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010aba7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010abaa:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010abad:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010abb0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010abb3:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010abb6:	89 10                	mov    %edx,(%eax)
    proc->yptr = NULL;
c010abb8:	8b 45 08             	mov    0x8(%ebp),%eax
c010abbb:	c7 40 74 00 00 00 00 	movl   $0x0,0x74(%eax)
    if ((proc->optr = proc->parent->cptr) != NULL) {
c010abc2:	8b 45 08             	mov    0x8(%ebp),%eax
c010abc5:	8b 40 14             	mov    0x14(%eax),%eax
c010abc8:	8b 50 70             	mov    0x70(%eax),%edx
c010abcb:	8b 45 08             	mov    0x8(%ebp),%eax
c010abce:	89 50 78             	mov    %edx,0x78(%eax)
c010abd1:	8b 45 08             	mov    0x8(%ebp),%eax
c010abd4:	8b 40 78             	mov    0x78(%eax),%eax
c010abd7:	85 c0                	test   %eax,%eax
c010abd9:	74 0c                	je     c010abe7 <set_links+0x8a>
        proc->optr->yptr = proc;
c010abdb:	8b 45 08             	mov    0x8(%ebp),%eax
c010abde:	8b 40 78             	mov    0x78(%eax),%eax
c010abe1:	8b 55 08             	mov    0x8(%ebp),%edx
c010abe4:	89 50 74             	mov    %edx,0x74(%eax)
    }
    proc->parent->cptr = proc;
c010abe7:	8b 45 08             	mov    0x8(%ebp),%eax
c010abea:	8b 40 14             	mov    0x14(%eax),%eax
c010abed:	8b 55 08             	mov    0x8(%ebp),%edx
c010abf0:	89 50 70             	mov    %edx,0x70(%eax)
    nr_process ++;
c010abf3:	a1 a0 2f 1a c0       	mov    0xc01a2fa0,%eax
c010abf8:	83 c0 01             	add    $0x1,%eax
c010abfb:	a3 a0 2f 1a c0       	mov    %eax,0xc01a2fa0
}
c010ac00:	c9                   	leave  
c010ac01:	c3                   	ret    

c010ac02 <remove_links>:

// remove_links - clean the relation links of process
static void
remove_links(struct proc_struct *proc) {
c010ac02:	55                   	push   %ebp
c010ac03:	89 e5                	mov    %esp,%ebp
c010ac05:	83 ec 10             	sub    $0x10,%esp
    list_del(&(proc->list_link));
c010ac08:	8b 45 08             	mov    0x8(%ebp),%eax
c010ac0b:	83 c0 58             	add    $0x58,%eax
c010ac0e:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c010ac11:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010ac14:	8b 40 04             	mov    0x4(%eax),%eax
c010ac17:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010ac1a:	8b 12                	mov    (%edx),%edx
c010ac1c:	89 55 f8             	mov    %edx,-0x8(%ebp)
c010ac1f:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c010ac22:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010ac25:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010ac28:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010ac2b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ac2e:	8b 55 f8             	mov    -0x8(%ebp),%edx
c010ac31:	89 10                	mov    %edx,(%eax)
    if (proc->optr != NULL) {
c010ac33:	8b 45 08             	mov    0x8(%ebp),%eax
c010ac36:	8b 40 78             	mov    0x78(%eax),%eax
c010ac39:	85 c0                	test   %eax,%eax
c010ac3b:	74 0f                	je     c010ac4c <remove_links+0x4a>
        proc->optr->yptr = proc->yptr;
c010ac3d:	8b 45 08             	mov    0x8(%ebp),%eax
c010ac40:	8b 40 78             	mov    0x78(%eax),%eax
c010ac43:	8b 55 08             	mov    0x8(%ebp),%edx
c010ac46:	8b 52 74             	mov    0x74(%edx),%edx
c010ac49:	89 50 74             	mov    %edx,0x74(%eax)
    }
    if (proc->yptr != NULL) {
c010ac4c:	8b 45 08             	mov    0x8(%ebp),%eax
c010ac4f:	8b 40 74             	mov    0x74(%eax),%eax
c010ac52:	85 c0                	test   %eax,%eax
c010ac54:	74 11                	je     c010ac67 <remove_links+0x65>
        proc->yptr->optr = proc->optr;
c010ac56:	8b 45 08             	mov    0x8(%ebp),%eax
c010ac59:	8b 40 74             	mov    0x74(%eax),%eax
c010ac5c:	8b 55 08             	mov    0x8(%ebp),%edx
c010ac5f:	8b 52 78             	mov    0x78(%edx),%edx
c010ac62:	89 50 78             	mov    %edx,0x78(%eax)
c010ac65:	eb 0f                	jmp    c010ac76 <remove_links+0x74>
    }
    else {
       proc->parent->cptr = proc->optr;
c010ac67:	8b 45 08             	mov    0x8(%ebp),%eax
c010ac6a:	8b 40 14             	mov    0x14(%eax),%eax
c010ac6d:	8b 55 08             	mov    0x8(%ebp),%edx
c010ac70:	8b 52 78             	mov    0x78(%edx),%edx
c010ac73:	89 50 70             	mov    %edx,0x70(%eax)
    }
    nr_process --;
c010ac76:	a1 a0 2f 1a c0       	mov    0xc01a2fa0,%eax
c010ac7b:	83 e8 01             	sub    $0x1,%eax
c010ac7e:	a3 a0 2f 1a c0       	mov    %eax,0xc01a2fa0
}
c010ac83:	c9                   	leave  
c010ac84:	c3                   	ret    

c010ac85 <get_pid>:

// get_pid - alloc a unique pid for process
static int
get_pid(void) {
c010ac85:	55                   	push   %ebp
c010ac86:	89 e5                	mov    %esp,%ebp
c010ac88:	83 ec 10             	sub    $0x10,%esp
    static_assert(MAX_PID > MAX_PROCESS);
    struct proc_struct *proc;
    list_entry_t *list = &proc_list, *le;
c010ac8b:	c7 45 f8 b0 30 1a c0 	movl   $0xc01a30b0,-0x8(%ebp)
    static int next_safe = MAX_PID, last_pid = MAX_PID;
    if (++ last_pid >= MAX_PID) {
c010ac92:	a1 80 ea 12 c0       	mov    0xc012ea80,%eax
c010ac97:	83 c0 01             	add    $0x1,%eax
c010ac9a:	a3 80 ea 12 c0       	mov    %eax,0xc012ea80
c010ac9f:	a1 80 ea 12 c0       	mov    0xc012ea80,%eax
c010aca4:	3d ff 1f 00 00       	cmp    $0x1fff,%eax
c010aca9:	7e 0c                	jle    c010acb7 <get_pid+0x32>
        last_pid = 1;
c010acab:	c7 05 80 ea 12 c0 01 	movl   $0x1,0xc012ea80
c010acb2:	00 00 00 
        goto inside;
c010acb5:	eb 13                	jmp    c010acca <get_pid+0x45>
    }
    if (last_pid >= next_safe) {
c010acb7:	8b 15 80 ea 12 c0    	mov    0xc012ea80,%edx
c010acbd:	a1 84 ea 12 c0       	mov    0xc012ea84,%eax
c010acc2:	39 c2                	cmp    %eax,%edx
c010acc4:	0f 8c ac 00 00 00    	jl     c010ad76 <get_pid+0xf1>
    inside:
        next_safe = MAX_PID;
c010acca:	c7 05 84 ea 12 c0 00 	movl   $0x2000,0xc012ea84
c010acd1:	20 00 00 
    repeat:
        le = list;
c010acd4:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010acd7:	89 45 fc             	mov    %eax,-0x4(%ebp)
        while ((le = list_next(le)) != list) {
c010acda:	eb 7f                	jmp    c010ad5b <get_pid+0xd6>
            proc = le2proc(le, list_link);
c010acdc:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010acdf:	83 e8 58             	sub    $0x58,%eax
c010ace2:	89 45 f4             	mov    %eax,-0xc(%ebp)
            if (proc->pid == last_pid) {
c010ace5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ace8:	8b 50 04             	mov    0x4(%eax),%edx
c010aceb:	a1 80 ea 12 c0       	mov    0xc012ea80,%eax
c010acf0:	39 c2                	cmp    %eax,%edx
c010acf2:	75 3e                	jne    c010ad32 <get_pid+0xad>
                if (++ last_pid >= next_safe) {
c010acf4:	a1 80 ea 12 c0       	mov    0xc012ea80,%eax
c010acf9:	83 c0 01             	add    $0x1,%eax
c010acfc:	a3 80 ea 12 c0       	mov    %eax,0xc012ea80
c010ad01:	8b 15 80 ea 12 c0    	mov    0xc012ea80,%edx
c010ad07:	a1 84 ea 12 c0       	mov    0xc012ea84,%eax
c010ad0c:	39 c2                	cmp    %eax,%edx
c010ad0e:	7c 4b                	jl     c010ad5b <get_pid+0xd6>
                    if (last_pid >= MAX_PID) {
c010ad10:	a1 80 ea 12 c0       	mov    0xc012ea80,%eax
c010ad15:	3d ff 1f 00 00       	cmp    $0x1fff,%eax
c010ad1a:	7e 0a                	jle    c010ad26 <get_pid+0xa1>
                        last_pid = 1;
c010ad1c:	c7 05 80 ea 12 c0 01 	movl   $0x1,0xc012ea80
c010ad23:	00 00 00 
                    }
                    next_safe = MAX_PID;
c010ad26:	c7 05 84 ea 12 c0 00 	movl   $0x2000,0xc012ea84
c010ad2d:	20 00 00 
                    goto repeat;
c010ad30:	eb a2                	jmp    c010acd4 <get_pid+0x4f>
                }
            }
            else if (proc->pid > last_pid && next_safe > proc->pid) {
c010ad32:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ad35:	8b 50 04             	mov    0x4(%eax),%edx
c010ad38:	a1 80 ea 12 c0       	mov    0xc012ea80,%eax
c010ad3d:	39 c2                	cmp    %eax,%edx
c010ad3f:	7e 1a                	jle    c010ad5b <get_pid+0xd6>
c010ad41:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ad44:	8b 50 04             	mov    0x4(%eax),%edx
c010ad47:	a1 84 ea 12 c0       	mov    0xc012ea84,%eax
c010ad4c:	39 c2                	cmp    %eax,%edx
c010ad4e:	7d 0b                	jge    c010ad5b <get_pid+0xd6>
                next_safe = proc->pid;
c010ad50:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ad53:	8b 40 04             	mov    0x4(%eax),%eax
c010ad56:	a3 84 ea 12 c0       	mov    %eax,0xc012ea84
c010ad5b:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010ad5e:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010ad61:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ad64:	8b 40 04             	mov    0x4(%eax),%eax
    if (last_pid >= next_safe) {
    inside:
        next_safe = MAX_PID;
    repeat:
        le = list;
        while ((le = list_next(le)) != list) {
c010ad67:	89 45 fc             	mov    %eax,-0x4(%ebp)
c010ad6a:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010ad6d:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c010ad70:	0f 85 66 ff ff ff    	jne    c010acdc <get_pid+0x57>
            else if (proc->pid > last_pid && next_safe > proc->pid) {
                next_safe = proc->pid;
            }
        }
    }
    return last_pid;
c010ad76:	a1 80 ea 12 c0       	mov    0xc012ea80,%eax
}
c010ad7b:	c9                   	leave  
c010ad7c:	c3                   	ret    

c010ad7d <proc_run>:

// proc_run - make process "proc" running on cpu
// NOTE: before call switch_to, should load  base addr of "proc"'s new PDT
void
proc_run(struct proc_struct *proc) {
c010ad7d:	55                   	push   %ebp
c010ad7e:	89 e5                	mov    %esp,%ebp
c010ad80:	83 ec 28             	sub    $0x28,%esp
    if (proc != current) {
c010ad83:	a1 88 0f 1a c0       	mov    0xc01a0f88,%eax
c010ad88:	39 45 08             	cmp    %eax,0x8(%ebp)
c010ad8b:	74 63                	je     c010adf0 <proc_run+0x73>
        bool intr_flag;
        struct proc_struct *prev = current, *next = proc;
c010ad8d:	a1 88 0f 1a c0       	mov    0xc01a0f88,%eax
c010ad92:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ad95:	8b 45 08             	mov    0x8(%ebp),%eax
c010ad98:	89 45 f0             	mov    %eax,-0x10(%ebp)
        local_intr_save(intr_flag);
c010ad9b:	e8 05 fa ff ff       	call   c010a7a5 <__intr_save>
c010ada0:	89 45 ec             	mov    %eax,-0x14(%ebp)
        {
            current = proc;
c010ada3:	8b 45 08             	mov    0x8(%ebp),%eax
c010ada6:	a3 88 0f 1a c0       	mov    %eax,0xc01a0f88
            load_esp0(next->kstack + KSTACKSIZE);
c010adab:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010adae:	8b 40 0c             	mov    0xc(%eax),%eax
c010adb1:	05 00 20 00 00       	add    $0x2000,%eax
c010adb6:	89 04 24             	mov    %eax,(%esp)
c010adb9:	e8 6b b6 ff ff       	call   c0106429 <load_esp0>
            lcr3(next->cr3);
c010adbe:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010adc1:	8b 40 40             	mov    0x40(%eax),%eax
c010adc4:	89 45 e8             	mov    %eax,-0x18(%ebp)
    asm volatile ("mov %0, %%cr0" :: "r" (cr0) : "memory");
}

static inline void
lcr3(uintptr_t cr3) {
    asm volatile ("mov %0, %%cr3" :: "r" (cr3) : "memory");
c010adc7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010adca:	0f 22 d8             	mov    %eax,%cr3
            switch_to(&(prev->context), &(next->context));
c010adcd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010add0:	8d 50 1c             	lea    0x1c(%eax),%edx
c010add3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010add6:	83 c0 1c             	add    $0x1c,%eax
c010add9:	89 54 24 04          	mov    %edx,0x4(%esp)
c010addd:	89 04 24             	mov    %eax,(%esp)
c010ade0:	e8 ff 16 00 00       	call   c010c4e4 <switch_to>
        }
        local_intr_restore(intr_flag);
c010ade5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ade8:	89 04 24             	mov    %eax,(%esp)
c010adeb:	e8 df f9 ff ff       	call   c010a7cf <__intr_restore>
    }
}
c010adf0:	c9                   	leave  
c010adf1:	c3                   	ret    

c010adf2 <forkret>:

// forkret -- the first kernel entry point of a new thread/process
// NOTE: the addr of forkret is setted in copy_thread function
//       after switch_to, the current proc will execute here.
static void
forkret(void) {
c010adf2:	55                   	push   %ebp
c010adf3:	89 e5                	mov    %esp,%ebp
c010adf5:	83 ec 18             	sub    $0x18,%esp
    forkrets(current->tf);
c010adf8:	a1 88 0f 1a c0       	mov    0xc01a0f88,%eax
c010adfd:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ae00:	89 04 24             	mov    %eax,(%esp)
c010ae03:	e8 2d 91 ff ff       	call   c0103f35 <forkrets>
}
c010ae08:	c9                   	leave  
c010ae09:	c3                   	ret    

c010ae0a <hash_proc>:

// hash_proc - add proc into proc hash_list
static void
hash_proc(struct proc_struct *proc) {
c010ae0a:	55                   	push   %ebp
c010ae0b:	89 e5                	mov    %esp,%ebp
c010ae0d:	53                   	push   %ebx
c010ae0e:	83 ec 34             	sub    $0x34,%esp
    list_add(hash_list + pid_hashfn(proc->pid), &(proc->hash_link));
c010ae11:	8b 45 08             	mov    0x8(%ebp),%eax
c010ae14:	8d 58 60             	lea    0x60(%eax),%ebx
c010ae17:	8b 45 08             	mov    0x8(%ebp),%eax
c010ae1a:	8b 40 04             	mov    0x4(%eax),%eax
c010ae1d:	c7 44 24 04 0a 00 00 	movl   $0xa,0x4(%esp)
c010ae24:	00 
c010ae25:	89 04 24             	mov    %eax,(%esp)
c010ae28:	e8 6d 1a 00 00       	call   c010c89a <hash32>
c010ae2d:	c1 e0 03             	shl    $0x3,%eax
c010ae30:	05 a0 0f 1a c0       	add    $0xc01a0fa0,%eax
c010ae35:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ae38:	89 5d f0             	mov    %ebx,-0x10(%ebp)
c010ae3b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ae3e:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010ae41:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ae44:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c010ae47:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ae4a:	8b 40 04             	mov    0x4(%eax),%eax
c010ae4d:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010ae50:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c010ae53:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010ae56:	89 55 e0             	mov    %edx,-0x20(%ebp)
c010ae59:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c010ae5c:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010ae5f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010ae62:	89 10                	mov    %edx,(%eax)
c010ae64:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010ae67:	8b 10                	mov    (%eax),%edx
c010ae69:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010ae6c:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010ae6f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010ae72:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010ae75:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010ae78:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010ae7b:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010ae7e:	89 10                	mov    %edx,(%eax)
}
c010ae80:	83 c4 34             	add    $0x34,%esp
c010ae83:	5b                   	pop    %ebx
c010ae84:	5d                   	pop    %ebp
c010ae85:	c3                   	ret    

c010ae86 <unhash_proc>:

// unhash_proc - delete proc from proc hash_list
static void
unhash_proc(struct proc_struct *proc) {
c010ae86:	55                   	push   %ebp
c010ae87:	89 e5                	mov    %esp,%ebp
c010ae89:	83 ec 10             	sub    $0x10,%esp
    list_del(&(proc->hash_link));
c010ae8c:	8b 45 08             	mov    0x8(%ebp),%eax
c010ae8f:	83 c0 60             	add    $0x60,%eax
c010ae92:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c010ae95:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010ae98:	8b 40 04             	mov    0x4(%eax),%eax
c010ae9b:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010ae9e:	8b 12                	mov    (%edx),%edx
c010aea0:	89 55 f8             	mov    %edx,-0x8(%ebp)
c010aea3:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c010aea6:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010aea9:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010aeac:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010aeaf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010aeb2:	8b 55 f8             	mov    -0x8(%ebp),%edx
c010aeb5:	89 10                	mov    %edx,(%eax)
}
c010aeb7:	c9                   	leave  
c010aeb8:	c3                   	ret    

c010aeb9 <find_proc>:

// find_proc - find proc frome proc hash_list according to pid
struct proc_struct *
find_proc(int pid) {
c010aeb9:	55                   	push   %ebp
c010aeba:	89 e5                	mov    %esp,%ebp
c010aebc:	83 ec 28             	sub    $0x28,%esp
    if (0 < pid && pid < MAX_PID) {
c010aebf:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010aec3:	7e 5f                	jle    c010af24 <find_proc+0x6b>
c010aec5:	81 7d 08 ff 1f 00 00 	cmpl   $0x1fff,0x8(%ebp)
c010aecc:	7f 56                	jg     c010af24 <find_proc+0x6b>
        list_entry_t *list = hash_list + pid_hashfn(pid), *le = list;
c010aece:	8b 45 08             	mov    0x8(%ebp),%eax
c010aed1:	c7 44 24 04 0a 00 00 	movl   $0xa,0x4(%esp)
c010aed8:	00 
c010aed9:	89 04 24             	mov    %eax,(%esp)
c010aedc:	e8 b9 19 00 00       	call   c010c89a <hash32>
c010aee1:	c1 e0 03             	shl    $0x3,%eax
c010aee4:	05 a0 0f 1a c0       	add    $0xc01a0fa0,%eax
c010aee9:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010aeec:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010aeef:	89 45 f4             	mov    %eax,-0xc(%ebp)
        while ((le = list_next(le)) != list) {
c010aef2:	eb 19                	jmp    c010af0d <find_proc+0x54>
            struct proc_struct *proc = le2proc(le, hash_link);
c010aef4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010aef7:	83 e8 60             	sub    $0x60,%eax
c010aefa:	89 45 ec             	mov    %eax,-0x14(%ebp)
            if (proc->pid == pid) {
c010aefd:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010af00:	8b 40 04             	mov    0x4(%eax),%eax
c010af03:	3b 45 08             	cmp    0x8(%ebp),%eax
c010af06:	75 05                	jne    c010af0d <find_proc+0x54>
                return proc;
c010af08:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010af0b:	eb 1c                	jmp    c010af29 <find_proc+0x70>
c010af0d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010af10:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010af13:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010af16:	8b 40 04             	mov    0x4(%eax),%eax
// find_proc - find proc frome proc hash_list according to pid
struct proc_struct *
find_proc(int pid) {
    if (0 < pid && pid < MAX_PID) {
        list_entry_t *list = hash_list + pid_hashfn(pid), *le = list;
        while ((le = list_next(le)) != list) {
c010af19:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010af1c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010af1f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010af22:	75 d0                	jne    c010aef4 <find_proc+0x3b>
            if (proc->pid == pid) {
                return proc;
            }
        }
    }
    return NULL;
c010af24:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010af29:	c9                   	leave  
c010af2a:	c3                   	ret    

c010af2b <kernel_thread>:

// kernel_thread - create a kernel thread using "fn" function
// NOTE: the contents of temp trapframe tf will be copied to 
//       proc->tf in do_fork-->copy_thread function
int
kernel_thread(int (*fn)(void *), void *arg, uint32_t clone_flags) {
c010af2b:	55                   	push   %ebp
c010af2c:	89 e5                	mov    %esp,%ebp
c010af2e:	83 ec 68             	sub    $0x68,%esp
    struct trapframe tf;
    memset(&tf, 0, sizeof(struct trapframe));
c010af31:	c7 44 24 08 4c 00 00 	movl   $0x4c,0x8(%esp)
c010af38:	00 
c010af39:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010af40:	00 
c010af41:	8d 45 ac             	lea    -0x54(%ebp),%eax
c010af44:	89 04 24             	mov    %eax,(%esp)
c010af47:	e8 fb 23 00 00       	call   c010d347 <memset>
    tf.tf_cs = KERNEL_CS;
c010af4c:	66 c7 45 e8 08 00    	movw   $0x8,-0x18(%ebp)
    tf.tf_ds = tf.tf_es = tf.tf_ss = KERNEL_DS;
c010af52:	66 c7 45 f4 10 00    	movw   $0x10,-0xc(%ebp)
c010af58:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
c010af5c:	66 89 45 d4          	mov    %ax,-0x2c(%ebp)
c010af60:	0f b7 45 d4          	movzwl -0x2c(%ebp),%eax
c010af64:	66 89 45 d8          	mov    %ax,-0x28(%ebp)
    tf.tf_regs.reg_ebx = (uint32_t)fn;
c010af68:	8b 45 08             	mov    0x8(%ebp),%eax
c010af6b:	89 45 bc             	mov    %eax,-0x44(%ebp)
    tf.tf_regs.reg_edx = (uint32_t)arg;
c010af6e:	8b 45 0c             	mov    0xc(%ebp),%eax
c010af71:	89 45 c0             	mov    %eax,-0x40(%ebp)
    tf.tf_eip = (uint32_t)kernel_thread_entry;
c010af74:	b8 5c a7 10 c0       	mov    $0xc010a75c,%eax
c010af79:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    return do_fork(clone_flags | CLONE_VM, 0, &tf);
c010af7c:	8b 45 10             	mov    0x10(%ebp),%eax
c010af7f:	80 cc 01             	or     $0x1,%ah
c010af82:	89 c2                	mov    %eax,%edx
c010af84:	8d 45 ac             	lea    -0x54(%ebp),%eax
c010af87:	89 44 24 08          	mov    %eax,0x8(%esp)
c010af8b:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010af92:	00 
c010af93:	89 14 24             	mov    %edx,(%esp)
c010af96:	e8 25 03 00 00       	call   c010b2c0 <do_fork>
}
c010af9b:	c9                   	leave  
c010af9c:	c3                   	ret    

c010af9d <setup_kstack>:

// setup_kstack - alloc pages with size KSTACKPAGE as process kernel stack
static int
setup_kstack(struct proc_struct *proc) {
c010af9d:	55                   	push   %ebp
c010af9e:	89 e5                	mov    %esp,%ebp
c010afa0:	83 ec 28             	sub    $0x28,%esp
    struct Page *page = alloc_pages(KSTACKPAGE);
c010afa3:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
c010afaa:	e8 fa b5 ff ff       	call   c01065a9 <alloc_pages>
c010afaf:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (page != NULL) {
c010afb2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010afb6:	74 1a                	je     c010afd2 <setup_kstack+0x35>
        proc->kstack = (uintptr_t)page2kva(page);
c010afb8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010afbb:	89 04 24             	mov    %eax,(%esp)
c010afbe:	e8 1a f9 ff ff       	call   c010a8dd <page2kva>
c010afc3:	89 c2                	mov    %eax,%edx
c010afc5:	8b 45 08             	mov    0x8(%ebp),%eax
c010afc8:	89 50 0c             	mov    %edx,0xc(%eax)
        return 0;
c010afcb:	b8 00 00 00 00       	mov    $0x0,%eax
c010afd0:	eb 05                	jmp    c010afd7 <setup_kstack+0x3a>
    }
    return -E_NO_MEM;
c010afd2:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
}
c010afd7:	c9                   	leave  
c010afd8:	c3                   	ret    

c010afd9 <put_kstack>:

// put_kstack - free the memory space of process kernel stack
static void
put_kstack(struct proc_struct *proc) {
c010afd9:	55                   	push   %ebp
c010afda:	89 e5                	mov    %esp,%ebp
c010afdc:	83 ec 18             	sub    $0x18,%esp
    free_pages(kva2page((void *)(proc->kstack)), KSTACKPAGE);
c010afdf:	8b 45 08             	mov    0x8(%ebp),%eax
c010afe2:	8b 40 0c             	mov    0xc(%eax),%eax
c010afe5:	89 04 24             	mov    %eax,(%esp)
c010afe8:	e8 44 f9 ff ff       	call   c010a931 <kva2page>
c010afed:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
c010aff4:	00 
c010aff5:	89 04 24             	mov    %eax,(%esp)
c010aff8:	e8 28 b6 ff ff       	call   c0106625 <free_pages>
}
c010affd:	c9                   	leave  
c010affe:	c3                   	ret    

c010afff <setup_pgdir>:

// setup_pgdir - alloc one page as PDT
static int
setup_pgdir(struct mm_struct *mm) {
c010afff:	55                   	push   %ebp
c010b000:	89 e5                	mov    %esp,%ebp
c010b002:	83 ec 28             	sub    $0x28,%esp
    struct Page *page;
    if ((page = alloc_page()) == NULL) {
c010b005:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010b00c:	e8 98 b5 ff ff       	call   c01065a9 <alloc_pages>
c010b011:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b014:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b018:	75 0a                	jne    c010b024 <setup_pgdir+0x25>
        return -E_NO_MEM;
c010b01a:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c010b01f:	e9 80 00 00 00       	jmp    c010b0a4 <setup_pgdir+0xa5>
    }
    pde_t *pgdir = page2kva(page);
c010b024:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b027:	89 04 24             	mov    %eax,(%esp)
c010b02a:	e8 ae f8 ff ff       	call   c010a8dd <page2kva>
c010b02f:	89 45 f0             	mov    %eax,-0x10(%ebp)
    memcpy(pgdir, boot_pgdir, PGSIZE);
c010b032:	a1 e4 0e 1a c0       	mov    0xc01a0ee4,%eax
c010b037:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c010b03e:	00 
c010b03f:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b043:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b046:	89 04 24             	mov    %eax,(%esp)
c010b049:	e8 db 23 00 00       	call   c010d429 <memcpy>
    pgdir[PDX(VPT)] = PADDR(pgdir) | PTE_P | PTE_W;
c010b04e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b051:	8d 90 ac 0f 00 00    	lea    0xfac(%eax),%edx
c010b057:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b05a:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010b05d:	81 7d ec ff ff ff bf 	cmpl   $0xbfffffff,-0x14(%ebp)
c010b064:	77 23                	ja     c010b089 <setup_pgdir+0x8a>
c010b066:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b069:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010b06d:	c7 44 24 08 d4 f7 10 	movl   $0xc010f7d4,0x8(%esp)
c010b074:	c0 
c010b075:	c7 44 24 04 28 01 00 	movl   $0x128,0x4(%esp)
c010b07c:	00 
c010b07d:	c7 04 24 f8 f7 10 c0 	movl   $0xc010f7f8,(%esp)
c010b084:	e8 cf 71 ff ff       	call   c0102258 <__panic>
c010b089:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b08c:	05 00 00 00 40       	add    $0x40000000,%eax
c010b091:	83 c8 03             	or     $0x3,%eax
c010b094:	89 02                	mov    %eax,(%edx)
    mm->pgdir = pgdir;
c010b096:	8b 45 08             	mov    0x8(%ebp),%eax
c010b099:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010b09c:	89 50 0c             	mov    %edx,0xc(%eax)
    return 0;
c010b09f:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010b0a4:	c9                   	leave  
c010b0a5:	c3                   	ret    

c010b0a6 <put_pgdir>:

// put_pgdir - free the memory space of PDT
static void
put_pgdir(struct mm_struct *mm) {
c010b0a6:	55                   	push   %ebp
c010b0a7:	89 e5                	mov    %esp,%ebp
c010b0a9:	83 ec 18             	sub    $0x18,%esp
    free_page(kva2page(mm->pgdir));
c010b0ac:	8b 45 08             	mov    0x8(%ebp),%eax
c010b0af:	8b 40 0c             	mov    0xc(%eax),%eax
c010b0b2:	89 04 24             	mov    %eax,(%esp)
c010b0b5:	e8 77 f8 ff ff       	call   c010a931 <kva2page>
c010b0ba:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010b0c1:	00 
c010b0c2:	89 04 24             	mov    %eax,(%esp)
c010b0c5:	e8 5b b5 ff ff       	call   c0106625 <free_pages>
}
c010b0ca:	c9                   	leave  
c010b0cb:	c3                   	ret    

c010b0cc <copy_mm>:

// copy_mm - process "proc" duplicate OR share process "current"'s mm according clone_flags
//         - if clone_flags & CLONE_VM, then "share" ; else "duplicate"
static int
copy_mm(uint32_t clone_flags, struct proc_struct *proc) {
c010b0cc:	55                   	push   %ebp
c010b0cd:	89 e5                	mov    %esp,%ebp
c010b0cf:	83 ec 28             	sub    $0x28,%esp
    struct mm_struct *mm, *oldmm = current->mm;
c010b0d2:	a1 88 0f 1a c0       	mov    0xc01a0f88,%eax
c010b0d7:	8b 40 18             	mov    0x18(%eax),%eax
c010b0da:	89 45 ec             	mov    %eax,-0x14(%ebp)

    /* current is a kernel thread */
    if (oldmm == NULL) {
c010b0dd:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010b0e1:	75 0a                	jne    c010b0ed <copy_mm+0x21>
        return 0;
c010b0e3:	b8 00 00 00 00       	mov    $0x0,%eax
c010b0e8:	e9 f9 00 00 00       	jmp    c010b1e6 <copy_mm+0x11a>
    }
    if (clone_flags & CLONE_VM) {
c010b0ed:	8b 45 08             	mov    0x8(%ebp),%eax
c010b0f0:	25 00 01 00 00       	and    $0x100,%eax
c010b0f5:	85 c0                	test   %eax,%eax
c010b0f7:	74 08                	je     c010b101 <copy_mm+0x35>
        mm = oldmm;
c010b0f9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b0fc:	89 45 f4             	mov    %eax,-0xc(%ebp)
        goto good_mm;
c010b0ff:	eb 78                	jmp    c010b179 <copy_mm+0xad>
    }

    int ret = -E_NO_MEM;
c010b101:	c7 45 f0 fc ff ff ff 	movl   $0xfffffffc,-0x10(%ebp)
    if ((mm = mm_create()) == NULL) {
c010b108:	e8 8a e2 ff ff       	call   c0109397 <mm_create>
c010b10d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b110:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b114:	75 05                	jne    c010b11b <copy_mm+0x4f>
        goto bad_mm;
c010b116:	e9 c8 00 00 00       	jmp    c010b1e3 <copy_mm+0x117>
    }
    if (setup_pgdir(mm) != 0) {
c010b11b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b11e:	89 04 24             	mov    %eax,(%esp)
c010b121:	e8 d9 fe ff ff       	call   c010afff <setup_pgdir>
c010b126:	85 c0                	test   %eax,%eax
c010b128:	74 05                	je     c010b12f <copy_mm+0x63>
        goto bad_pgdir_cleanup_mm;
c010b12a:	e9 a9 00 00 00       	jmp    c010b1d8 <copy_mm+0x10c>
    }

    lock_mm(oldmm);
c010b12f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b132:	89 04 24             	mov    %eax,(%esp)
c010b135:	e8 75 f8 ff ff       	call   c010a9af <lock_mm>
    {
        ret = dup_mmap(mm, oldmm);
c010b13a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b13d:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b141:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b144:	89 04 24             	mov    %eax,(%esp)
c010b147:	e8 62 e7 ff ff       	call   c01098ae <dup_mmap>
c010b14c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }
    unlock_mm(oldmm);
c010b14f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b152:	89 04 24             	mov    %eax,(%esp)
c010b155:	e8 71 f8 ff ff       	call   c010a9cb <unlock_mm>

    if (ret != 0) {
c010b15a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010b15e:	74 19                	je     c010b179 <copy_mm+0xad>
        goto bad_dup_cleanup_mmap;
c010b160:	90                   	nop
    mm_count_inc(mm);
    proc->mm = mm;
    proc->cr3 = PADDR(mm->pgdir);
    return 0;
bad_dup_cleanup_mmap:
    exit_mmap(mm);
c010b161:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b164:	89 04 24             	mov    %eax,(%esp)
c010b167:	e8 43 e8 ff ff       	call   c01099af <exit_mmap>
    put_pgdir(mm);
c010b16c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b16f:	89 04 24             	mov    %eax,(%esp)
c010b172:	e8 2f ff ff ff       	call   c010b0a6 <put_pgdir>
c010b177:	eb 5f                	jmp    c010b1d8 <copy_mm+0x10c>
    if (ret != 0) {
        goto bad_dup_cleanup_mmap;
    }

good_mm:
    mm_count_inc(mm);
c010b179:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b17c:	89 04 24             	mov    %eax,(%esp)
c010b17f:	e8 f7 f7 ff ff       	call   c010a97b <mm_count_inc>
    proc->mm = mm;
c010b184:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b187:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010b18a:	89 50 18             	mov    %edx,0x18(%eax)
    proc->cr3 = PADDR(mm->pgdir);
c010b18d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b190:	8b 40 0c             	mov    0xc(%eax),%eax
c010b193:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010b196:	81 7d e8 ff ff ff bf 	cmpl   $0xbfffffff,-0x18(%ebp)
c010b19d:	77 23                	ja     c010b1c2 <copy_mm+0xf6>
c010b19f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b1a2:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010b1a6:	c7 44 24 08 d4 f7 10 	movl   $0xc010f7d4,0x8(%esp)
c010b1ad:	c0 
c010b1ae:	c7 44 24 04 57 01 00 	movl   $0x157,0x4(%esp)
c010b1b5:	00 
c010b1b6:	c7 04 24 f8 f7 10 c0 	movl   $0xc010f7f8,(%esp)
c010b1bd:	e8 96 70 ff ff       	call   c0102258 <__panic>
c010b1c2:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b1c5:	8d 90 00 00 00 40    	lea    0x40000000(%eax),%edx
c010b1cb:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b1ce:	89 50 40             	mov    %edx,0x40(%eax)
    return 0;
c010b1d1:	b8 00 00 00 00       	mov    $0x0,%eax
c010b1d6:	eb 0e                	jmp    c010b1e6 <copy_mm+0x11a>
bad_dup_cleanup_mmap:
    exit_mmap(mm);
    put_pgdir(mm);
bad_pgdir_cleanup_mm:
    mm_destroy(mm);
c010b1d8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b1db:	89 04 24             	mov    %eax,(%esp)
c010b1de:	e8 0d e5 ff ff       	call   c01096f0 <mm_destroy>
bad_mm:
    return ret;
c010b1e3:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c010b1e6:	c9                   	leave  
c010b1e7:	c3                   	ret    

c010b1e8 <copy_thread>:

// copy_thread - setup the trapframe on the  process's kernel stack top and
//             - setup the kernel entry point and stack of process
static void
copy_thread(struct proc_struct *proc, uintptr_t esp, struct trapframe *tf) {
c010b1e8:	55                   	push   %ebp
c010b1e9:	89 e5                	mov    %esp,%ebp
c010b1eb:	57                   	push   %edi
c010b1ec:	56                   	push   %esi
c010b1ed:	53                   	push   %ebx
    proc->tf = (struct trapframe *)(proc->kstack + KSTACKSIZE) - 1;
c010b1ee:	8b 45 08             	mov    0x8(%ebp),%eax
c010b1f1:	8b 40 0c             	mov    0xc(%eax),%eax
c010b1f4:	05 b4 1f 00 00       	add    $0x1fb4,%eax
c010b1f9:	89 c2                	mov    %eax,%edx
c010b1fb:	8b 45 08             	mov    0x8(%ebp),%eax
c010b1fe:	89 50 3c             	mov    %edx,0x3c(%eax)
    *(proc->tf) = *tf;
c010b201:	8b 45 08             	mov    0x8(%ebp),%eax
c010b204:	8b 40 3c             	mov    0x3c(%eax),%eax
c010b207:	8b 55 10             	mov    0x10(%ebp),%edx
c010b20a:	bb 4c 00 00 00       	mov    $0x4c,%ebx
c010b20f:	89 c1                	mov    %eax,%ecx
c010b211:	83 e1 01             	and    $0x1,%ecx
c010b214:	85 c9                	test   %ecx,%ecx
c010b216:	74 0e                	je     c010b226 <copy_thread+0x3e>
c010b218:	0f b6 0a             	movzbl (%edx),%ecx
c010b21b:	88 08                	mov    %cl,(%eax)
c010b21d:	83 c0 01             	add    $0x1,%eax
c010b220:	83 c2 01             	add    $0x1,%edx
c010b223:	83 eb 01             	sub    $0x1,%ebx
c010b226:	89 c1                	mov    %eax,%ecx
c010b228:	83 e1 02             	and    $0x2,%ecx
c010b22b:	85 c9                	test   %ecx,%ecx
c010b22d:	74 0f                	je     c010b23e <copy_thread+0x56>
c010b22f:	0f b7 0a             	movzwl (%edx),%ecx
c010b232:	66 89 08             	mov    %cx,(%eax)
c010b235:	83 c0 02             	add    $0x2,%eax
c010b238:	83 c2 02             	add    $0x2,%edx
c010b23b:	83 eb 02             	sub    $0x2,%ebx
c010b23e:	89 d9                	mov    %ebx,%ecx
c010b240:	c1 e9 02             	shr    $0x2,%ecx
c010b243:	89 c7                	mov    %eax,%edi
c010b245:	89 d6                	mov    %edx,%esi
c010b247:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
c010b249:	89 f2                	mov    %esi,%edx
c010b24b:	89 f8                	mov    %edi,%eax
c010b24d:	b9 00 00 00 00       	mov    $0x0,%ecx
c010b252:	89 de                	mov    %ebx,%esi
c010b254:	83 e6 02             	and    $0x2,%esi
c010b257:	85 f6                	test   %esi,%esi
c010b259:	74 0b                	je     c010b266 <copy_thread+0x7e>
c010b25b:	0f b7 34 0a          	movzwl (%edx,%ecx,1),%esi
c010b25f:	66 89 34 08          	mov    %si,(%eax,%ecx,1)
c010b263:	83 c1 02             	add    $0x2,%ecx
c010b266:	83 e3 01             	and    $0x1,%ebx
c010b269:	85 db                	test   %ebx,%ebx
c010b26b:	74 07                	je     c010b274 <copy_thread+0x8c>
c010b26d:	0f b6 14 0a          	movzbl (%edx,%ecx,1),%edx
c010b271:	88 14 08             	mov    %dl,(%eax,%ecx,1)
    proc->tf->tf_regs.reg_eax = 0;
c010b274:	8b 45 08             	mov    0x8(%ebp),%eax
c010b277:	8b 40 3c             	mov    0x3c(%eax),%eax
c010b27a:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
    proc->tf->tf_esp = esp;
c010b281:	8b 45 08             	mov    0x8(%ebp),%eax
c010b284:	8b 40 3c             	mov    0x3c(%eax),%eax
c010b287:	8b 55 0c             	mov    0xc(%ebp),%edx
c010b28a:	89 50 44             	mov    %edx,0x44(%eax)
    proc->tf->tf_eflags |= FL_IF;
c010b28d:	8b 45 08             	mov    0x8(%ebp),%eax
c010b290:	8b 40 3c             	mov    0x3c(%eax),%eax
c010b293:	8b 55 08             	mov    0x8(%ebp),%edx
c010b296:	8b 52 3c             	mov    0x3c(%edx),%edx
c010b299:	8b 52 40             	mov    0x40(%edx),%edx
c010b29c:	80 ce 02             	or     $0x2,%dh
c010b29f:	89 50 40             	mov    %edx,0x40(%eax)

    proc->context.eip = (uintptr_t)forkret;
c010b2a2:	ba f2 ad 10 c0       	mov    $0xc010adf2,%edx
c010b2a7:	8b 45 08             	mov    0x8(%ebp),%eax
c010b2aa:	89 50 1c             	mov    %edx,0x1c(%eax)
    proc->context.esp = (uintptr_t)(proc->tf);
c010b2ad:	8b 45 08             	mov    0x8(%ebp),%eax
c010b2b0:	8b 40 3c             	mov    0x3c(%eax),%eax
c010b2b3:	89 c2                	mov    %eax,%edx
c010b2b5:	8b 45 08             	mov    0x8(%ebp),%eax
c010b2b8:	89 50 20             	mov    %edx,0x20(%eax)
}
c010b2bb:	5b                   	pop    %ebx
c010b2bc:	5e                   	pop    %esi
c010b2bd:	5f                   	pop    %edi
c010b2be:	5d                   	pop    %ebp
c010b2bf:	c3                   	ret    

c010b2c0 <do_fork>:
 * @clone_flags: used to guide how to clone the child process
 * @stack:       the parent's user stack pointer. if stack==0, It means to fork a kernel thread.
 * @tf:          the trapframe info, which will be copied to child process's proc->tf
 */
int
do_fork(uint32_t clone_flags, uintptr_t stack, struct trapframe *tf) {
c010b2c0:	55                   	push   %ebp
c010b2c1:	89 e5                	mov    %esp,%ebp
c010b2c3:	83 ec 28             	sub    $0x28,%esp
    int ret = -E_NO_FREE_PROC;
c010b2c6:	c7 45 f4 fb ff ff ff 	movl   $0xfffffffb,-0xc(%ebp)
    struct proc_struct *proc;
    if (nr_process >= MAX_PROCESS) {
c010b2cd:	a1 a0 2f 1a c0       	mov    0xc01a2fa0,%eax
c010b2d2:	3d ff 0f 00 00       	cmp    $0xfff,%eax
c010b2d7:	7e 05                	jle    c010b2de <do_fork+0x1e>
        goto fork_out;
c010b2d9:	e9 ef 00 00 00       	jmp    c010b3cd <do_fork+0x10d>
    }
    ret = -E_NO_MEM;
c010b2de:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
    //    3. call copy_mm to dup OR share mm according clone_flag
    //    4. call copy_thread to setup tf & context in proc_struct
    //    5. insert proc_struct into hash_list && proc_list
    //    6. call wakup_proc to make the new child process RUNNABLE
    //    7. set ret vaule using child proc's pid
    if ((proc = alloc_proc()) == NULL) {
c010b2e5:	e8 fd f6 ff ff       	call   c010a9e7 <alloc_proc>
c010b2ea:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b2ed:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010b2f1:	75 05                	jne    c010b2f8 <do_fork+0x38>
        goto fork_out;
c010b2f3:	e9 d5 00 00 00       	jmp    c010b3cd <do_fork+0x10d>
    }

    proc->parent = current;
c010b2f8:	8b 15 88 0f 1a c0    	mov    0xc01a0f88,%edx
c010b2fe:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b301:	89 50 14             	mov    %edx,0x14(%eax)
    assert(current->wait_state == 0);
c010b304:	a1 88 0f 1a c0       	mov    0xc01a0f88,%eax
c010b309:	8b 40 6c             	mov    0x6c(%eax),%eax
c010b30c:	85 c0                	test   %eax,%eax
c010b30e:	74 24                	je     c010b334 <do_fork+0x74>
c010b310:	c7 44 24 0c 0c f8 10 	movl   $0xc010f80c,0xc(%esp)
c010b317:	c0 
c010b318:	c7 44 24 08 25 f8 10 	movl   $0xc010f825,0x8(%esp)
c010b31f:	c0 
c010b320:	c7 44 24 04 9b 01 00 	movl   $0x19b,0x4(%esp)
c010b327:	00 
c010b328:	c7 04 24 f8 f7 10 c0 	movl   $0xc010f7f8,(%esp)
c010b32f:	e8 24 6f ff ff       	call   c0102258 <__panic>

    if (setup_kstack(proc) != 0) {
c010b334:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b337:	89 04 24             	mov    %eax,(%esp)
c010b33a:	e8 5e fc ff ff       	call   c010af9d <setup_kstack>
c010b33f:	85 c0                	test   %eax,%eax
c010b341:	74 05                	je     c010b348 <do_fork+0x88>
        goto bad_fork_cleanup_proc;
c010b343:	e9 8a 00 00 00       	jmp    c010b3d2 <do_fork+0x112>
    }
    if (copy_mm(clone_flags, proc) != 0) {
c010b348:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b34b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b34f:	8b 45 08             	mov    0x8(%ebp),%eax
c010b352:	89 04 24             	mov    %eax,(%esp)
c010b355:	e8 72 fd ff ff       	call   c010b0cc <copy_mm>
c010b35a:	85 c0                	test   %eax,%eax
c010b35c:	74 0e                	je     c010b36c <do_fork+0xac>
        goto bad_fork_cleanup_kstack;
c010b35e:	90                   	nop
    ret = proc->pid;
fork_out:
    return ret;

bad_fork_cleanup_kstack:
    put_kstack(proc);
c010b35f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b362:	89 04 24             	mov    %eax,(%esp)
c010b365:	e8 6f fc ff ff       	call   c010afd9 <put_kstack>
c010b36a:	eb 66                	jmp    c010b3d2 <do_fork+0x112>
        goto bad_fork_cleanup_proc;
    }
    if (copy_mm(clone_flags, proc) != 0) {
        goto bad_fork_cleanup_kstack;
    }
    copy_thread(proc, stack, tf);
c010b36c:	8b 45 10             	mov    0x10(%ebp),%eax
c010b36f:	89 44 24 08          	mov    %eax,0x8(%esp)
c010b373:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b376:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b37a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b37d:	89 04 24             	mov    %eax,(%esp)
c010b380:	e8 63 fe ff ff       	call   c010b1e8 <copy_thread>

    bool intr_flag;
    local_intr_save(intr_flag);
c010b385:	e8 1b f4 ff ff       	call   c010a7a5 <__intr_save>
c010b38a:	89 45 ec             	mov    %eax,-0x14(%ebp)
    {
        proc->pid = get_pid();
c010b38d:	e8 f3 f8 ff ff       	call   c010ac85 <get_pid>
c010b392:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010b395:	89 42 04             	mov    %eax,0x4(%edx)
        hash_proc(proc);
c010b398:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b39b:	89 04 24             	mov    %eax,(%esp)
c010b39e:	e8 67 fa ff ff       	call   c010ae0a <hash_proc>
        set_links(proc);
c010b3a3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b3a6:	89 04 24             	mov    %eax,(%esp)
c010b3a9:	e8 af f7 ff ff       	call   c010ab5d <set_links>

    }
    local_intr_restore(intr_flag);
c010b3ae:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b3b1:	89 04 24             	mov    %eax,(%esp)
c010b3b4:	e8 16 f4 ff ff       	call   c010a7cf <__intr_restore>

    wakeup_proc(proc);
c010b3b9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b3bc:	89 04 24             	mov    %eax,(%esp)
c010b3bf:	e8 94 11 00 00       	call   c010c558 <wakeup_proc>

    ret = proc->pid;
c010b3c4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b3c7:	8b 40 04             	mov    0x4(%eax),%eax
c010b3ca:	89 45 f4             	mov    %eax,-0xc(%ebp)
fork_out:
    return ret;
c010b3cd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b3d0:	eb 0d                	jmp    c010b3df <do_fork+0x11f>

bad_fork_cleanup_kstack:
    put_kstack(proc);
bad_fork_cleanup_proc:
    kfree(proc);
c010b3d2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b3d5:	89 04 24             	mov    %eax,(%esp)
c010b3d8:	e8 30 ad ff ff       	call   c010610d <kfree>
    goto fork_out;
c010b3dd:	eb ee                	jmp    c010b3cd <do_fork+0x10d>
}
c010b3df:	c9                   	leave  
c010b3e0:	c3                   	ret    

c010b3e1 <do_exit>:
// do_exit - called by sys_exit
//   1. call exit_mmap & put_pgdir & mm_destroy to free the almost all memory space of process
//   2. set process' state as PROC_ZOMBIE, then call wakeup_proc(parent) to ask parent reclaim itself.
//   3. call scheduler to switch to other process
int
do_exit(int error_code) {
c010b3e1:	55                   	push   %ebp
c010b3e2:	89 e5                	mov    %esp,%ebp
c010b3e4:	83 ec 28             	sub    $0x28,%esp
    if (current == idleproc) {
c010b3e7:	8b 15 88 0f 1a c0    	mov    0xc01a0f88,%edx
c010b3ed:	a1 80 0f 1a c0       	mov    0xc01a0f80,%eax
c010b3f2:	39 c2                	cmp    %eax,%edx
c010b3f4:	75 1c                	jne    c010b412 <do_exit+0x31>
        panic("idleproc exit.\n");
c010b3f6:	c7 44 24 08 3a f8 10 	movl   $0xc010f83a,0x8(%esp)
c010b3fd:	c0 
c010b3fe:	c7 44 24 04 c3 01 00 	movl   $0x1c3,0x4(%esp)
c010b405:	00 
c010b406:	c7 04 24 f8 f7 10 c0 	movl   $0xc010f7f8,(%esp)
c010b40d:	e8 46 6e ff ff       	call   c0102258 <__panic>
    }
    if (current == initproc) {
c010b412:	8b 15 88 0f 1a c0    	mov    0xc01a0f88,%edx
c010b418:	a1 84 0f 1a c0       	mov    0xc01a0f84,%eax
c010b41d:	39 c2                	cmp    %eax,%edx
c010b41f:	75 1c                	jne    c010b43d <do_exit+0x5c>
        panic("initproc exit.\n");
c010b421:	c7 44 24 08 4a f8 10 	movl   $0xc010f84a,0x8(%esp)
c010b428:	c0 
c010b429:	c7 44 24 04 c6 01 00 	movl   $0x1c6,0x4(%esp)
c010b430:	00 
c010b431:	c7 04 24 f8 f7 10 c0 	movl   $0xc010f7f8,(%esp)
c010b438:	e8 1b 6e ff ff       	call   c0102258 <__panic>
    }
    
    struct mm_struct *mm = current->mm;
c010b43d:	a1 88 0f 1a c0       	mov    0xc01a0f88,%eax
c010b442:	8b 40 18             	mov    0x18(%eax),%eax
c010b445:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (mm != NULL) {
c010b448:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b44c:	74 4a                	je     c010b498 <do_exit+0xb7>
        lcr3(boot_cr3);
c010b44e:	a1 cc 2f 1a c0       	mov    0xc01a2fcc,%eax
c010b453:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010b456:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b459:	0f 22 d8             	mov    %eax,%cr3
        if (mm_count_dec(mm) == 0) {
c010b45c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b45f:	89 04 24             	mov    %eax,(%esp)
c010b462:	e8 2e f5 ff ff       	call   c010a995 <mm_count_dec>
c010b467:	85 c0                	test   %eax,%eax
c010b469:	75 21                	jne    c010b48c <do_exit+0xab>
            exit_mmap(mm);
c010b46b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b46e:	89 04 24             	mov    %eax,(%esp)
c010b471:	e8 39 e5 ff ff       	call   c01099af <exit_mmap>
            put_pgdir(mm);
c010b476:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b479:	89 04 24             	mov    %eax,(%esp)
c010b47c:	e8 25 fc ff ff       	call   c010b0a6 <put_pgdir>
            mm_destroy(mm);
c010b481:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b484:	89 04 24             	mov    %eax,(%esp)
c010b487:	e8 64 e2 ff ff       	call   c01096f0 <mm_destroy>
        }
        current->mm = NULL;
c010b48c:	a1 88 0f 1a c0       	mov    0xc01a0f88,%eax
c010b491:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
    }
    current->state = PROC_ZOMBIE;
c010b498:	a1 88 0f 1a c0       	mov    0xc01a0f88,%eax
c010b49d:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
    current->exit_code = error_code;
c010b4a3:	a1 88 0f 1a c0       	mov    0xc01a0f88,%eax
c010b4a8:	8b 55 08             	mov    0x8(%ebp),%edx
c010b4ab:	89 50 68             	mov    %edx,0x68(%eax)
    
    bool intr_flag;
    struct proc_struct *proc;
    local_intr_save(intr_flag);
c010b4ae:	e8 f2 f2 ff ff       	call   c010a7a5 <__intr_save>
c010b4b3:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        proc = current->parent;
c010b4b6:	a1 88 0f 1a c0       	mov    0xc01a0f88,%eax
c010b4bb:	8b 40 14             	mov    0x14(%eax),%eax
c010b4be:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (proc->wait_state == WT_CHILD) {
c010b4c1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b4c4:	8b 40 6c             	mov    0x6c(%eax),%eax
c010b4c7:	3d 01 00 00 80       	cmp    $0x80000001,%eax
c010b4cc:	75 10                	jne    c010b4de <do_exit+0xfd>
            wakeup_proc(proc);
c010b4ce:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b4d1:	89 04 24             	mov    %eax,(%esp)
c010b4d4:	e8 7f 10 00 00       	call   c010c558 <wakeup_proc>
        }
        while (current->cptr != NULL) {
c010b4d9:	e9 8b 00 00 00       	jmp    c010b569 <do_exit+0x188>
c010b4de:	e9 86 00 00 00       	jmp    c010b569 <do_exit+0x188>
            proc = current->cptr;
c010b4e3:	a1 88 0f 1a c0       	mov    0xc01a0f88,%eax
c010b4e8:	8b 40 70             	mov    0x70(%eax),%eax
c010b4eb:	89 45 ec             	mov    %eax,-0x14(%ebp)
            current->cptr = proc->optr;
c010b4ee:	a1 88 0f 1a c0       	mov    0xc01a0f88,%eax
c010b4f3:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010b4f6:	8b 52 78             	mov    0x78(%edx),%edx
c010b4f9:	89 50 70             	mov    %edx,0x70(%eax)
    
            proc->yptr = NULL;
c010b4fc:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b4ff:	c7 40 74 00 00 00 00 	movl   $0x0,0x74(%eax)
            if ((proc->optr = initproc->cptr) != NULL) {
c010b506:	a1 84 0f 1a c0       	mov    0xc01a0f84,%eax
c010b50b:	8b 50 70             	mov    0x70(%eax),%edx
c010b50e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b511:	89 50 78             	mov    %edx,0x78(%eax)
c010b514:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b517:	8b 40 78             	mov    0x78(%eax),%eax
c010b51a:	85 c0                	test   %eax,%eax
c010b51c:	74 0e                	je     c010b52c <do_exit+0x14b>
                initproc->cptr->yptr = proc;
c010b51e:	a1 84 0f 1a c0       	mov    0xc01a0f84,%eax
c010b523:	8b 40 70             	mov    0x70(%eax),%eax
c010b526:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010b529:	89 50 74             	mov    %edx,0x74(%eax)
            }
            proc->parent = initproc;
c010b52c:	8b 15 84 0f 1a c0    	mov    0xc01a0f84,%edx
c010b532:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b535:	89 50 14             	mov    %edx,0x14(%eax)
            initproc->cptr = proc;
c010b538:	a1 84 0f 1a c0       	mov    0xc01a0f84,%eax
c010b53d:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010b540:	89 50 70             	mov    %edx,0x70(%eax)
            if (proc->state == PROC_ZOMBIE) {
c010b543:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b546:	8b 00                	mov    (%eax),%eax
c010b548:	83 f8 03             	cmp    $0x3,%eax
c010b54b:	75 1c                	jne    c010b569 <do_exit+0x188>
                if (initproc->wait_state == WT_CHILD) {
c010b54d:	a1 84 0f 1a c0       	mov    0xc01a0f84,%eax
c010b552:	8b 40 6c             	mov    0x6c(%eax),%eax
c010b555:	3d 01 00 00 80       	cmp    $0x80000001,%eax
c010b55a:	75 0d                	jne    c010b569 <do_exit+0x188>
                    wakeup_proc(initproc);
c010b55c:	a1 84 0f 1a c0       	mov    0xc01a0f84,%eax
c010b561:	89 04 24             	mov    %eax,(%esp)
c010b564:	e8 ef 0f 00 00       	call   c010c558 <wakeup_proc>
    {
        proc = current->parent;
        if (proc->wait_state == WT_CHILD) {
            wakeup_proc(proc);
        }
        while (current->cptr != NULL) {
c010b569:	a1 88 0f 1a c0       	mov    0xc01a0f88,%eax
c010b56e:	8b 40 70             	mov    0x70(%eax),%eax
c010b571:	85 c0                	test   %eax,%eax
c010b573:	0f 85 6a ff ff ff    	jne    c010b4e3 <do_exit+0x102>
                    wakeup_proc(initproc);
                }
            }
        }
    }
    local_intr_restore(intr_flag);
c010b579:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b57c:	89 04 24             	mov    %eax,(%esp)
c010b57f:	e8 4b f2 ff ff       	call   c010a7cf <__intr_restore>
    
    schedule();
c010b584:	e8 53 10 00 00       	call   c010c5dc <schedule>
    panic("do_exit will not return!! %d.\n", current->pid);
c010b589:	a1 88 0f 1a c0       	mov    0xc01a0f88,%eax
c010b58e:	8b 40 04             	mov    0x4(%eax),%eax
c010b591:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010b595:	c7 44 24 08 5c f8 10 	movl   $0xc010f85c,0x8(%esp)
c010b59c:	c0 
c010b59d:	c7 44 24 04 f2 01 00 	movl   $0x1f2,0x4(%esp)
c010b5a4:	00 
c010b5a5:	c7 04 24 f8 f7 10 c0 	movl   $0xc010f7f8,(%esp)
c010b5ac:	e8 a7 6c ff ff       	call   c0102258 <__panic>

c010b5b1 <load_icode>:
/* load_icode - load the content of binary program(ELF format) as the new content of current process
 * @binary:  the memory addr of the content of binary program
 * @size:  the size of the content of binary program
 */
static int
load_icode(unsigned char *binary, size_t size) {
c010b5b1:	55                   	push   %ebp
c010b5b2:	89 e5                	mov    %esp,%ebp
c010b5b4:	83 ec 78             	sub    $0x78,%esp
    if (current->mm != NULL) {
c010b5b7:	a1 88 0f 1a c0       	mov    0xc01a0f88,%eax
c010b5bc:	8b 40 18             	mov    0x18(%eax),%eax
c010b5bf:	85 c0                	test   %eax,%eax
c010b5c1:	74 1c                	je     c010b5df <load_icode+0x2e>
        panic("load_icode: current->mm must be empty.\n");
c010b5c3:	c7 44 24 08 7c f8 10 	movl   $0xc010f87c,0x8(%esp)
c010b5ca:	c0 
c010b5cb:	c7 44 24 04 fc 01 00 	movl   $0x1fc,0x4(%esp)
c010b5d2:	00 
c010b5d3:	c7 04 24 f8 f7 10 c0 	movl   $0xc010f7f8,(%esp)
c010b5da:	e8 79 6c ff ff       	call   c0102258 <__panic>
    }

    int ret = -E_NO_MEM;
c010b5df:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
    struct mm_struct *mm;
    //(1) create a new mm for current process
    if ((mm = mm_create()) == NULL) {
c010b5e6:	e8 ac dd ff ff       	call   c0109397 <mm_create>
c010b5eb:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010b5ee:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
c010b5f2:	75 06                	jne    c010b5fa <load_icode+0x49>
        goto bad_mm;
c010b5f4:	90                   	nop
bad_elf_cleanup_pgdir:
    put_pgdir(mm);
bad_pgdir_cleanup_mm:
    mm_destroy(mm);
bad_mm:
    goto out;
c010b5f5:	e9 ef 05 00 00       	jmp    c010bbe9 <load_icode+0x638>
    //(1) create a new mm for current process
    if ((mm = mm_create()) == NULL) {
        goto bad_mm;
    }
    //(2) create a new PDT, and mm->pgdir= kernel virtual addr of PDT
    if (setup_pgdir(mm) != 0) {
c010b5fa:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b5fd:	89 04 24             	mov    %eax,(%esp)
c010b600:	e8 fa f9 ff ff       	call   c010afff <setup_pgdir>
c010b605:	85 c0                	test   %eax,%eax
c010b607:	74 05                	je     c010b60e <load_icode+0x5d>
        goto bad_pgdir_cleanup_mm;
c010b609:	e9 f6 05 00 00       	jmp    c010bc04 <load_icode+0x653>
    }
    //(3) copy TEXT/DATA section, build BSS parts in binary to memory space of process
    struct Page *page;
    //(3.1) get the file header of the bianry program (ELF format)
    struct elfhdr *elf = (struct elfhdr *)binary;
c010b60e:	8b 45 08             	mov    0x8(%ebp),%eax
c010b611:	89 45 cc             	mov    %eax,-0x34(%ebp)
    //(3.2) get the entry of the program section headers of the bianry program (ELF format)
    struct proghdr *ph = (struct proghdr *)(binary + elf->e_phoff);
c010b614:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010b617:	8b 50 1c             	mov    0x1c(%eax),%edx
c010b61a:	8b 45 08             	mov    0x8(%ebp),%eax
c010b61d:	01 d0                	add    %edx,%eax
c010b61f:	89 45 ec             	mov    %eax,-0x14(%ebp)
    //(3.3) This program is valid?
    if (elf->e_magic != ELF_MAGIC) {
c010b622:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010b625:	8b 00                	mov    (%eax),%eax
c010b627:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
c010b62c:	74 0c                	je     c010b63a <load_icode+0x89>
        ret = -E_INVAL_ELF;
c010b62e:	c7 45 f4 f8 ff ff ff 	movl   $0xfffffff8,-0xc(%ebp)
        goto bad_elf_cleanup_pgdir;
c010b635:	e9 bf 05 00 00       	jmp    c010bbf9 <load_icode+0x648>
    }

    uint32_t vm_flags, perm;
    struct proghdr *ph_end = ph + elf->e_phnum;
c010b63a:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010b63d:	0f b7 40 2c          	movzwl 0x2c(%eax),%eax
c010b641:	0f b7 c0             	movzwl %ax,%eax
c010b644:	c1 e0 05             	shl    $0x5,%eax
c010b647:	89 c2                	mov    %eax,%edx
c010b649:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b64c:	01 d0                	add    %edx,%eax
c010b64e:	89 45 c8             	mov    %eax,-0x38(%ebp)
    for (; ph < ph_end; ph ++) {
c010b651:	e9 13 03 00 00       	jmp    c010b969 <load_icode+0x3b8>
    //(3.4) find every program section headers
        if (ph->p_type != ELF_PT_LOAD) {
c010b656:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b659:	8b 00                	mov    (%eax),%eax
c010b65b:	83 f8 01             	cmp    $0x1,%eax
c010b65e:	74 05                	je     c010b665 <load_icode+0xb4>
            continue ;
c010b660:	e9 00 03 00 00       	jmp    c010b965 <load_icode+0x3b4>
        }
        if (ph->p_filesz > ph->p_memsz) {
c010b665:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b668:	8b 50 10             	mov    0x10(%eax),%edx
c010b66b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b66e:	8b 40 14             	mov    0x14(%eax),%eax
c010b671:	39 c2                	cmp    %eax,%edx
c010b673:	76 0c                	jbe    c010b681 <load_icode+0xd0>
            ret = -E_INVAL_ELF;
c010b675:	c7 45 f4 f8 ff ff ff 	movl   $0xfffffff8,-0xc(%ebp)
            goto bad_cleanup_mmap;
c010b67c:	e9 6d 05 00 00       	jmp    c010bbee <load_icode+0x63d>
        }
        if (ph->p_filesz == 0) {
c010b681:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b684:	8b 40 10             	mov    0x10(%eax),%eax
c010b687:	85 c0                	test   %eax,%eax
c010b689:	75 05                	jne    c010b690 <load_icode+0xdf>
            continue ;
c010b68b:	e9 d5 02 00 00       	jmp    c010b965 <load_icode+0x3b4>
        }
    //(3.5) call mm_map fun to setup the new vma ( ph->p_va, ph->p_memsz)
        vm_flags = 0, perm = PTE_U;
c010b690:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c010b697:	c7 45 e4 04 00 00 00 	movl   $0x4,-0x1c(%ebp)
        if (ph->p_flags & ELF_PF_X) vm_flags |= VM_EXEC;
c010b69e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b6a1:	8b 40 18             	mov    0x18(%eax),%eax
c010b6a4:	83 e0 01             	and    $0x1,%eax
c010b6a7:	85 c0                	test   %eax,%eax
c010b6a9:	74 04                	je     c010b6af <load_icode+0xfe>
c010b6ab:	83 4d e8 04          	orl    $0x4,-0x18(%ebp)
        if (ph->p_flags & ELF_PF_W) vm_flags |= VM_WRITE;
c010b6af:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b6b2:	8b 40 18             	mov    0x18(%eax),%eax
c010b6b5:	83 e0 02             	and    $0x2,%eax
c010b6b8:	85 c0                	test   %eax,%eax
c010b6ba:	74 04                	je     c010b6c0 <load_icode+0x10f>
c010b6bc:	83 4d e8 02          	orl    $0x2,-0x18(%ebp)
        if (ph->p_flags & ELF_PF_R) vm_flags |= VM_READ;
c010b6c0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b6c3:	8b 40 18             	mov    0x18(%eax),%eax
c010b6c6:	83 e0 04             	and    $0x4,%eax
c010b6c9:	85 c0                	test   %eax,%eax
c010b6cb:	74 04                	je     c010b6d1 <load_icode+0x120>
c010b6cd:	83 4d e8 01          	orl    $0x1,-0x18(%ebp)
        if (vm_flags & VM_WRITE) perm |= PTE_W;
c010b6d1:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b6d4:	83 e0 02             	and    $0x2,%eax
c010b6d7:	85 c0                	test   %eax,%eax
c010b6d9:	74 04                	je     c010b6df <load_icode+0x12e>
c010b6db:	83 4d e4 02          	orl    $0x2,-0x1c(%ebp)
        if ((ret = mm_map(mm, ph->p_va, ph->p_memsz, vm_flags, NULL)) != 0) {
c010b6df:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b6e2:	8b 50 14             	mov    0x14(%eax),%edx
c010b6e5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b6e8:	8b 40 08             	mov    0x8(%eax),%eax
c010b6eb:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c010b6f2:	00 
c010b6f3:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c010b6f6:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c010b6fa:	89 54 24 08          	mov    %edx,0x8(%esp)
c010b6fe:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b702:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b705:	89 04 24             	mov    %eax,(%esp)
c010b708:	e8 85 e0 ff ff       	call   c0109792 <mm_map>
c010b70d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b710:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b714:	74 05                	je     c010b71b <load_icode+0x16a>
            goto bad_cleanup_mmap;
c010b716:	e9 d3 04 00 00       	jmp    c010bbee <load_icode+0x63d>
        }
        unsigned char *from = binary + ph->p_offset;
c010b71b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b71e:	8b 50 04             	mov    0x4(%eax),%edx
c010b721:	8b 45 08             	mov    0x8(%ebp),%eax
c010b724:	01 d0                	add    %edx,%eax
c010b726:	89 45 e0             	mov    %eax,-0x20(%ebp)
        size_t off, size;
        uintptr_t start = ph->p_va, end, la = ROUNDDOWN(start, PGSIZE);
c010b729:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b72c:	8b 40 08             	mov    0x8(%eax),%eax
c010b72f:	89 45 d8             	mov    %eax,-0x28(%ebp)
c010b732:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010b735:	89 45 c4             	mov    %eax,-0x3c(%ebp)
c010b738:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010b73b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010b740:	89 45 d4             	mov    %eax,-0x2c(%ebp)

        ret = -E_NO_MEM;
c010b743:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

     //(3.6) alloc memory, and  copy the contents of every program section (from, from+end) to process's memory (la, la+end)
        end = ph->p_va + ph->p_filesz;
c010b74a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b74d:	8b 50 08             	mov    0x8(%eax),%edx
c010b750:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b753:	8b 40 10             	mov    0x10(%eax),%eax
c010b756:	01 d0                	add    %edx,%eax
c010b758:	89 45 c0             	mov    %eax,-0x40(%ebp)
     //(3.6.1) copy TEXT/DATA section of bianry program
        while (start < end) {
c010b75b:	e9 90 00 00 00       	jmp    c010b7f0 <load_icode+0x23f>
            if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL) {
c010b760:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b763:	8b 40 0c             	mov    0xc(%eax),%eax
c010b766:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010b769:	89 54 24 08          	mov    %edx,0x8(%esp)
c010b76d:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010b770:	89 54 24 04          	mov    %edx,0x4(%esp)
c010b774:	89 04 24             	mov    %eax,(%esp)
c010b777:	e8 2c bd ff ff       	call   c01074a8 <pgdir_alloc_page>
c010b77c:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b77f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010b783:	75 05                	jne    c010b78a <load_icode+0x1d9>
                goto bad_cleanup_mmap;
c010b785:	e9 64 04 00 00       	jmp    c010bbee <load_icode+0x63d>
            }
            off = start - la, size = PGSIZE - off, la += PGSIZE;
c010b78a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010b78d:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010b790:	29 c2                	sub    %eax,%edx
c010b792:	89 d0                	mov    %edx,%eax
c010b794:	89 45 bc             	mov    %eax,-0x44(%ebp)
c010b797:	b8 00 10 00 00       	mov    $0x1000,%eax
c010b79c:	2b 45 bc             	sub    -0x44(%ebp),%eax
c010b79f:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010b7a2:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
            if (end < la) {
c010b7a9:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010b7ac:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010b7af:	73 0d                	jae    c010b7be <load_icode+0x20d>
                size -= la - end;
c010b7b1:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010b7b4:	8b 55 c0             	mov    -0x40(%ebp),%edx
c010b7b7:	29 c2                	sub    %eax,%edx
c010b7b9:	89 d0                	mov    %edx,%eax
c010b7bb:	01 45 dc             	add    %eax,-0x24(%ebp)
            }
            memcpy(page2kva(page) + off, from, size);
c010b7be:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b7c1:	89 04 24             	mov    %eax,(%esp)
c010b7c4:	e8 14 f1 ff ff       	call   c010a8dd <page2kva>
c010b7c9:	8b 55 bc             	mov    -0x44(%ebp),%edx
c010b7cc:	01 c2                	add    %eax,%edx
c010b7ce:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010b7d1:	89 44 24 08          	mov    %eax,0x8(%esp)
c010b7d5:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010b7d8:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b7dc:	89 14 24             	mov    %edx,(%esp)
c010b7df:	e8 45 1c 00 00       	call   c010d429 <memcpy>
            start += size, from += size;
c010b7e4:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010b7e7:	01 45 d8             	add    %eax,-0x28(%ebp)
c010b7ea:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010b7ed:	01 45 e0             	add    %eax,-0x20(%ebp)
        ret = -E_NO_MEM;

     //(3.6) alloc memory, and  copy the contents of every program section (from, from+end) to process's memory (la, la+end)
        end = ph->p_va + ph->p_filesz;
     //(3.6.1) copy TEXT/DATA section of bianry program
        while (start < end) {
c010b7f0:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010b7f3:	3b 45 c0             	cmp    -0x40(%ebp),%eax
c010b7f6:	0f 82 64 ff ff ff    	jb     c010b760 <load_icode+0x1af>
            memcpy(page2kva(page) + off, from, size);
            start += size, from += size;
        }

      //(3.6.2) build BSS section of binary program
        end = ph->p_va + ph->p_memsz;
c010b7fc:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b7ff:	8b 50 08             	mov    0x8(%eax),%edx
c010b802:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b805:	8b 40 14             	mov    0x14(%eax),%eax
c010b808:	01 d0                	add    %edx,%eax
c010b80a:	89 45 c0             	mov    %eax,-0x40(%ebp)
        if (start < la) {
c010b80d:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010b810:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010b813:	0f 83 b0 00 00 00    	jae    c010b8c9 <load_icode+0x318>
            /* ph->p_memsz == ph->p_filesz */
            if (start == end) {
c010b819:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010b81c:	3b 45 c0             	cmp    -0x40(%ebp),%eax
c010b81f:	75 05                	jne    c010b826 <load_icode+0x275>
                continue ;
c010b821:	e9 3f 01 00 00       	jmp    c010b965 <load_icode+0x3b4>
            }
            off = start + PGSIZE - la, size = PGSIZE - off;
c010b826:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010b829:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010b82c:	29 c2                	sub    %eax,%edx
c010b82e:	89 d0                	mov    %edx,%eax
c010b830:	05 00 10 00 00       	add    $0x1000,%eax
c010b835:	89 45 bc             	mov    %eax,-0x44(%ebp)
c010b838:	b8 00 10 00 00       	mov    $0x1000,%eax
c010b83d:	2b 45 bc             	sub    -0x44(%ebp),%eax
c010b840:	89 45 dc             	mov    %eax,-0x24(%ebp)
            if (end < la) {
c010b843:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010b846:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010b849:	73 0d                	jae    c010b858 <load_icode+0x2a7>
                size -= la - end;
c010b84b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010b84e:	8b 55 c0             	mov    -0x40(%ebp),%edx
c010b851:	29 c2                	sub    %eax,%edx
c010b853:	89 d0                	mov    %edx,%eax
c010b855:	01 45 dc             	add    %eax,-0x24(%ebp)
            }
            memset(page2kva(page) + off, 0, size);
c010b858:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b85b:	89 04 24             	mov    %eax,(%esp)
c010b85e:	e8 7a f0 ff ff       	call   c010a8dd <page2kva>
c010b863:	8b 55 bc             	mov    -0x44(%ebp),%edx
c010b866:	01 c2                	add    %eax,%edx
c010b868:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010b86b:	89 44 24 08          	mov    %eax,0x8(%esp)
c010b86f:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010b876:	00 
c010b877:	89 14 24             	mov    %edx,(%esp)
c010b87a:	e8 c8 1a 00 00       	call   c010d347 <memset>
            start += size;
c010b87f:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010b882:	01 45 d8             	add    %eax,-0x28(%ebp)
            assert((end < la && start == end) || (end >= la && start == la));
c010b885:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010b888:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010b88b:	73 08                	jae    c010b895 <load_icode+0x2e4>
c010b88d:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010b890:	3b 45 c0             	cmp    -0x40(%ebp),%eax
c010b893:	74 34                	je     c010b8c9 <load_icode+0x318>
c010b895:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010b898:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010b89b:	72 08                	jb     c010b8a5 <load_icode+0x2f4>
c010b89d:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010b8a0:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010b8a3:	74 24                	je     c010b8c9 <load_icode+0x318>
c010b8a5:	c7 44 24 0c a4 f8 10 	movl   $0xc010f8a4,0xc(%esp)
c010b8ac:	c0 
c010b8ad:	c7 44 24 08 25 f8 10 	movl   $0xc010f825,0x8(%esp)
c010b8b4:	c0 
c010b8b5:	c7 44 24 04 4e 02 00 	movl   $0x24e,0x4(%esp)
c010b8bc:	00 
c010b8bd:	c7 04 24 f8 f7 10 c0 	movl   $0xc010f7f8,(%esp)
c010b8c4:	e8 8f 69 ff ff       	call   c0102258 <__panic>
        }
        while (start < end) {
c010b8c9:	e9 8b 00 00 00       	jmp    c010b959 <load_icode+0x3a8>
            if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL) {
c010b8ce:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b8d1:	8b 40 0c             	mov    0xc(%eax),%eax
c010b8d4:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010b8d7:	89 54 24 08          	mov    %edx,0x8(%esp)
c010b8db:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010b8de:	89 54 24 04          	mov    %edx,0x4(%esp)
c010b8e2:	89 04 24             	mov    %eax,(%esp)
c010b8e5:	e8 be bb ff ff       	call   c01074a8 <pgdir_alloc_page>
c010b8ea:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b8ed:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010b8f1:	75 05                	jne    c010b8f8 <load_icode+0x347>
                goto bad_cleanup_mmap;
c010b8f3:	e9 f6 02 00 00       	jmp    c010bbee <load_icode+0x63d>
            }
            off = start - la, size = PGSIZE - off, la += PGSIZE;
c010b8f8:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010b8fb:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010b8fe:	29 c2                	sub    %eax,%edx
c010b900:	89 d0                	mov    %edx,%eax
c010b902:	89 45 bc             	mov    %eax,-0x44(%ebp)
c010b905:	b8 00 10 00 00       	mov    $0x1000,%eax
c010b90a:	2b 45 bc             	sub    -0x44(%ebp),%eax
c010b90d:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010b910:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
            if (end < la) {
c010b917:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010b91a:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010b91d:	73 0d                	jae    c010b92c <load_icode+0x37b>
                size -= la - end;
c010b91f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010b922:	8b 55 c0             	mov    -0x40(%ebp),%edx
c010b925:	29 c2                	sub    %eax,%edx
c010b927:	89 d0                	mov    %edx,%eax
c010b929:	01 45 dc             	add    %eax,-0x24(%ebp)
            }
            memset(page2kva(page) + off, 0, size);
c010b92c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b92f:	89 04 24             	mov    %eax,(%esp)
c010b932:	e8 a6 ef ff ff       	call   c010a8dd <page2kva>
c010b937:	8b 55 bc             	mov    -0x44(%ebp),%edx
c010b93a:	01 c2                	add    %eax,%edx
c010b93c:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010b93f:	89 44 24 08          	mov    %eax,0x8(%esp)
c010b943:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010b94a:	00 
c010b94b:	89 14 24             	mov    %edx,(%esp)
c010b94e:	e8 f4 19 00 00       	call   c010d347 <memset>
            start += size;
c010b953:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010b956:	01 45 d8             	add    %eax,-0x28(%ebp)
            }
            memset(page2kva(page) + off, 0, size);
            start += size;
            assert((end < la && start == end) || (end >= la && start == la));
        }
        while (start < end) {
c010b959:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010b95c:	3b 45 c0             	cmp    -0x40(%ebp),%eax
c010b95f:	0f 82 69 ff ff ff    	jb     c010b8ce <load_icode+0x31d>
        goto bad_elf_cleanup_pgdir;
    }

    uint32_t vm_flags, perm;
    struct proghdr *ph_end = ph + elf->e_phnum;
    for (; ph < ph_end; ph ++) {
c010b965:	83 45 ec 20          	addl   $0x20,-0x14(%ebp)
c010b969:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b96c:	3b 45 c8             	cmp    -0x38(%ebp),%eax
c010b96f:	0f 82 e1 fc ff ff    	jb     c010b656 <load_icode+0xa5>
            memset(page2kva(page) + off, 0, size);
            start += size;
        }
    }
    //(4) build user stack memory
    vm_flags = VM_READ | VM_WRITE | VM_STACK;
c010b975:	c7 45 e8 0b 00 00 00 	movl   $0xb,-0x18(%ebp)
    if ((ret = mm_map(mm, USTACKTOP - USTACKSIZE, USTACKSIZE, vm_flags, NULL)) != 0) {
c010b97c:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c010b983:	00 
c010b984:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b987:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010b98b:	c7 44 24 08 00 00 10 	movl   $0x100000,0x8(%esp)
c010b992:	00 
c010b993:	c7 44 24 04 00 00 f0 	movl   $0xaff00000,0x4(%esp)
c010b99a:	af 
c010b99b:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b99e:	89 04 24             	mov    %eax,(%esp)
c010b9a1:	e8 ec dd ff ff       	call   c0109792 <mm_map>
c010b9a6:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b9a9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b9ad:	74 05                	je     c010b9b4 <load_icode+0x403>
        goto bad_cleanup_mmap;
c010b9af:	e9 3a 02 00 00       	jmp    c010bbee <load_icode+0x63d>
    }
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-PGSIZE , PTE_USER) != NULL);
c010b9b4:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b9b7:	8b 40 0c             	mov    0xc(%eax),%eax
c010b9ba:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
c010b9c1:	00 
c010b9c2:	c7 44 24 04 00 f0 ff 	movl   $0xaffff000,0x4(%esp)
c010b9c9:	af 
c010b9ca:	89 04 24             	mov    %eax,(%esp)
c010b9cd:	e8 d6 ba ff ff       	call   c01074a8 <pgdir_alloc_page>
c010b9d2:	85 c0                	test   %eax,%eax
c010b9d4:	75 24                	jne    c010b9fa <load_icode+0x449>
c010b9d6:	c7 44 24 0c e0 f8 10 	movl   $0xc010f8e0,0xc(%esp)
c010b9dd:	c0 
c010b9de:	c7 44 24 08 25 f8 10 	movl   $0xc010f825,0x8(%esp)
c010b9e5:	c0 
c010b9e6:	c7 44 24 04 61 02 00 	movl   $0x261,0x4(%esp)
c010b9ed:	00 
c010b9ee:	c7 04 24 f8 f7 10 c0 	movl   $0xc010f7f8,(%esp)
c010b9f5:	e8 5e 68 ff ff       	call   c0102258 <__panic>
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-2*PGSIZE , PTE_USER) != NULL);
c010b9fa:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b9fd:	8b 40 0c             	mov    0xc(%eax),%eax
c010ba00:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
c010ba07:	00 
c010ba08:	c7 44 24 04 00 e0 ff 	movl   $0xafffe000,0x4(%esp)
c010ba0f:	af 
c010ba10:	89 04 24             	mov    %eax,(%esp)
c010ba13:	e8 90 ba ff ff       	call   c01074a8 <pgdir_alloc_page>
c010ba18:	85 c0                	test   %eax,%eax
c010ba1a:	75 24                	jne    c010ba40 <load_icode+0x48f>
c010ba1c:	c7 44 24 0c 24 f9 10 	movl   $0xc010f924,0xc(%esp)
c010ba23:	c0 
c010ba24:	c7 44 24 08 25 f8 10 	movl   $0xc010f825,0x8(%esp)
c010ba2b:	c0 
c010ba2c:	c7 44 24 04 62 02 00 	movl   $0x262,0x4(%esp)
c010ba33:	00 
c010ba34:	c7 04 24 f8 f7 10 c0 	movl   $0xc010f7f8,(%esp)
c010ba3b:	e8 18 68 ff ff       	call   c0102258 <__panic>
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-3*PGSIZE , PTE_USER) != NULL);
c010ba40:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010ba43:	8b 40 0c             	mov    0xc(%eax),%eax
c010ba46:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
c010ba4d:	00 
c010ba4e:	c7 44 24 04 00 d0 ff 	movl   $0xafffd000,0x4(%esp)
c010ba55:	af 
c010ba56:	89 04 24             	mov    %eax,(%esp)
c010ba59:	e8 4a ba ff ff       	call   c01074a8 <pgdir_alloc_page>
c010ba5e:	85 c0                	test   %eax,%eax
c010ba60:	75 24                	jne    c010ba86 <load_icode+0x4d5>
c010ba62:	c7 44 24 0c 68 f9 10 	movl   $0xc010f968,0xc(%esp)
c010ba69:	c0 
c010ba6a:	c7 44 24 08 25 f8 10 	movl   $0xc010f825,0x8(%esp)
c010ba71:	c0 
c010ba72:	c7 44 24 04 63 02 00 	movl   $0x263,0x4(%esp)
c010ba79:	00 
c010ba7a:	c7 04 24 f8 f7 10 c0 	movl   $0xc010f7f8,(%esp)
c010ba81:	e8 d2 67 ff ff       	call   c0102258 <__panic>
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-4*PGSIZE , PTE_USER) != NULL);
c010ba86:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010ba89:	8b 40 0c             	mov    0xc(%eax),%eax
c010ba8c:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
c010ba93:	00 
c010ba94:	c7 44 24 04 00 c0 ff 	movl   $0xafffc000,0x4(%esp)
c010ba9b:	af 
c010ba9c:	89 04 24             	mov    %eax,(%esp)
c010ba9f:	e8 04 ba ff ff       	call   c01074a8 <pgdir_alloc_page>
c010baa4:	85 c0                	test   %eax,%eax
c010baa6:	75 24                	jne    c010bacc <load_icode+0x51b>
c010baa8:	c7 44 24 0c ac f9 10 	movl   $0xc010f9ac,0xc(%esp)
c010baaf:	c0 
c010bab0:	c7 44 24 08 25 f8 10 	movl   $0xc010f825,0x8(%esp)
c010bab7:	c0 
c010bab8:	c7 44 24 04 64 02 00 	movl   $0x264,0x4(%esp)
c010babf:	00 
c010bac0:	c7 04 24 f8 f7 10 c0 	movl   $0xc010f7f8,(%esp)
c010bac7:	e8 8c 67 ff ff       	call   c0102258 <__panic>
    
    //(5) set current process's mm, sr3, and set CR3 reg = physical addr of Page Directory
    mm_count_inc(mm);
c010bacc:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010bacf:	89 04 24             	mov    %eax,(%esp)
c010bad2:	e8 a4 ee ff ff       	call   c010a97b <mm_count_inc>
    current->mm = mm;
c010bad7:	a1 88 0f 1a c0       	mov    0xc01a0f88,%eax
c010badc:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010badf:	89 50 18             	mov    %edx,0x18(%eax)
    current->cr3 = PADDR(mm->pgdir);
c010bae2:	a1 88 0f 1a c0       	mov    0xc01a0f88,%eax
c010bae7:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010baea:	8b 52 0c             	mov    0xc(%edx),%edx
c010baed:	89 55 b8             	mov    %edx,-0x48(%ebp)
c010baf0:	81 7d b8 ff ff ff bf 	cmpl   $0xbfffffff,-0x48(%ebp)
c010baf7:	77 23                	ja     c010bb1c <load_icode+0x56b>
c010baf9:	8b 45 b8             	mov    -0x48(%ebp),%eax
c010bafc:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010bb00:	c7 44 24 08 d4 f7 10 	movl   $0xc010f7d4,0x8(%esp)
c010bb07:	c0 
c010bb08:	c7 44 24 04 69 02 00 	movl   $0x269,0x4(%esp)
c010bb0f:	00 
c010bb10:	c7 04 24 f8 f7 10 c0 	movl   $0xc010f7f8,(%esp)
c010bb17:	e8 3c 67 ff ff       	call   c0102258 <__panic>
c010bb1c:	8b 55 b8             	mov    -0x48(%ebp),%edx
c010bb1f:	81 c2 00 00 00 40    	add    $0x40000000,%edx
c010bb25:	89 50 40             	mov    %edx,0x40(%eax)
    lcr3(PADDR(mm->pgdir));
c010bb28:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010bb2b:	8b 40 0c             	mov    0xc(%eax),%eax
c010bb2e:	89 45 b4             	mov    %eax,-0x4c(%ebp)
c010bb31:	81 7d b4 ff ff ff bf 	cmpl   $0xbfffffff,-0x4c(%ebp)
c010bb38:	77 23                	ja     c010bb5d <load_icode+0x5ac>
c010bb3a:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010bb3d:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010bb41:	c7 44 24 08 d4 f7 10 	movl   $0xc010f7d4,0x8(%esp)
c010bb48:	c0 
c010bb49:	c7 44 24 04 6a 02 00 	movl   $0x26a,0x4(%esp)
c010bb50:	00 
c010bb51:	c7 04 24 f8 f7 10 c0 	movl   $0xc010f7f8,(%esp)
c010bb58:	e8 fb 66 ff ff       	call   c0102258 <__panic>
c010bb5d:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010bb60:	05 00 00 00 40       	add    $0x40000000,%eax
c010bb65:	89 45 ac             	mov    %eax,-0x54(%ebp)
c010bb68:	8b 45 ac             	mov    -0x54(%ebp),%eax
c010bb6b:	0f 22 d8             	mov    %eax,%cr3

    //(6) setup trapframe for user environment
    struct trapframe *tf = current->tf;
c010bb6e:	a1 88 0f 1a c0       	mov    0xc01a0f88,%eax
c010bb73:	8b 40 3c             	mov    0x3c(%eax),%eax
c010bb76:	89 45 b0             	mov    %eax,-0x50(%ebp)
    memset(tf, 0, sizeof(struct trapframe));
c010bb79:	c7 44 24 08 4c 00 00 	movl   $0x4c,0x8(%esp)
c010bb80:	00 
c010bb81:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010bb88:	00 
c010bb89:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010bb8c:	89 04 24             	mov    %eax,(%esp)
c010bb8f:	e8 b3 17 00 00       	call   c010d347 <memset>
     *          tf_ds=tf_es=tf_ss should be USER_DS segment
     *          tf_esp should be the top addr of user stack (USTACKTOP)
     *          tf_eip should be the entry point of this binary program (elf->e_entry)
     *          tf_eflags should be set to enable computer to produce Interrupt
     */
    tf->tf_cs = USER_CS;
c010bb94:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010bb97:	66 c7 40 3c 1b 00    	movw   $0x1b,0x3c(%eax)
    tf->tf_ds = tf->tf_es = tf->tf_ss = USER_DS;
c010bb9d:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010bba0:	66 c7 40 48 23 00    	movw   $0x23,0x48(%eax)
c010bba6:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010bba9:	0f b7 50 48          	movzwl 0x48(%eax),%edx
c010bbad:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010bbb0:	66 89 50 28          	mov    %dx,0x28(%eax)
c010bbb4:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010bbb7:	0f b7 50 28          	movzwl 0x28(%eax),%edx
c010bbbb:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010bbbe:	66 89 50 2c          	mov    %dx,0x2c(%eax)
    tf->tf_esp = USTACKTOP;
c010bbc2:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010bbc5:	c7 40 44 00 00 00 b0 	movl   $0xb0000000,0x44(%eax)
    tf->tf_eip = elf->e_entry;
c010bbcc:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010bbcf:	8b 50 18             	mov    0x18(%eax),%edx
c010bbd2:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010bbd5:	89 50 38             	mov    %edx,0x38(%eax)
    tf->tf_eflags = FL_IF;
c010bbd8:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010bbdb:	c7 40 40 00 02 00 00 	movl   $0x200,0x40(%eax)
    ret = 0;
c010bbe2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
out:
    return ret;
c010bbe9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bbec:	eb 23                	jmp    c010bc11 <load_icode+0x660>
bad_cleanup_mmap:
    exit_mmap(mm);
c010bbee:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010bbf1:	89 04 24             	mov    %eax,(%esp)
c010bbf4:	e8 b6 dd ff ff       	call   c01099af <exit_mmap>
bad_elf_cleanup_pgdir:
    put_pgdir(mm);
c010bbf9:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010bbfc:	89 04 24             	mov    %eax,(%esp)
c010bbff:	e8 a2 f4 ff ff       	call   c010b0a6 <put_pgdir>
bad_pgdir_cleanup_mm:
    mm_destroy(mm);
c010bc04:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010bc07:	89 04 24             	mov    %eax,(%esp)
c010bc0a:	e8 e1 da ff ff       	call   c01096f0 <mm_destroy>
bad_mm:
    goto out;
c010bc0f:	eb d8                	jmp    c010bbe9 <load_icode+0x638>
}
c010bc11:	c9                   	leave  
c010bc12:	c3                   	ret    

c010bc13 <do_execve>:

// do_execve - call exit_mmap(mm)&pug_pgdir(mm) to reclaim memory space of current process
//           - call load_icode to setup new memory space accroding binary prog.
int
do_execve(const char *name, size_t len, unsigned char *binary, size_t size) {
c010bc13:	55                   	push   %ebp
c010bc14:	89 e5                	mov    %esp,%ebp
c010bc16:	83 ec 38             	sub    $0x38,%esp
    struct mm_struct *mm = current->mm;
c010bc19:	a1 88 0f 1a c0       	mov    0xc01a0f88,%eax
c010bc1e:	8b 40 18             	mov    0x18(%eax),%eax
c010bc21:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (!user_mem_check(mm, (uintptr_t)name, len, 0)) {
c010bc24:	8b 45 08             	mov    0x8(%ebp),%eax
c010bc27:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c010bc2e:	00 
c010bc2f:	8b 55 0c             	mov    0xc(%ebp),%edx
c010bc32:	89 54 24 08          	mov    %edx,0x8(%esp)
c010bc36:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bc3a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bc3d:	89 04 24             	mov    %eax,(%esp)
c010bc40:	e8 44 e8 ff ff       	call   c010a489 <user_mem_check>
c010bc45:	85 c0                	test   %eax,%eax
c010bc47:	75 0a                	jne    c010bc53 <do_execve+0x40>
        return -E_INVAL;
c010bc49:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010bc4e:	e9 f4 00 00 00       	jmp    c010bd47 <do_execve+0x134>
    }
    if (len > PROC_NAME_LEN) {
c010bc53:	83 7d 0c 0f          	cmpl   $0xf,0xc(%ebp)
c010bc57:	76 07                	jbe    c010bc60 <do_execve+0x4d>
        len = PROC_NAME_LEN;
c010bc59:	c7 45 0c 0f 00 00 00 	movl   $0xf,0xc(%ebp)
    }

    char local_name[PROC_NAME_LEN + 1];
    memset(local_name, 0, sizeof(local_name));
c010bc60:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
c010bc67:	00 
c010bc68:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010bc6f:	00 
c010bc70:	8d 45 dc             	lea    -0x24(%ebp),%eax
c010bc73:	89 04 24             	mov    %eax,(%esp)
c010bc76:	e8 cc 16 00 00       	call   c010d347 <memset>
    memcpy(local_name, name, len);
c010bc7b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bc7e:	89 44 24 08          	mov    %eax,0x8(%esp)
c010bc82:	8b 45 08             	mov    0x8(%ebp),%eax
c010bc85:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bc89:	8d 45 dc             	lea    -0x24(%ebp),%eax
c010bc8c:	89 04 24             	mov    %eax,(%esp)
c010bc8f:	e8 95 17 00 00       	call   c010d429 <memcpy>

    if (mm != NULL) {
c010bc94:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010bc98:	74 4a                	je     c010bce4 <do_execve+0xd1>
        lcr3(boot_cr3);
c010bc9a:	a1 cc 2f 1a c0       	mov    0xc01a2fcc,%eax
c010bc9f:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010bca2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010bca5:	0f 22 d8             	mov    %eax,%cr3
        if (mm_count_dec(mm) == 0) {
c010bca8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bcab:	89 04 24             	mov    %eax,(%esp)
c010bcae:	e8 e2 ec ff ff       	call   c010a995 <mm_count_dec>
c010bcb3:	85 c0                	test   %eax,%eax
c010bcb5:	75 21                	jne    c010bcd8 <do_execve+0xc5>
            exit_mmap(mm);
c010bcb7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bcba:	89 04 24             	mov    %eax,(%esp)
c010bcbd:	e8 ed dc ff ff       	call   c01099af <exit_mmap>
            put_pgdir(mm);
c010bcc2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bcc5:	89 04 24             	mov    %eax,(%esp)
c010bcc8:	e8 d9 f3 ff ff       	call   c010b0a6 <put_pgdir>
            mm_destroy(mm);
c010bccd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bcd0:	89 04 24             	mov    %eax,(%esp)
c010bcd3:	e8 18 da ff ff       	call   c01096f0 <mm_destroy>
        }
        current->mm = NULL;
c010bcd8:	a1 88 0f 1a c0       	mov    0xc01a0f88,%eax
c010bcdd:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
    }
    int ret;
    if ((ret = load_icode(binary, size)) != 0) {
c010bce4:	8b 45 14             	mov    0x14(%ebp),%eax
c010bce7:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bceb:	8b 45 10             	mov    0x10(%ebp),%eax
c010bcee:	89 04 24             	mov    %eax,(%esp)
c010bcf1:	e8 bb f8 ff ff       	call   c010b5b1 <load_icode>
c010bcf6:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010bcf9:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010bcfd:	74 2f                	je     c010bd2e <do_execve+0x11b>
        goto execve_exit;
c010bcff:	90                   	nop
    }
    set_proc_name(current, local_name);
    return 0;

execve_exit:
    do_exit(ret);
c010bd00:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bd03:	89 04 24             	mov    %eax,(%esp)
c010bd06:	e8 d6 f6 ff ff       	call   c010b3e1 <do_exit>
    panic("already exit: %e.\n", ret);
c010bd0b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bd0e:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010bd12:	c7 44 24 08 ef f9 10 	movl   $0xc010f9ef,0x8(%esp)
c010bd19:	c0 
c010bd1a:	c7 44 24 04 ac 02 00 	movl   $0x2ac,0x4(%esp)
c010bd21:	00 
c010bd22:	c7 04 24 f8 f7 10 c0 	movl   $0xc010f7f8,(%esp)
c010bd29:	e8 2a 65 ff ff       	call   c0102258 <__panic>
    }
    int ret;
    if ((ret = load_icode(binary, size)) != 0) {
        goto execve_exit;
    }
    set_proc_name(current, local_name);
c010bd2e:	a1 88 0f 1a c0       	mov    0xc01a0f88,%eax
c010bd33:	8d 55 dc             	lea    -0x24(%ebp),%edx
c010bd36:	89 54 24 04          	mov    %edx,0x4(%esp)
c010bd3a:	89 04 24             	mov    %eax,(%esp)
c010bd3d:	e8 96 ed ff ff       	call   c010aad8 <set_proc_name>
    return 0;
c010bd42:	b8 00 00 00 00       	mov    $0x0,%eax

execve_exit:
    do_exit(ret);
    panic("already exit: %e.\n", ret);
}
c010bd47:	c9                   	leave  
c010bd48:	c3                   	ret    

c010bd49 <do_yield>:

// do_yield - ask the scheduler to reschedule
int
do_yield(void) {
c010bd49:	55                   	push   %ebp
c010bd4a:	89 e5                	mov    %esp,%ebp
    current->need_resched = 1;
c010bd4c:	a1 88 0f 1a c0       	mov    0xc01a0f88,%eax
c010bd51:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
    return 0;
c010bd58:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010bd5d:	5d                   	pop    %ebp
c010bd5e:	c3                   	ret    

c010bd5f <do_wait>:
static int count = 0;
// do_wait - wait one OR any children with PROC_ZOMBIE state, and free memory space of kernel stack
//         - proc struct of this child.
// NOTE: only after do_wait function, all resources of the child proces are free.
int
do_wait(int pid, int *code_store) {
c010bd5f:	55                   	push   %ebp
c010bd60:	89 e5                	mov    %esp,%ebp
c010bd62:	83 ec 28             	sub    $0x28,%esp
	page_tot(-9999);
c010bd65:	c7 04 24 f1 d8 ff ff 	movl   $0xffffd8f1,(%esp)
c010bd6c:	e8 06 a8 ff ff       	call   c0106577 <page_tot>
    struct mm_struct *mm = current->mm;
c010bd71:	a1 88 0f 1a c0       	mov    0xc01a0f88,%eax
c010bd76:	8b 40 18             	mov    0x18(%eax),%eax
c010bd79:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (code_store != NULL) {
c010bd7c:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010bd80:	74 30                	je     c010bdb2 <do_wait+0x53>
        if (!user_mem_check(mm, (uintptr_t)code_store, sizeof(int), 1)) {
c010bd82:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bd85:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c010bd8c:	00 
c010bd8d:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
c010bd94:	00 
c010bd95:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bd99:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010bd9c:	89 04 24             	mov    %eax,(%esp)
c010bd9f:	e8 e5 e6 ff ff       	call   c010a489 <user_mem_check>
c010bda4:	85 c0                	test   %eax,%eax
c010bda6:	75 0a                	jne    c010bdb2 <do_wait+0x53>
            return -E_INVAL;
c010bda8:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010bdad:	e9 bd 01 00 00       	jmp    c010bf6f <do_wait+0x210>
        }
    }
    page_tot(-8888);
c010bdb2:	c7 04 24 48 dd ff ff 	movl   $0xffffdd48,(%esp)
c010bdb9:	e8 b9 a7 ff ff       	call   c0106577 <page_tot>
    struct proc_struct *proc;
    bool intr_flag, haskid;
repeat:
    haskid = 0;
c010bdbe:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    if (pid != 0) {
c010bdc5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010bdc9:	74 39                	je     c010be04 <do_wait+0xa5>
        proc = find_proc(pid);
c010bdcb:	8b 45 08             	mov    0x8(%ebp),%eax
c010bdce:	89 04 24             	mov    %eax,(%esp)
c010bdd1:	e8 e3 f0 ff ff       	call   c010aeb9 <find_proc>
c010bdd6:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (proc != NULL && proc->parent == current) {
c010bdd9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010bddd:	74 57                	je     c010be36 <do_wait+0xd7>
c010bddf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bde2:	8b 50 14             	mov    0x14(%eax),%edx
c010bde5:	a1 88 0f 1a c0       	mov    0xc01a0f88,%eax
c010bdea:	39 c2                	cmp    %eax,%edx
c010bdec:	75 48                	jne    c010be36 <do_wait+0xd7>
            haskid = 1;
c010bdee:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
            if (proc->state == PROC_ZOMBIE) {
c010bdf5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bdf8:	8b 00                	mov    (%eax),%eax
c010bdfa:	83 f8 03             	cmp    $0x3,%eax
c010bdfd:	75 37                	jne    c010be36 <do_wait+0xd7>
                goto found;
c010bdff:	e9 da 00 00 00       	jmp    c010bede <do_wait+0x17f>
            }
        }
    }
    else {
        proc = current->cptr;
c010be04:	a1 88 0f 1a c0       	mov    0xc01a0f88,%eax
c010be09:	8b 40 70             	mov    0x70(%eax),%eax
c010be0c:	89 45 f4             	mov    %eax,-0xc(%ebp)
        for (; proc != NULL; proc = proc->optr) {
c010be0f:	eb 1f                	jmp    c010be30 <do_wait+0xd1>
            haskid = 1;
c010be11:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
            if (proc->state == PROC_ZOMBIE) {
c010be18:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010be1b:	8b 00                	mov    (%eax),%eax
c010be1d:	83 f8 03             	cmp    $0x3,%eax
c010be20:	75 05                	jne    c010be27 <do_wait+0xc8>
                goto found;
c010be22:	e9 b7 00 00 00       	jmp    c010bede <do_wait+0x17f>
            }
        }
    }
    else {
        proc = current->cptr;
        for (; proc != NULL; proc = proc->optr) {
c010be27:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010be2a:	8b 40 78             	mov    0x78(%eax),%eax
c010be2d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010be30:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010be34:	75 db                	jne    c010be11 <do_wait+0xb2>
            if (proc->state == PROC_ZOMBIE) {
                goto found;
            }
        }
    }
    if (haskid) {
c010be36:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010be3a:	74 41                	je     c010be7d <do_wait+0x11e>
        current->state = PROC_SLEEPING;
c010be3c:	a1 88 0f 1a c0       	mov    0xc01a0f88,%eax
c010be41:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
        current->wait_state = WT_CHILD;
c010be47:	a1 88 0f 1a c0       	mov    0xc01a0f88,%eax
c010be4c:	c7 40 6c 01 00 00 80 	movl   $0x80000001,0x6c(%eax)
        schedule();
c010be53:	e8 84 07 00 00       	call   c010c5dc <schedule>
        if (current->flags & PF_EXITING) {
c010be58:	a1 88 0f 1a c0       	mov    0xc01a0f88,%eax
c010be5d:	8b 40 44             	mov    0x44(%eax),%eax
c010be60:	83 e0 01             	and    $0x1,%eax
c010be63:	85 c0                	test   %eax,%eax
c010be65:	74 11                	je     c010be78 <do_wait+0x119>
            do_exit(-E_KILLED);
c010be67:	c7 04 24 f7 ff ff ff 	movl   $0xfffffff7,(%esp)
c010be6e:	e8 6e f5 ff ff       	call   c010b3e1 <do_exit>
        }
        goto repeat;
c010be73:	e9 46 ff ff ff       	jmp    c010bdbe <do_wait+0x5f>
c010be78:	e9 41 ff ff ff       	jmp    c010bdbe <do_wait+0x5f>
    }

    cprintf("haha%d id=%d\n", current==NULL, current->pid);
c010be7d:	a1 88 0f 1a c0       	mov    0xc01a0f88,%eax
c010be82:	8b 50 04             	mov    0x4(%eax),%edx
c010be85:	a1 88 0f 1a c0       	mov    0xc01a0f88,%eax
c010be8a:	85 c0                	test   %eax,%eax
c010be8c:	0f 94 c0             	sete   %al
c010be8f:	0f b6 c0             	movzbl %al,%eax
c010be92:	89 54 24 08          	mov    %edx,0x8(%esp)
c010be96:	89 44 24 04          	mov    %eax,0x4(%esp)
c010be9a:	c7 04 24 02 fa 10 c0 	movl   $0xc010fa02,(%esp)
c010bea1:	e8 30 59 ff ff       	call   c01017d6 <cprintf>


    page_tot(7777);
c010bea6:	c7 04 24 61 1e 00 00 	movl   $0x1e61,(%esp)
c010bead:	e8 c5 a6 ff ff       	call   c0106577 <page_tot>
    count ++;
c010beb2:	a1 a4 2f 1a c0       	mov    0xc01a2fa4,%eax
c010beb7:	83 c0 01             	add    $0x1,%eax
c010beba:	a3 a4 2f 1a c0       	mov    %eax,0xc01a2fa4
    cprintf("count = %d\n", count);
c010bebf:	a1 a4 2f 1a c0       	mov    0xc01a2fa4,%eax
c010bec4:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bec8:	c7 04 24 10 fa 10 c0 	movl   $0xc010fa10,(%esp)
c010becf:	e8 02 59 ff ff       	call   c01017d6 <cprintf>
//    if (current->pid == 1)
//    	put_kstack(current);
    return -E_BAD_PROC;
c010bed4:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
c010bed9:	e9 91 00 00 00       	jmp    c010bf6f <do_wait+0x210>

found:
    if (proc == idleproc || proc == initproc) {
c010bede:	a1 80 0f 1a c0       	mov    0xc01a0f80,%eax
c010bee3:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010bee6:	74 0a                	je     c010bef2 <do_wait+0x193>
c010bee8:	a1 84 0f 1a c0       	mov    0xc01a0f84,%eax
c010beed:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010bef0:	75 1c                	jne    c010bf0e <do_wait+0x1af>
        panic("wait idleproc or initproc.\n");
c010bef2:	c7 44 24 08 1c fa 10 	movl   $0xc010fa1c,0x8(%esp)
c010bef9:	c0 
c010befa:	c7 44 24 04 f0 02 00 	movl   $0x2f0,0x4(%esp)
c010bf01:	00 
c010bf02:	c7 04 24 f8 f7 10 c0 	movl   $0xc010f7f8,(%esp)
c010bf09:	e8 4a 63 ff ff       	call   c0102258 <__panic>
    }
    if (code_store != NULL) {
c010bf0e:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010bf12:	74 0b                	je     c010bf1f <do_wait+0x1c0>
        *code_store = proc->exit_code;
c010bf14:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bf17:	8b 50 68             	mov    0x68(%eax),%edx
c010bf1a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bf1d:	89 10                	mov    %edx,(%eax)
    }
    local_intr_save(intr_flag);
c010bf1f:	e8 81 e8 ff ff       	call   c010a7a5 <__intr_save>
c010bf24:	89 45 e8             	mov    %eax,-0x18(%ebp)
    {
        unhash_proc(proc);
c010bf27:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bf2a:	89 04 24             	mov    %eax,(%esp)
c010bf2d:	e8 54 ef ff ff       	call   c010ae86 <unhash_proc>
        remove_links(proc);
c010bf32:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bf35:	89 04 24             	mov    %eax,(%esp)
c010bf38:	e8 c5 ec ff ff       	call   c010ac02 <remove_links>
    }
    local_intr_restore(intr_flag);
c010bf3d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010bf40:	89 04 24             	mov    %eax,(%esp)
c010bf43:	e8 87 e8 ff ff       	call   c010a7cf <__intr_restore>

    put_kstack(proc);
c010bf48:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bf4b:	89 04 24             	mov    %eax,(%esp)
c010bf4e:	e8 86 f0 ff ff       	call   c010afd9 <put_kstack>
    page_tot(9999);
c010bf53:	c7 04 24 0f 27 00 00 	movl   $0x270f,(%esp)
c010bf5a:	e8 18 a6 ff ff       	call   c0106577 <page_tot>
    kfree(proc);
c010bf5f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bf62:	89 04 24             	mov    %eax,(%esp)
c010bf65:	e8 a3 a1 ff ff       	call   c010610d <kfree>

    return 0;
c010bf6a:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010bf6f:	c9                   	leave  
c010bf70:	c3                   	ret    

c010bf71 <do_kill>:

// do_kill - kill process with pid by set this process's flags with PF_EXITING
int
do_kill(int pid) {
c010bf71:	55                   	push   %ebp
c010bf72:	89 e5                	mov    %esp,%ebp
c010bf74:	83 ec 28             	sub    $0x28,%esp
    struct proc_struct *proc;
    if ((proc = find_proc(pid)) != NULL) {
c010bf77:	8b 45 08             	mov    0x8(%ebp),%eax
c010bf7a:	89 04 24             	mov    %eax,(%esp)
c010bf7d:	e8 37 ef ff ff       	call   c010aeb9 <find_proc>
c010bf82:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010bf85:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010bf89:	74 41                	je     c010bfcc <do_kill+0x5b>
        if (!(proc->flags & PF_EXITING)) {
c010bf8b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bf8e:	8b 40 44             	mov    0x44(%eax),%eax
c010bf91:	83 e0 01             	and    $0x1,%eax
c010bf94:	85 c0                	test   %eax,%eax
c010bf96:	75 2d                	jne    c010bfc5 <do_kill+0x54>
            proc->flags |= PF_EXITING;
c010bf98:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bf9b:	8b 40 44             	mov    0x44(%eax),%eax
c010bf9e:	83 c8 01             	or     $0x1,%eax
c010bfa1:	89 c2                	mov    %eax,%edx
c010bfa3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bfa6:	89 50 44             	mov    %edx,0x44(%eax)
            if (proc->wait_state & WT_INTERRUPTED) {
c010bfa9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bfac:	8b 40 6c             	mov    0x6c(%eax),%eax
c010bfaf:	85 c0                	test   %eax,%eax
c010bfb1:	79 0b                	jns    c010bfbe <do_kill+0x4d>
                wakeup_proc(proc);
c010bfb3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bfb6:	89 04 24             	mov    %eax,(%esp)
c010bfb9:	e8 9a 05 00 00       	call   c010c558 <wakeup_proc>
            }
            return 0;
c010bfbe:	b8 00 00 00 00       	mov    $0x0,%eax
c010bfc3:	eb 0c                	jmp    c010bfd1 <do_kill+0x60>
        }
        return -E_KILLED;
c010bfc5:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
c010bfca:	eb 05                	jmp    c010bfd1 <do_kill+0x60>
    }
    return -E_INVAL;
c010bfcc:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
c010bfd1:	c9                   	leave  
c010bfd2:	c3                   	ret    

c010bfd3 <kernel_execve>:

// kernel_execve - do SYS_exec syscall to exec a user program called by user_main kernel_thread
static int
kernel_execve(const char *name, unsigned char *binary, size_t size) {
c010bfd3:	55                   	push   %ebp
c010bfd4:	89 e5                	mov    %esp,%ebp
c010bfd6:	57                   	push   %edi
c010bfd7:	56                   	push   %esi
c010bfd8:	53                   	push   %ebx
c010bfd9:	83 ec 2c             	sub    $0x2c,%esp
    int ret, len = strlen(name);
c010bfdc:	8b 45 08             	mov    0x8(%ebp),%eax
c010bfdf:	89 04 24             	mov    %eax,(%esp)
c010bfe2:	e8 31 10 00 00       	call   c010d018 <strlen>
c010bfe7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    asm volatile (
c010bfea:	b8 04 00 00 00       	mov    $0x4,%eax
c010bfef:	8b 55 08             	mov    0x8(%ebp),%edx
c010bff2:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
c010bff5:	8b 5d 0c             	mov    0xc(%ebp),%ebx
c010bff8:	8b 75 10             	mov    0x10(%ebp),%esi
c010bffb:	89 f7                	mov    %esi,%edi
c010bffd:	cd 80                	int    $0x80
c010bfff:	89 45 e0             	mov    %eax,-0x20(%ebp)
        "int %1;"
        : "=a" (ret)
        : "i" (T_SYSCALL), "0" (SYS_exec), "d" (name), "c" (len), "b" (binary), "D" (size)
        : "memory");
    return ret;
c010c002:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
c010c005:	83 c4 2c             	add    $0x2c,%esp
c010c008:	5b                   	pop    %ebx
c010c009:	5e                   	pop    %esi
c010c00a:	5f                   	pop    %edi
c010c00b:	5d                   	pop    %ebp
c010c00c:	c3                   	ret    

c010c00d <user_main>:

#define KERNEL_EXECVE2(x, xstart, xsize)        __KERNEL_EXECVE2(x, xstart, xsize)

// user_main - kernel thread used to exec a user program
static int
user_main(void *arg) {
c010c00d:	55                   	push   %ebp
c010c00e:	89 e5                	mov    %esp,%ebp
c010c010:	83 ec 18             	sub    $0x18,%esp
#ifdef TEST
    KERNEL_EXECVE2(TEST, TESTSTART, TESTSIZE);
c010c013:	a1 88 0f 1a c0       	mov    0xc01a0f88,%eax
c010c018:	8b 40 04             	mov    0x4(%eax),%eax
c010c01b:	c7 44 24 08 38 fa 10 	movl   $0xc010fa38,0x8(%esp)
c010c022:	c0 
c010c023:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c027:	c7 04 24 44 fa 10 c0 	movl   $0xc010fa44,(%esp)
c010c02e:	e8 a3 57 ff ff       	call   c01017d6 <cprintf>
c010c033:	b8 e2 78 00 00       	mov    $0x78e2,%eax
c010c038:	89 44 24 08          	mov    %eax,0x8(%esp)
c010c03c:	c7 44 24 04 79 38 16 	movl   $0xc0163879,0x4(%esp)
c010c043:	c0 
c010c044:	c7 04 24 38 fa 10 c0 	movl   $0xc010fa38,(%esp)
c010c04b:	e8 83 ff ff ff       	call   c010bfd3 <kernel_execve>
#else
    KERNEL_EXECVE(exit);
#endif
    panic("user_main execve failed.\n");
c010c050:	c7 44 24 08 6b fa 10 	movl   $0xc010fa6b,0x8(%esp)
c010c057:	c0 
c010c058:	c7 44 24 04 3c 03 00 	movl   $0x33c,0x4(%esp)
c010c05f:	00 
c010c060:	c7 04 24 f8 f7 10 c0 	movl   $0xc010f7f8,(%esp)
c010c067:	e8 ec 61 ff ff       	call   c0102258 <__panic>

c010c06c <init_main>:
}

// init_main - the second kernel thread used to create user_main kernel threads
static int
init_main(void *arg) {
c010c06c:	55                   	push   %ebp
c010c06d:	89 e5                	mov    %esp,%ebp
c010c06f:	83 ec 38             	sub    $0x38,%esp
	cprintf("current->pid = %d\n", current->pid);
c010c072:	a1 88 0f 1a c0       	mov    0xc01a0f88,%eax
c010c077:	8b 40 04             	mov    0x4(%eax),%eax
c010c07a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c07e:	c7 04 24 85 fa 10 c0 	movl   $0xc010fa85,(%esp)
c010c085:	e8 4c 57 ff ff       	call   c01017d6 <cprintf>
    size_t nr_free_pages_store = nr_free_pages();
c010c08a:	e8 d5 a5 ff ff       	call   c0106664 <nr_free_pages>
c010c08f:	89 45 f4             	mov    %eax,-0xc(%ebp)

    page_tot(-3);
c010c092:	c7 04 24 fd ff ff ff 	movl   $0xfffffffd,(%esp)
c010c099:	e8 d9 a4 ff ff       	call   c0106577 <page_tot>
    size_t kernel_allocated_store = kallocated();
c010c09e:	e8 32 9f ff ff       	call   c0105fd5 <kallocated>
c010c0a3:	89 45 f0             	mov    %eax,-0x10(%ebp)

    page_tot(-2);
c010c0a6:	c7 04 24 fe ff ff ff 	movl   $0xfffffffe,(%esp)
c010c0ad:	e8 c5 a4 ff ff       	call   c0106577 <page_tot>

    int pid = kernel_thread(user_main, NULL, 0);
c010c0b2:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010c0b9:	00 
c010c0ba:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010c0c1:	00 
c010c0c2:	c7 04 24 0d c0 10 c0 	movl   $0xc010c00d,(%esp)
c010c0c9:	e8 5d ee ff ff       	call   c010af2b <kernel_thread>
c010c0ce:	89 45 ec             	mov    %eax,-0x14(%ebp)

    page_tot(-1);
c010c0d1:	c7 04 24 ff ff ff ff 	movl   $0xffffffff,(%esp)
c010c0d8:	e8 9a a4 ff ff       	call   c0106577 <page_tot>

    if (pid <= 0) {
c010c0dd:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010c0e1:	7f 1c                	jg     c010c0ff <init_main+0x93>
        panic("create user_main failed.\n");
c010c0e3:	c7 44 24 08 98 fa 10 	movl   $0xc010fa98,0x8(%esp)
c010c0ea:	c0 
c010c0eb:	c7 44 24 04 4f 03 00 	movl   $0x34f,0x4(%esp)
c010c0f2:	00 
c010c0f3:	c7 04 24 f8 f7 10 c0 	movl   $0xc010f7f8,(%esp)
c010c0fa:	e8 59 61 ff ff       	call   c0102258 <__panic>
    }

    while (do_wait(0, NULL) == 0) {
c010c0ff:	eb 11                	jmp    c010c112 <init_main+0xa6>
    	page_tot(11);
c010c101:	c7 04 24 0b 00 00 00 	movl   $0xb,(%esp)
c010c108:	e8 6a a4 ff ff       	call   c0106577 <page_tot>
        schedule();
c010c10d:	e8 ca 04 00 00       	call   c010c5dc <schedule>

    if (pid <= 0) {
        panic("create user_main failed.\n");
    }

    while (do_wait(0, NULL) == 0) {
c010c112:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010c119:	00 
c010c11a:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c010c121:	e8 39 fc ff ff       	call   c010bd5f <do_wait>
c010c126:	85 c0                	test   %eax,%eax
c010c128:	74 d7                	je     c010c101 <init_main+0x95>
    	page_tot(11);
        schedule();
    }

    if (current->pid == 1)
c010c12a:	a1 88 0f 1a c0       	mov    0xc01a0f88,%eax
c010c12f:	8b 40 04             	mov    0x4(%eax),%eax
c010c132:	83 f8 01             	cmp    $0x1,%eax
c010c135:	75 0d                	jne    c010c144 <init_main+0xd8>
        put_kstack(current);
c010c137:	a1 88 0f 1a c0       	mov    0xc01a0f88,%eax
c010c13c:	89 04 24             	mov    %eax,(%esp)
c010c13f:	e8 95 ee ff ff       	call   c010afd9 <put_kstack>

    cprintf("all user-mode processes have quit.\n");
c010c144:	c7 04 24 b4 fa 10 c0 	movl   $0xc010fab4,(%esp)
c010c14b:	e8 86 56 ff ff       	call   c01017d6 <cprintf>
    assert(initproc->cptr == NULL && initproc->yptr == NULL && initproc->optr == NULL);
c010c150:	a1 84 0f 1a c0       	mov    0xc01a0f84,%eax
c010c155:	8b 40 70             	mov    0x70(%eax),%eax
c010c158:	85 c0                	test   %eax,%eax
c010c15a:	75 18                	jne    c010c174 <init_main+0x108>
c010c15c:	a1 84 0f 1a c0       	mov    0xc01a0f84,%eax
c010c161:	8b 40 74             	mov    0x74(%eax),%eax
c010c164:	85 c0                	test   %eax,%eax
c010c166:	75 0c                	jne    c010c174 <init_main+0x108>
c010c168:	a1 84 0f 1a c0       	mov    0xc01a0f84,%eax
c010c16d:	8b 40 78             	mov    0x78(%eax),%eax
c010c170:	85 c0                	test   %eax,%eax
c010c172:	74 24                	je     c010c198 <init_main+0x12c>
c010c174:	c7 44 24 0c d8 fa 10 	movl   $0xc010fad8,0xc(%esp)
c010c17b:	c0 
c010c17c:	c7 44 24 08 25 f8 10 	movl   $0xc010f825,0x8(%esp)
c010c183:	c0 
c010c184:	c7 44 24 04 5b 03 00 	movl   $0x35b,0x4(%esp)
c010c18b:	00 
c010c18c:	c7 04 24 f8 f7 10 c0 	movl   $0xc010f7f8,(%esp)
c010c193:	e8 c0 60 ff ff       	call   c0102258 <__panic>
    assert(nr_process == 2);
c010c198:	a1 a0 2f 1a c0       	mov    0xc01a2fa0,%eax
c010c19d:	83 f8 02             	cmp    $0x2,%eax
c010c1a0:	74 24                	je     c010c1c6 <init_main+0x15a>
c010c1a2:	c7 44 24 0c 23 fb 10 	movl   $0xc010fb23,0xc(%esp)
c010c1a9:	c0 
c010c1aa:	c7 44 24 08 25 f8 10 	movl   $0xc010f825,0x8(%esp)
c010c1b1:	c0 
c010c1b2:	c7 44 24 04 5c 03 00 	movl   $0x35c,0x4(%esp)
c010c1b9:	00 
c010c1ba:	c7 04 24 f8 f7 10 c0 	movl   $0xc010f7f8,(%esp)
c010c1c1:	e8 92 60 ff ff       	call   c0102258 <__panic>
c010c1c6:	c7 45 e8 b0 30 1a c0 	movl   $0xc01a30b0,-0x18(%ebp)
c010c1cd:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c1d0:	8b 40 04             	mov    0x4(%eax),%eax
    assert(list_next(&proc_list) == &(initproc->list_link));
c010c1d3:	8b 15 84 0f 1a c0    	mov    0xc01a0f84,%edx
c010c1d9:	83 c2 58             	add    $0x58,%edx
c010c1dc:	39 d0                	cmp    %edx,%eax
c010c1de:	74 24                	je     c010c204 <init_main+0x198>
c010c1e0:	c7 44 24 0c 34 fb 10 	movl   $0xc010fb34,0xc(%esp)
c010c1e7:	c0 
c010c1e8:	c7 44 24 08 25 f8 10 	movl   $0xc010f825,0x8(%esp)
c010c1ef:	c0 
c010c1f0:	c7 44 24 04 5d 03 00 	movl   $0x35d,0x4(%esp)
c010c1f7:	00 
c010c1f8:	c7 04 24 f8 f7 10 c0 	movl   $0xc010f7f8,(%esp)
c010c1ff:	e8 54 60 ff ff       	call   c0102258 <__panic>
c010c204:	c7 45 e4 b0 30 1a c0 	movl   $0xc01a30b0,-0x1c(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c010c20b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010c20e:	8b 00                	mov    (%eax),%eax
    assert(list_prev(&proc_list) == &(initproc->list_link));
c010c210:	8b 15 84 0f 1a c0    	mov    0xc01a0f84,%edx
c010c216:	83 c2 58             	add    $0x58,%edx
c010c219:	39 d0                	cmp    %edx,%eax
c010c21b:	74 24                	je     c010c241 <init_main+0x1d5>
c010c21d:	c7 44 24 0c 64 fb 10 	movl   $0xc010fb64,0xc(%esp)
c010c224:	c0 
c010c225:	c7 44 24 08 25 f8 10 	movl   $0xc010f825,0x8(%esp)
c010c22c:	c0 
c010c22d:	c7 44 24 04 5e 03 00 	movl   $0x35e,0x4(%esp)
c010c234:	00 
c010c235:	c7 04 24 f8 f7 10 c0 	movl   $0xc010f7f8,(%esp)
c010c23c:	e8 17 60 ff ff       	call   c0102258 <__panic>
    //assert(nr_free_pages_store == nr_free_pages());
    cprintf("$$$%d, %d", nr_free_pages_store, nr_free_pages());
c010c241:	e8 1e a4 ff ff       	call   c0106664 <nr_free_pages>
c010c246:	89 44 24 08          	mov    %eax,0x8(%esp)
c010c24a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c24d:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c251:	c7 04 24 94 fb 10 c0 	movl   $0xc010fb94,(%esp)
c010c258:	e8 79 55 ff ff       	call   c01017d6 <cprintf>
    assert(kernel_allocated_store == kallocated());
c010c25d:	e8 73 9d ff ff       	call   c0105fd5 <kallocated>
c010c262:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010c265:	74 24                	je     c010c28b <init_main+0x21f>
c010c267:	c7 44 24 0c a0 fb 10 	movl   $0xc010fba0,0xc(%esp)
c010c26e:	c0 
c010c26f:	c7 44 24 08 25 f8 10 	movl   $0xc010f825,0x8(%esp)
c010c276:	c0 
c010c277:	c7 44 24 04 61 03 00 	movl   $0x361,0x4(%esp)
c010c27e:	00 
c010c27f:	c7 04 24 f8 f7 10 c0 	movl   $0xc010f7f8,(%esp)
c010c286:	e8 cd 5f ff ff       	call   c0102258 <__panic>
    cprintf("init check memory pass.\n");
c010c28b:	c7 04 24 c7 fb 10 c0 	movl   $0xc010fbc7,(%esp)
c010c292:	e8 3f 55 ff ff       	call   c01017d6 <cprintf>
    return 0;
c010c297:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010c29c:	c9                   	leave  
c010c29d:	c3                   	ret    

c010c29e <proc_init>:

// proc_init - set up the first kernel thread idleproc "idle" by itself and 
//           - create the second kernel thread init_main
void
proc_init(void) {
c010c29e:	55                   	push   %ebp
c010c29f:	89 e5                	mov    %esp,%ebp
c010c2a1:	83 ec 28             	sub    $0x28,%esp
	page_tot(0);
c010c2a4:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c010c2ab:	e8 c7 a2 ff ff       	call   c0106577 <page_tot>
    int i;
    page_tot(1);
c010c2b0:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010c2b7:	e8 bb a2 ff ff       	call   c0106577 <page_tot>
c010c2bc:	c7 45 ec b0 30 1a c0 	movl   $0xc01a30b0,-0x14(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010c2c3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c2c6:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010c2c9:	89 50 04             	mov    %edx,0x4(%eax)
c010c2cc:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c2cf:	8b 50 04             	mov    0x4(%eax),%edx
c010c2d2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c2d5:	89 10                	mov    %edx,(%eax)
    list_init(&proc_list);
    for (i = 0; i < HASH_LIST_SIZE; i ++) {
c010c2d7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010c2de:	eb 26                	jmp    c010c306 <proc_init+0x68>
        list_init(hash_list + i);
c010c2e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c2e3:	c1 e0 03             	shl    $0x3,%eax
c010c2e6:	05 a0 0f 1a c0       	add    $0xc01a0fa0,%eax
c010c2eb:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010c2ee:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c2f1:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010c2f4:	89 50 04             	mov    %edx,0x4(%eax)
c010c2f7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c2fa:	8b 50 04             	mov    0x4(%eax),%edx
c010c2fd:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c300:	89 10                	mov    %edx,(%eax)
proc_init(void) {
	page_tot(0);
    int i;
    page_tot(1);
    list_init(&proc_list);
    for (i = 0; i < HASH_LIST_SIZE; i ++) {
c010c302:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010c306:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
c010c30d:	7e d1                	jle    c010c2e0 <proc_init+0x42>
        list_init(hash_list + i);
    }
    page_tot(2);
c010c30f:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
c010c316:	e8 5c a2 ff ff       	call   c0106577 <page_tot>
    if ((idleproc = alloc_proc()) == NULL) {
c010c31b:	e8 c7 e6 ff ff       	call   c010a9e7 <alloc_proc>
c010c320:	a3 80 0f 1a c0       	mov    %eax,0xc01a0f80
c010c325:	a1 80 0f 1a c0       	mov    0xc01a0f80,%eax
c010c32a:	85 c0                	test   %eax,%eax
c010c32c:	75 1c                	jne    c010c34a <proc_init+0xac>
        panic("cannot alloc idleproc.\n");
c010c32e:	c7 44 24 08 e0 fb 10 	movl   $0xc010fbe0,0x8(%esp)
c010c335:	c0 
c010c336:	c7 44 24 04 73 03 00 	movl   $0x373,0x4(%esp)
c010c33d:	00 
c010c33e:	c7 04 24 f8 f7 10 c0 	movl   $0xc010f7f8,(%esp)
c010c345:	e8 0e 5f ff ff       	call   c0102258 <__panic>
    }
    page_tot(3);
c010c34a:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
c010c351:	e8 21 a2 ff ff       	call   c0106577 <page_tot>
    idleproc->pid = 0;
c010c356:	a1 80 0f 1a c0       	mov    0xc01a0f80,%eax
c010c35b:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    idleproc->state = PROC_RUNNABLE;
c010c362:	a1 80 0f 1a c0       	mov    0xc01a0f80,%eax
c010c367:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
    idleproc->kstack = (uintptr_t)bootstack;
c010c36d:	a1 80 0f 1a c0       	mov    0xc01a0f80,%eax
c010c372:	ba 00 c0 12 c0       	mov    $0xc012c000,%edx
c010c377:	89 50 0c             	mov    %edx,0xc(%eax)
    idleproc->need_resched = 1;
c010c37a:	a1 80 0f 1a c0       	mov    0xc01a0f80,%eax
c010c37f:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
    set_proc_name(idleproc, "idle");
c010c386:	a1 80 0f 1a c0       	mov    0xc01a0f80,%eax
c010c38b:	c7 44 24 04 f8 fb 10 	movl   $0xc010fbf8,0x4(%esp)
c010c392:	c0 
c010c393:	89 04 24             	mov    %eax,(%esp)
c010c396:	e8 3d e7 ff ff       	call   c010aad8 <set_proc_name>
    nr_process ++;
c010c39b:	a1 a0 2f 1a c0       	mov    0xc01a2fa0,%eax
c010c3a0:	83 c0 01             	add    $0x1,%eax
c010c3a3:	a3 a0 2f 1a c0       	mov    %eax,0xc01a2fa0
    page_tot(4);
c010c3a8:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
c010c3af:	e8 c3 a1 ff ff       	call   c0106577 <page_tot>
    current = idleproc;
c010c3b4:	a1 80 0f 1a c0       	mov    0xc01a0f80,%eax
c010c3b9:	a3 88 0f 1a c0       	mov    %eax,0xc01a0f88
    page_tot(5);
c010c3be:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
c010c3c5:	e8 ad a1 ff ff       	call   c0106577 <page_tot>
    int pid = kernel_thread(init_main, NULL, 0);
c010c3ca:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010c3d1:	00 
c010c3d2:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010c3d9:	00 
c010c3da:	c7 04 24 6c c0 10 c0 	movl   $0xc010c06c,(%esp)
c010c3e1:	e8 45 eb ff ff       	call   c010af2b <kernel_thread>
c010c3e6:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (pid <= 0) {
c010c3e9:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010c3ed:	7f 1c                	jg     c010c40b <proc_init+0x16d>
        panic("create init_main failed.\n");
c010c3ef:	c7 44 24 08 fd fb 10 	movl   $0xc010fbfd,0x8(%esp)
c010c3f6:	c0 
c010c3f7:	c7 44 24 04 81 03 00 	movl   $0x381,0x4(%esp)
c010c3fe:	00 
c010c3ff:	c7 04 24 f8 f7 10 c0 	movl   $0xc010f7f8,(%esp)
c010c406:	e8 4d 5e ff ff       	call   c0102258 <__panic>
    }
    page_tot(6);
c010c40b:	c7 04 24 06 00 00 00 	movl   $0x6,(%esp)
c010c412:	e8 60 a1 ff ff       	call   c0106577 <page_tot>
    initproc = find_proc(pid);
c010c417:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c41a:	89 04 24             	mov    %eax,(%esp)
c010c41d:	e8 97 ea ff ff       	call   c010aeb9 <find_proc>
c010c422:	a3 84 0f 1a c0       	mov    %eax,0xc01a0f84
    set_proc_name(initproc, "init");
c010c427:	a1 84 0f 1a c0       	mov    0xc01a0f84,%eax
c010c42c:	c7 44 24 04 17 fc 10 	movl   $0xc010fc17,0x4(%esp)
c010c433:	c0 
c010c434:	89 04 24             	mov    %eax,(%esp)
c010c437:	e8 9c e6 ff ff       	call   c010aad8 <set_proc_name>
    page_tot(7);
c010c43c:	c7 04 24 07 00 00 00 	movl   $0x7,(%esp)
c010c443:	e8 2f a1 ff ff       	call   c0106577 <page_tot>
    assert(idleproc != NULL && idleproc->pid == 0);
c010c448:	a1 80 0f 1a c0       	mov    0xc01a0f80,%eax
c010c44d:	85 c0                	test   %eax,%eax
c010c44f:	74 0c                	je     c010c45d <proc_init+0x1bf>
c010c451:	a1 80 0f 1a c0       	mov    0xc01a0f80,%eax
c010c456:	8b 40 04             	mov    0x4(%eax),%eax
c010c459:	85 c0                	test   %eax,%eax
c010c45b:	74 24                	je     c010c481 <proc_init+0x1e3>
c010c45d:	c7 44 24 0c 1c fc 10 	movl   $0xc010fc1c,0xc(%esp)
c010c464:	c0 
c010c465:	c7 44 24 08 25 f8 10 	movl   $0xc010f825,0x8(%esp)
c010c46c:	c0 
c010c46d:	c7 44 24 04 87 03 00 	movl   $0x387,0x4(%esp)
c010c474:	00 
c010c475:	c7 04 24 f8 f7 10 c0 	movl   $0xc010f7f8,(%esp)
c010c47c:	e8 d7 5d ff ff       	call   c0102258 <__panic>
    assert(initproc != NULL && initproc->pid == 1);
c010c481:	a1 84 0f 1a c0       	mov    0xc01a0f84,%eax
c010c486:	85 c0                	test   %eax,%eax
c010c488:	74 0d                	je     c010c497 <proc_init+0x1f9>
c010c48a:	a1 84 0f 1a c0       	mov    0xc01a0f84,%eax
c010c48f:	8b 40 04             	mov    0x4(%eax),%eax
c010c492:	83 f8 01             	cmp    $0x1,%eax
c010c495:	74 24                	je     c010c4bb <proc_init+0x21d>
c010c497:	c7 44 24 0c 44 fc 10 	movl   $0xc010fc44,0xc(%esp)
c010c49e:	c0 
c010c49f:	c7 44 24 08 25 f8 10 	movl   $0xc010f825,0x8(%esp)
c010c4a6:	c0 
c010c4a7:	c7 44 24 04 88 03 00 	movl   $0x388,0x4(%esp)
c010c4ae:	00 
c010c4af:	c7 04 24 f8 f7 10 c0 	movl   $0xc010f7f8,(%esp)
c010c4b6:	e8 9d 5d ff ff       	call   c0102258 <__panic>
    page_tot(8);
c010c4bb:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c010c4c2:	e8 b0 a0 ff ff       	call   c0106577 <page_tot>
}
c010c4c7:	c9                   	leave  
c010c4c8:	c3                   	ret    

c010c4c9 <cpu_idle>:

// cpu_idle - at the end of kern_init, the first kernel thread idleproc will do below works
void
cpu_idle(void) {
c010c4c9:	55                   	push   %ebp
c010c4ca:	89 e5                	mov    %esp,%ebp
c010c4cc:	83 ec 08             	sub    $0x8,%esp
    while (1) {
        if (current->need_resched) {
c010c4cf:	a1 88 0f 1a c0       	mov    0xc01a0f88,%eax
c010c4d4:	8b 40 10             	mov    0x10(%eax),%eax
c010c4d7:	85 c0                	test   %eax,%eax
c010c4d9:	74 07                	je     c010c4e2 <cpu_idle+0x19>
            schedule();
c010c4db:	e8 fc 00 00 00       	call   c010c5dc <schedule>
        }
    }
c010c4e0:	eb ed                	jmp    c010c4cf <cpu_idle+0x6>
c010c4e2:	eb eb                	jmp    c010c4cf <cpu_idle+0x6>

c010c4e4 <switch_to>:
.text
.globl switch_to
switch_to:                      # switch_to(from, to)

    # save from's registers
    movl 4(%esp), %eax          # eax points to from
c010c4e4:	8b 44 24 04          	mov    0x4(%esp),%eax
    popl 0(%eax)                # save eip !popl
c010c4e8:	8f 00                	popl   (%eax)
    movl %esp, 4(%eax)
c010c4ea:	89 60 04             	mov    %esp,0x4(%eax)
    movl %ebx, 8(%eax)
c010c4ed:	89 58 08             	mov    %ebx,0x8(%eax)
    movl %ecx, 12(%eax)
c010c4f0:	89 48 0c             	mov    %ecx,0xc(%eax)
    movl %edx, 16(%eax)
c010c4f3:	89 50 10             	mov    %edx,0x10(%eax)
    movl %esi, 20(%eax)
c010c4f6:	89 70 14             	mov    %esi,0x14(%eax)
    movl %edi, 24(%eax)
c010c4f9:	89 78 18             	mov    %edi,0x18(%eax)
    movl %ebp, 28(%eax)
c010c4fc:	89 68 1c             	mov    %ebp,0x1c(%eax)

    # restore to's registers
    movl 4(%esp), %eax          # not 8(%esp): popped return address already
c010c4ff:	8b 44 24 04          	mov    0x4(%esp),%eax
                                # eax now points to to
    movl 28(%eax), %ebp
c010c503:	8b 68 1c             	mov    0x1c(%eax),%ebp
    movl 24(%eax), %edi
c010c506:	8b 78 18             	mov    0x18(%eax),%edi
    movl 20(%eax), %esi
c010c509:	8b 70 14             	mov    0x14(%eax),%esi
    movl 16(%eax), %edx
c010c50c:	8b 50 10             	mov    0x10(%eax),%edx
    movl 12(%eax), %ecx
c010c50f:	8b 48 0c             	mov    0xc(%eax),%ecx
    movl 8(%eax), %ebx
c010c512:	8b 58 08             	mov    0x8(%eax),%ebx
    movl 4(%eax), %esp
c010c515:	8b 60 04             	mov    0x4(%eax),%esp

    pushl 0(%eax)               # push eip
c010c518:	ff 30                	pushl  (%eax)

    ret
c010c51a:	c3                   	ret    

c010c51b <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c010c51b:	55                   	push   %ebp
c010c51c:	89 e5                	mov    %esp,%ebp
c010c51e:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c010c521:	9c                   	pushf  
c010c522:	58                   	pop    %eax
c010c523:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c010c526:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c010c529:	25 00 02 00 00       	and    $0x200,%eax
c010c52e:	85 c0                	test   %eax,%eax
c010c530:	74 0c                	je     c010c53e <__intr_save+0x23>
        intr_disable();
c010c532:	e8 79 6f ff ff       	call   c01034b0 <intr_disable>
        return 1;
c010c537:	b8 01 00 00 00       	mov    $0x1,%eax
c010c53c:	eb 05                	jmp    c010c543 <__intr_save+0x28>
    }
    return 0;
c010c53e:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010c543:	c9                   	leave  
c010c544:	c3                   	ret    

c010c545 <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c010c545:	55                   	push   %ebp
c010c546:	89 e5                	mov    %esp,%ebp
c010c548:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c010c54b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010c54f:	74 05                	je     c010c556 <__intr_restore+0x11>
        intr_enable();
c010c551:	e8 54 6f ff ff       	call   c01034aa <intr_enable>
    }
}
c010c556:	c9                   	leave  
c010c557:	c3                   	ret    

c010c558 <wakeup_proc>:
#include <proc.h>
#include <sched.h>
#include <assert.h>

void
wakeup_proc(struct proc_struct *proc) {
c010c558:	55                   	push   %ebp
c010c559:	89 e5                	mov    %esp,%ebp
c010c55b:	83 ec 28             	sub    $0x28,%esp
    assert(proc->state != PROC_ZOMBIE);
c010c55e:	8b 45 08             	mov    0x8(%ebp),%eax
c010c561:	8b 00                	mov    (%eax),%eax
c010c563:	83 f8 03             	cmp    $0x3,%eax
c010c566:	75 24                	jne    c010c58c <wakeup_proc+0x34>
c010c568:	c7 44 24 0c 6b fc 10 	movl   $0xc010fc6b,0xc(%esp)
c010c56f:	c0 
c010c570:	c7 44 24 08 86 fc 10 	movl   $0xc010fc86,0x8(%esp)
c010c577:	c0 
c010c578:	c7 44 24 04 09 00 00 	movl   $0x9,0x4(%esp)
c010c57f:	00 
c010c580:	c7 04 24 9b fc 10 c0 	movl   $0xc010fc9b,(%esp)
c010c587:	e8 cc 5c ff ff       	call   c0102258 <__panic>
    bool intr_flag;
    local_intr_save(intr_flag);
c010c58c:	e8 8a ff ff ff       	call   c010c51b <__intr_save>
c010c591:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        if (proc->state != PROC_RUNNABLE) {
c010c594:	8b 45 08             	mov    0x8(%ebp),%eax
c010c597:	8b 00                	mov    (%eax),%eax
c010c599:	83 f8 02             	cmp    $0x2,%eax
c010c59c:	74 15                	je     c010c5b3 <wakeup_proc+0x5b>
            proc->state = PROC_RUNNABLE;
c010c59e:	8b 45 08             	mov    0x8(%ebp),%eax
c010c5a1:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
            proc->wait_state = 0;
c010c5a7:	8b 45 08             	mov    0x8(%ebp),%eax
c010c5aa:	c7 40 6c 00 00 00 00 	movl   $0x0,0x6c(%eax)
c010c5b1:	eb 1c                	jmp    c010c5cf <wakeup_proc+0x77>
        }
        else {
            warn("wakeup runnable process.\n");
c010c5b3:	c7 44 24 08 b1 fc 10 	movl   $0xc010fcb1,0x8(%esp)
c010c5ba:	c0 
c010c5bb:	c7 44 24 04 12 00 00 	movl   $0x12,0x4(%esp)
c010c5c2:	00 
c010c5c3:	c7 04 24 9b fc 10 c0 	movl   $0xc010fc9b,(%esp)
c010c5ca:	e8 f5 5c ff ff       	call   c01022c4 <__warn>
        }
    }
    local_intr_restore(intr_flag);
c010c5cf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c5d2:	89 04 24             	mov    %eax,(%esp)
c010c5d5:	e8 6b ff ff ff       	call   c010c545 <__intr_restore>
}
c010c5da:	c9                   	leave  
c010c5db:	c3                   	ret    

c010c5dc <schedule>:

void
schedule(void) {
c010c5dc:	55                   	push   %ebp
c010c5dd:	89 e5                	mov    %esp,%ebp
c010c5df:	83 ec 38             	sub    $0x38,%esp
    bool intr_flag;
    list_entry_t *le, *last;
    struct proc_struct *next = NULL;
c010c5e2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    local_intr_save(intr_flag);
c010c5e9:	e8 2d ff ff ff       	call   c010c51b <__intr_save>
c010c5ee:	89 45 ec             	mov    %eax,-0x14(%ebp)
    {
        current->need_resched = 0;
c010c5f1:	a1 88 0f 1a c0       	mov    0xc01a0f88,%eax
c010c5f6:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
        last = (current == idleproc) ? &proc_list : &(current->list_link);
c010c5fd:	8b 15 88 0f 1a c0    	mov    0xc01a0f88,%edx
c010c603:	a1 80 0f 1a c0       	mov    0xc01a0f80,%eax
c010c608:	39 c2                	cmp    %eax,%edx
c010c60a:	74 0a                	je     c010c616 <schedule+0x3a>
c010c60c:	a1 88 0f 1a c0       	mov    0xc01a0f88,%eax
c010c611:	83 c0 58             	add    $0x58,%eax
c010c614:	eb 05                	jmp    c010c61b <schedule+0x3f>
c010c616:	b8 b0 30 1a c0       	mov    $0xc01a30b0,%eax
c010c61b:	89 45 e8             	mov    %eax,-0x18(%ebp)
        le = last;
c010c61e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c621:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c624:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c627:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010c62a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010c62d:	8b 40 04             	mov    0x4(%eax),%eax
        do {
            if ((le = list_next(le)) != &proc_list) {
c010c630:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c633:	81 7d f4 b0 30 1a c0 	cmpl   $0xc01a30b0,-0xc(%ebp)
c010c63a:	74 15                	je     c010c651 <schedule+0x75>
                next = le2proc(le, list_link);
c010c63c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c63f:	83 e8 58             	sub    $0x58,%eax
c010c642:	89 45 f0             	mov    %eax,-0x10(%ebp)
                if (next->state == PROC_RUNNABLE) {
c010c645:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c648:	8b 00                	mov    (%eax),%eax
c010c64a:	83 f8 02             	cmp    $0x2,%eax
c010c64d:	75 02                	jne    c010c651 <schedule+0x75>
                    break;
c010c64f:	eb 08                	jmp    c010c659 <schedule+0x7d>
                }
            }
        } while (le != last);
c010c651:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c654:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c010c657:	75 cb                	jne    c010c624 <schedule+0x48>
        if (next == NULL || next->state != PROC_RUNNABLE) {
c010c659:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010c65d:	74 0a                	je     c010c669 <schedule+0x8d>
c010c65f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c662:	8b 00                	mov    (%eax),%eax
c010c664:	83 f8 02             	cmp    $0x2,%eax
c010c667:	74 08                	je     c010c671 <schedule+0x95>
            next = idleproc;
c010c669:	a1 80 0f 1a c0       	mov    0xc01a0f80,%eax
c010c66e:	89 45 f0             	mov    %eax,-0x10(%ebp)
        }
        next->runs ++;
c010c671:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c674:	8b 40 08             	mov    0x8(%eax),%eax
c010c677:	8d 50 01             	lea    0x1(%eax),%edx
c010c67a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c67d:	89 50 08             	mov    %edx,0x8(%eax)
        if (next != current) {
c010c680:	a1 88 0f 1a c0       	mov    0xc01a0f88,%eax
c010c685:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c010c688:	74 0b                	je     c010c695 <schedule+0xb9>
            proc_run(next);
c010c68a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c68d:	89 04 24             	mov    %eax,(%esp)
c010c690:	e8 e8 e6 ff ff       	call   c010ad7d <proc_run>
        }
    }
    local_intr_restore(intr_flag);
c010c695:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c698:	89 04 24             	mov    %eax,(%esp)
c010c69b:	e8 a5 fe ff ff       	call   c010c545 <__intr_restore>
}
c010c6a0:	c9                   	leave  
c010c6a1:	c3                   	ret    

c010c6a2 <sys_exit>:
#include <stdio.h>
#include <pmm.h>
#include <assert.h>

static int
sys_exit(uint32_t arg[]) {
c010c6a2:	55                   	push   %ebp
c010c6a3:	89 e5                	mov    %esp,%ebp
c010c6a5:	83 ec 28             	sub    $0x28,%esp
    int error_code = (int)arg[0];
c010c6a8:	8b 45 08             	mov    0x8(%ebp),%eax
c010c6ab:	8b 00                	mov    (%eax),%eax
c010c6ad:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return do_exit(error_code);
c010c6b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c6b3:	89 04 24             	mov    %eax,(%esp)
c010c6b6:	e8 26 ed ff ff       	call   c010b3e1 <do_exit>
}
c010c6bb:	c9                   	leave  
c010c6bc:	c3                   	ret    

c010c6bd <sys_fork>:

static int
sys_fork(uint32_t arg[]) {
c010c6bd:	55                   	push   %ebp
c010c6be:	89 e5                	mov    %esp,%ebp
c010c6c0:	83 ec 28             	sub    $0x28,%esp
    struct trapframe *tf = current->tf;
c010c6c3:	a1 88 0f 1a c0       	mov    0xc01a0f88,%eax
c010c6c8:	8b 40 3c             	mov    0x3c(%eax),%eax
c010c6cb:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uintptr_t stack = tf->tf_esp;
c010c6ce:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c6d1:	8b 40 44             	mov    0x44(%eax),%eax
c010c6d4:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return do_fork(0, stack, tf);
c010c6d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c6da:	89 44 24 08          	mov    %eax,0x8(%esp)
c010c6de:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c6e1:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c6e5:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c010c6ec:	e8 cf eb ff ff       	call   c010b2c0 <do_fork>
}
c010c6f1:	c9                   	leave  
c010c6f2:	c3                   	ret    

c010c6f3 <sys_wait>:

static int
sys_wait(uint32_t arg[]) {
c010c6f3:	55                   	push   %ebp
c010c6f4:	89 e5                	mov    %esp,%ebp
c010c6f6:	83 ec 28             	sub    $0x28,%esp
    int pid = (int)arg[0];
c010c6f9:	8b 45 08             	mov    0x8(%ebp),%eax
c010c6fc:	8b 00                	mov    (%eax),%eax
c010c6fe:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int *store = (int *)arg[1];
c010c701:	8b 45 08             	mov    0x8(%ebp),%eax
c010c704:	83 c0 04             	add    $0x4,%eax
c010c707:	8b 00                	mov    (%eax),%eax
c010c709:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return do_wait(pid, store);
c010c70c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c70f:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c713:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c716:	89 04 24             	mov    %eax,(%esp)
c010c719:	e8 41 f6 ff ff       	call   c010bd5f <do_wait>
}
c010c71e:	c9                   	leave  
c010c71f:	c3                   	ret    

c010c720 <sys_exec>:

static int
sys_exec(uint32_t arg[]) {
c010c720:	55                   	push   %ebp
c010c721:	89 e5                	mov    %esp,%ebp
c010c723:	83 ec 28             	sub    $0x28,%esp
    const char *name = (const char *)arg[0];
c010c726:	8b 45 08             	mov    0x8(%ebp),%eax
c010c729:	8b 00                	mov    (%eax),%eax
c010c72b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    size_t len = (size_t)arg[1];
c010c72e:	8b 45 08             	mov    0x8(%ebp),%eax
c010c731:	8b 40 04             	mov    0x4(%eax),%eax
c010c734:	89 45 f0             	mov    %eax,-0x10(%ebp)
    unsigned char *binary = (unsigned char *)arg[2];
c010c737:	8b 45 08             	mov    0x8(%ebp),%eax
c010c73a:	83 c0 08             	add    $0x8,%eax
c010c73d:	8b 00                	mov    (%eax),%eax
c010c73f:	89 45 ec             	mov    %eax,-0x14(%ebp)
    size_t size = (size_t)arg[3];
c010c742:	8b 45 08             	mov    0x8(%ebp),%eax
c010c745:	8b 40 0c             	mov    0xc(%eax),%eax
c010c748:	89 45 e8             	mov    %eax,-0x18(%ebp)
    return do_execve(name, len, binary, size);
c010c74b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c74e:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010c752:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c755:	89 44 24 08          	mov    %eax,0x8(%esp)
c010c759:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c75c:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c760:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c763:	89 04 24             	mov    %eax,(%esp)
c010c766:	e8 a8 f4 ff ff       	call   c010bc13 <do_execve>
}
c010c76b:	c9                   	leave  
c010c76c:	c3                   	ret    

c010c76d <sys_yield>:

static int
sys_yield(uint32_t arg[]) {
c010c76d:	55                   	push   %ebp
c010c76e:	89 e5                	mov    %esp,%ebp
c010c770:	83 ec 08             	sub    $0x8,%esp
    return do_yield();
c010c773:	e8 d1 f5 ff ff       	call   c010bd49 <do_yield>
}
c010c778:	c9                   	leave  
c010c779:	c3                   	ret    

c010c77a <sys_kill>:

static int
sys_kill(uint32_t arg[]) {
c010c77a:	55                   	push   %ebp
c010c77b:	89 e5                	mov    %esp,%ebp
c010c77d:	83 ec 28             	sub    $0x28,%esp
    int pid = (int)arg[0];
c010c780:	8b 45 08             	mov    0x8(%ebp),%eax
c010c783:	8b 00                	mov    (%eax),%eax
c010c785:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return do_kill(pid);
c010c788:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c78b:	89 04 24             	mov    %eax,(%esp)
c010c78e:	e8 de f7 ff ff       	call   c010bf71 <do_kill>
}
c010c793:	c9                   	leave  
c010c794:	c3                   	ret    

c010c795 <sys_getpid>:

static int
sys_getpid(uint32_t arg[]) {
c010c795:	55                   	push   %ebp
c010c796:	89 e5                	mov    %esp,%ebp
    return current->pid;
c010c798:	a1 88 0f 1a c0       	mov    0xc01a0f88,%eax
c010c79d:	8b 40 04             	mov    0x4(%eax),%eax
}
c010c7a0:	5d                   	pop    %ebp
c010c7a1:	c3                   	ret    

c010c7a2 <sys_putc>:

static int
sys_putc(uint32_t arg[]) {
c010c7a2:	55                   	push   %ebp
c010c7a3:	89 e5                	mov    %esp,%ebp
c010c7a5:	83 ec 28             	sub    $0x28,%esp
    int c = (int)arg[0];
c010c7a8:	8b 45 08             	mov    0x8(%ebp),%eax
c010c7ab:	8b 00                	mov    (%eax),%eax
c010c7ad:	89 45 f4             	mov    %eax,-0xc(%ebp)
    cputchar(c);
c010c7b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c7b3:	89 04 24             	mov    %eax,(%esp)
c010c7b6:	e8 41 50 ff ff       	call   c01017fc <cputchar>
    return 0;
c010c7bb:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010c7c0:	c9                   	leave  
c010c7c1:	c3                   	ret    

c010c7c2 <sys_pgdir>:

static int
sys_pgdir(uint32_t arg[]) {
c010c7c2:	55                   	push   %ebp
c010c7c3:	89 e5                	mov    %esp,%ebp
c010c7c5:	83 ec 08             	sub    $0x8,%esp
    print_pgdir();
c010c7c8:	e8 fa b8 ff ff       	call   c01080c7 <print_pgdir>
    return 0;
c010c7cd:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010c7d2:	c9                   	leave  
c010c7d3:	c3                   	ret    

c010c7d4 <syscall>:
};

#define NUM_SYSCALLS        ((sizeof(syscalls)) / (sizeof(syscalls[0])))

void
syscall(void) {
c010c7d4:	55                   	push   %ebp
c010c7d5:	89 e5                	mov    %esp,%ebp
c010c7d7:	83 ec 48             	sub    $0x48,%esp
    struct trapframe *tf = current->tf;
c010c7da:	a1 88 0f 1a c0       	mov    0xc01a0f88,%eax
c010c7df:	8b 40 3c             	mov    0x3c(%eax),%eax
c010c7e2:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t arg[5];
    int num = tf->tf_regs.reg_eax;
c010c7e5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c7e8:	8b 40 1c             	mov    0x1c(%eax),%eax
c010c7eb:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (num >= 0 && num < NUM_SYSCALLS) {
c010c7ee:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010c7f2:	78 5e                	js     c010c852 <syscall+0x7e>
c010c7f4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c7f7:	83 f8 1f             	cmp    $0x1f,%eax
c010c7fa:	77 56                	ja     c010c852 <syscall+0x7e>
        if (syscalls[num] != NULL) {
c010c7fc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c7ff:	8b 04 85 a0 ea 12 c0 	mov    -0x3fed1560(,%eax,4),%eax
c010c806:	85 c0                	test   %eax,%eax
c010c808:	74 48                	je     c010c852 <syscall+0x7e>
            arg[0] = tf->tf_regs.reg_edx;
c010c80a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c80d:	8b 40 14             	mov    0x14(%eax),%eax
c010c810:	89 45 dc             	mov    %eax,-0x24(%ebp)
            arg[1] = tf->tf_regs.reg_ecx;
c010c813:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c816:	8b 40 18             	mov    0x18(%eax),%eax
c010c819:	89 45 e0             	mov    %eax,-0x20(%ebp)
            arg[2] = tf->tf_regs.reg_ebx;
c010c81c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c81f:	8b 40 10             	mov    0x10(%eax),%eax
c010c822:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            arg[3] = tf->tf_regs.reg_edi;
c010c825:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c828:	8b 00                	mov    (%eax),%eax
c010c82a:	89 45 e8             	mov    %eax,-0x18(%ebp)
            arg[4] = tf->tf_regs.reg_esi;
c010c82d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c830:	8b 40 04             	mov    0x4(%eax),%eax
c010c833:	89 45 ec             	mov    %eax,-0x14(%ebp)
            tf->tf_regs.reg_eax = syscalls[num](arg);
c010c836:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c839:	8b 04 85 a0 ea 12 c0 	mov    -0x3fed1560(,%eax,4),%eax
c010c840:	8d 55 dc             	lea    -0x24(%ebp),%edx
c010c843:	89 14 24             	mov    %edx,(%esp)
c010c846:	ff d0                	call   *%eax
c010c848:	89 c2                	mov    %eax,%edx
c010c84a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c84d:	89 50 1c             	mov    %edx,0x1c(%eax)
            return ;
c010c850:	eb 46                	jmp    c010c898 <syscall+0xc4>
        }
    }
    print_trapframe(tf);
c010c852:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c855:	89 04 24             	mov    %eax,(%esp)
c010c858:	e8 11 70 ff ff       	call   c010386e <print_trapframe>
    panic("undefined syscall %d, pid = %d, name = %s.\n",
c010c85d:	a1 88 0f 1a c0       	mov    0xc01a0f88,%eax
c010c862:	8d 50 48             	lea    0x48(%eax),%edx
c010c865:	a1 88 0f 1a c0       	mov    0xc01a0f88,%eax
c010c86a:	8b 40 04             	mov    0x4(%eax),%eax
c010c86d:	89 54 24 14          	mov    %edx,0x14(%esp)
c010c871:	89 44 24 10          	mov    %eax,0x10(%esp)
c010c875:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c878:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010c87c:	c7 44 24 08 cc fc 10 	movl   $0xc010fccc,0x8(%esp)
c010c883:	c0 
c010c884:	c7 44 24 04 63 00 00 	movl   $0x63,0x4(%esp)
c010c88b:	00 
c010c88c:	c7 04 24 f8 fc 10 c0 	movl   $0xc010fcf8,(%esp)
c010c893:	e8 c0 59 ff ff       	call   c0102258 <__panic>
            num, current->pid, current->name);
}
c010c898:	c9                   	leave  
c010c899:	c3                   	ret    

c010c89a <hash32>:
 * @bits:   the number of bits in a return value
 *
 * High bits are more random, so we use them.
 * */
uint32_t
hash32(uint32_t val, unsigned int bits) {
c010c89a:	55                   	push   %ebp
c010c89b:	89 e5                	mov    %esp,%ebp
c010c89d:	83 ec 10             	sub    $0x10,%esp
    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
c010c8a0:	8b 45 08             	mov    0x8(%ebp),%eax
c010c8a3:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
c010c8a9:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return (hash >> (32 - bits));
c010c8ac:	b8 20 00 00 00       	mov    $0x20,%eax
c010c8b1:	2b 45 0c             	sub    0xc(%ebp),%eax
c010c8b4:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010c8b7:	89 c1                	mov    %eax,%ecx
c010c8b9:	d3 ea                	shr    %cl,%edx
c010c8bb:	89 d0                	mov    %edx,%eax
}
c010c8bd:	c9                   	leave  
c010c8be:	c3                   	ret    

c010c8bf <printnum>:
 * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
 * @padc:       character that padded on the left if the actual width is less than @width
 * */
static void
printnum(void (*putch)(int, void*), void *putdat,
        unsigned long long num, unsigned base, int width, int padc) {
c010c8bf:	55                   	push   %ebp
c010c8c0:	89 e5                	mov    %esp,%ebp
c010c8c2:	83 ec 58             	sub    $0x58,%esp
c010c8c5:	8b 45 10             	mov    0x10(%ebp),%eax
c010c8c8:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010c8cb:	8b 45 14             	mov    0x14(%ebp),%eax
c010c8ce:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    unsigned long long result = num;
c010c8d1:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010c8d4:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010c8d7:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010c8da:	89 55 ec             	mov    %edx,-0x14(%ebp)
    unsigned mod = do_div(result, base);
c010c8dd:	8b 45 18             	mov    0x18(%ebp),%eax
c010c8e0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010c8e3:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c8e6:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010c8e9:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010c8ec:	89 55 f0             	mov    %edx,-0x10(%ebp)
c010c8ef:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c8f2:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c8f5:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010c8f9:	74 1c                	je     c010c917 <printnum+0x58>
c010c8fb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c8fe:	ba 00 00 00 00       	mov    $0x0,%edx
c010c903:	f7 75 e4             	divl   -0x1c(%ebp)
c010c906:	89 55 f4             	mov    %edx,-0xc(%ebp)
c010c909:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c90c:	ba 00 00 00 00       	mov    $0x0,%edx
c010c911:	f7 75 e4             	divl   -0x1c(%ebp)
c010c914:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010c917:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010c91a:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010c91d:	f7 75 e4             	divl   -0x1c(%ebp)
c010c920:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010c923:	89 55 dc             	mov    %edx,-0x24(%ebp)
c010c926:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010c929:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010c92c:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010c92f:	89 55 ec             	mov    %edx,-0x14(%ebp)
c010c932:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010c935:	89 45 d8             	mov    %eax,-0x28(%ebp)

    // first recursively print all preceding (more significant) digits
    if (num >= base) {
c010c938:	8b 45 18             	mov    0x18(%ebp),%eax
c010c93b:	ba 00 00 00 00       	mov    $0x0,%edx
c010c940:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c010c943:	77 56                	ja     c010c99b <printnum+0xdc>
c010c945:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c010c948:	72 05                	jb     c010c94f <printnum+0x90>
c010c94a:	3b 45 d0             	cmp    -0x30(%ebp),%eax
c010c94d:	77 4c                	ja     c010c99b <printnum+0xdc>
        printnum(putch, putdat, result, base, width - 1, padc);
c010c94f:	8b 45 1c             	mov    0x1c(%ebp),%eax
c010c952:	8d 50 ff             	lea    -0x1(%eax),%edx
c010c955:	8b 45 20             	mov    0x20(%ebp),%eax
c010c958:	89 44 24 18          	mov    %eax,0x18(%esp)
c010c95c:	89 54 24 14          	mov    %edx,0x14(%esp)
c010c960:	8b 45 18             	mov    0x18(%ebp),%eax
c010c963:	89 44 24 10          	mov    %eax,0x10(%esp)
c010c967:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c96a:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010c96d:	89 44 24 08          	mov    %eax,0x8(%esp)
c010c971:	89 54 24 0c          	mov    %edx,0xc(%esp)
c010c975:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c978:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c97c:	8b 45 08             	mov    0x8(%ebp),%eax
c010c97f:	89 04 24             	mov    %eax,(%esp)
c010c982:	e8 38 ff ff ff       	call   c010c8bf <printnum>
c010c987:	eb 1c                	jmp    c010c9a5 <printnum+0xe6>
    } else {
        // print any needed pad characters before first digit
        while (-- width > 0)
            putch(padc, putdat);
c010c989:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c98c:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c990:	8b 45 20             	mov    0x20(%ebp),%eax
c010c993:	89 04 24             	mov    %eax,(%esp)
c010c996:	8b 45 08             	mov    0x8(%ebp),%eax
c010c999:	ff d0                	call   *%eax
    // first recursively print all preceding (more significant) digits
    if (num >= base) {
        printnum(putch, putdat, result, base, width - 1, padc);
    } else {
        // print any needed pad characters before first digit
        while (-- width > 0)
c010c99b:	83 6d 1c 01          	subl   $0x1,0x1c(%ebp)
c010c99f:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
c010c9a3:	7f e4                	jg     c010c989 <printnum+0xca>
            putch(padc, putdat);
    }
    // then print this (the least significant) digit
    putch("0123456789abcdef"[mod], putdat);
c010c9a5:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010c9a8:	05 24 fe 10 c0       	add    $0xc010fe24,%eax
c010c9ad:	0f b6 00             	movzbl (%eax),%eax
c010c9b0:	0f be c0             	movsbl %al,%eax
c010c9b3:	8b 55 0c             	mov    0xc(%ebp),%edx
c010c9b6:	89 54 24 04          	mov    %edx,0x4(%esp)
c010c9ba:	89 04 24             	mov    %eax,(%esp)
c010c9bd:	8b 45 08             	mov    0x8(%ebp),%eax
c010c9c0:	ff d0                	call   *%eax
}
c010c9c2:	c9                   	leave  
c010c9c3:	c3                   	ret    

c010c9c4 <getuint>:
 * getuint - get an unsigned int of various possible sizes from a varargs list
 * @ap:         a varargs list pointer
 * @lflag:      determines the size of the vararg that @ap points to
 * */
static unsigned long long
getuint(va_list *ap, int lflag) {
c010c9c4:	55                   	push   %ebp
c010c9c5:	89 e5                	mov    %esp,%ebp
    if (lflag >= 2) {
c010c9c7:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
c010c9cb:	7e 14                	jle    c010c9e1 <getuint+0x1d>
        return va_arg(*ap, unsigned long long);
c010c9cd:	8b 45 08             	mov    0x8(%ebp),%eax
c010c9d0:	8b 00                	mov    (%eax),%eax
c010c9d2:	8d 48 08             	lea    0x8(%eax),%ecx
c010c9d5:	8b 55 08             	mov    0x8(%ebp),%edx
c010c9d8:	89 0a                	mov    %ecx,(%edx)
c010c9da:	8b 50 04             	mov    0x4(%eax),%edx
c010c9dd:	8b 00                	mov    (%eax),%eax
c010c9df:	eb 30                	jmp    c010ca11 <getuint+0x4d>
    }
    else if (lflag) {
c010c9e1:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010c9e5:	74 16                	je     c010c9fd <getuint+0x39>
        return va_arg(*ap, unsigned long);
c010c9e7:	8b 45 08             	mov    0x8(%ebp),%eax
c010c9ea:	8b 00                	mov    (%eax),%eax
c010c9ec:	8d 48 04             	lea    0x4(%eax),%ecx
c010c9ef:	8b 55 08             	mov    0x8(%ebp),%edx
c010c9f2:	89 0a                	mov    %ecx,(%edx)
c010c9f4:	8b 00                	mov    (%eax),%eax
c010c9f6:	ba 00 00 00 00       	mov    $0x0,%edx
c010c9fb:	eb 14                	jmp    c010ca11 <getuint+0x4d>
    }
    else {
        return va_arg(*ap, unsigned int);
c010c9fd:	8b 45 08             	mov    0x8(%ebp),%eax
c010ca00:	8b 00                	mov    (%eax),%eax
c010ca02:	8d 48 04             	lea    0x4(%eax),%ecx
c010ca05:	8b 55 08             	mov    0x8(%ebp),%edx
c010ca08:	89 0a                	mov    %ecx,(%edx)
c010ca0a:	8b 00                	mov    (%eax),%eax
c010ca0c:	ba 00 00 00 00       	mov    $0x0,%edx
    }
}
c010ca11:	5d                   	pop    %ebp
c010ca12:	c3                   	ret    

c010ca13 <getint>:
 * getint - same as getuint but signed, we can't use getuint because of sign extension
 * @ap:         a varargs list pointer
 * @lflag:      determines the size of the vararg that @ap points to
 * */
static long long
getint(va_list *ap, int lflag) {
c010ca13:	55                   	push   %ebp
c010ca14:	89 e5                	mov    %esp,%ebp
    if (lflag >= 2) {
c010ca16:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
c010ca1a:	7e 14                	jle    c010ca30 <getint+0x1d>
        return va_arg(*ap, long long);
c010ca1c:	8b 45 08             	mov    0x8(%ebp),%eax
c010ca1f:	8b 00                	mov    (%eax),%eax
c010ca21:	8d 48 08             	lea    0x8(%eax),%ecx
c010ca24:	8b 55 08             	mov    0x8(%ebp),%edx
c010ca27:	89 0a                	mov    %ecx,(%edx)
c010ca29:	8b 50 04             	mov    0x4(%eax),%edx
c010ca2c:	8b 00                	mov    (%eax),%eax
c010ca2e:	eb 28                	jmp    c010ca58 <getint+0x45>
    }
    else if (lflag) {
c010ca30:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010ca34:	74 12                	je     c010ca48 <getint+0x35>
        return va_arg(*ap, long);
c010ca36:	8b 45 08             	mov    0x8(%ebp),%eax
c010ca39:	8b 00                	mov    (%eax),%eax
c010ca3b:	8d 48 04             	lea    0x4(%eax),%ecx
c010ca3e:	8b 55 08             	mov    0x8(%ebp),%edx
c010ca41:	89 0a                	mov    %ecx,(%edx)
c010ca43:	8b 00                	mov    (%eax),%eax
c010ca45:	99                   	cltd   
c010ca46:	eb 10                	jmp    c010ca58 <getint+0x45>
    }
    else {
        return va_arg(*ap, int);
c010ca48:	8b 45 08             	mov    0x8(%ebp),%eax
c010ca4b:	8b 00                	mov    (%eax),%eax
c010ca4d:	8d 48 04             	lea    0x4(%eax),%ecx
c010ca50:	8b 55 08             	mov    0x8(%ebp),%edx
c010ca53:	89 0a                	mov    %ecx,(%edx)
c010ca55:	8b 00                	mov    (%eax),%eax
c010ca57:	99                   	cltd   
    }
}
c010ca58:	5d                   	pop    %ebp
c010ca59:	c3                   	ret    

c010ca5a <printfmt>:
 * @putch:      specified putch function, print a single character
 * @putdat:     used by @putch function
 * @fmt:        the format string to use
 * */
void
printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
c010ca5a:	55                   	push   %ebp
c010ca5b:	89 e5                	mov    %esp,%ebp
c010ca5d:	83 ec 28             	sub    $0x28,%esp
    va_list ap;

    va_start(ap, fmt);
c010ca60:	8d 45 14             	lea    0x14(%ebp),%eax
c010ca63:	89 45 f4             	mov    %eax,-0xc(%ebp)
    vprintfmt(putch, putdat, fmt, ap);
c010ca66:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ca69:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010ca6d:	8b 45 10             	mov    0x10(%ebp),%eax
c010ca70:	89 44 24 08          	mov    %eax,0x8(%esp)
c010ca74:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ca77:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ca7b:	8b 45 08             	mov    0x8(%ebp),%eax
c010ca7e:	89 04 24             	mov    %eax,(%esp)
c010ca81:	e8 02 00 00 00       	call   c010ca88 <vprintfmt>
    va_end(ap);
}
c010ca86:	c9                   	leave  
c010ca87:	c3                   	ret    

c010ca88 <vprintfmt>:
 *
 * Call this function if you are already dealing with a va_list.
 * Or you probably want printfmt() instead.
 * */
void
vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
c010ca88:	55                   	push   %ebp
c010ca89:	89 e5                	mov    %esp,%ebp
c010ca8b:	56                   	push   %esi
c010ca8c:	53                   	push   %ebx
c010ca8d:	83 ec 40             	sub    $0x40,%esp
    register int ch, err;
    unsigned long long num;
    int base, width, precision, lflag, altflag;

    while (1) {
        while ((ch = *(unsigned char *)fmt ++) != '%') {
c010ca90:	eb 18                	jmp    c010caaa <vprintfmt+0x22>
            if (ch == '\0') {
c010ca92:	85 db                	test   %ebx,%ebx
c010ca94:	75 05                	jne    c010ca9b <vprintfmt+0x13>
                return;
c010ca96:	e9 d1 03 00 00       	jmp    c010ce6c <vprintfmt+0x3e4>
            }
            putch(ch, putdat);
c010ca9b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ca9e:	89 44 24 04          	mov    %eax,0x4(%esp)
c010caa2:	89 1c 24             	mov    %ebx,(%esp)
c010caa5:	8b 45 08             	mov    0x8(%ebp),%eax
c010caa8:	ff d0                	call   *%eax
    register int ch, err;
    unsigned long long num;
    int base, width, precision, lflag, altflag;

    while (1) {
        while ((ch = *(unsigned char *)fmt ++) != '%') {
c010caaa:	8b 45 10             	mov    0x10(%ebp),%eax
c010caad:	8d 50 01             	lea    0x1(%eax),%edx
c010cab0:	89 55 10             	mov    %edx,0x10(%ebp)
c010cab3:	0f b6 00             	movzbl (%eax),%eax
c010cab6:	0f b6 d8             	movzbl %al,%ebx
c010cab9:	83 fb 25             	cmp    $0x25,%ebx
c010cabc:	75 d4                	jne    c010ca92 <vprintfmt+0xa>
            }
            putch(ch, putdat);
        }

        // Process a %-escape sequence
        char padc = ' ';
c010cabe:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
        width = precision = -1;
c010cac2:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
c010cac9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010cacc:	89 45 e8             	mov    %eax,-0x18(%ebp)
        lflag = altflag = 0;
c010cacf:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c010cad6:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010cad9:	89 45 e0             	mov    %eax,-0x20(%ebp)

    reswitch:
        switch (ch = *(unsigned char *)fmt ++) {
c010cadc:	8b 45 10             	mov    0x10(%ebp),%eax
c010cadf:	8d 50 01             	lea    0x1(%eax),%edx
c010cae2:	89 55 10             	mov    %edx,0x10(%ebp)
c010cae5:	0f b6 00             	movzbl (%eax),%eax
c010cae8:	0f b6 d8             	movzbl %al,%ebx
c010caeb:	8d 43 dd             	lea    -0x23(%ebx),%eax
c010caee:	83 f8 55             	cmp    $0x55,%eax
c010caf1:	0f 87 44 03 00 00    	ja     c010ce3b <vprintfmt+0x3b3>
c010caf7:	8b 04 85 48 fe 10 c0 	mov    -0x3fef01b8(,%eax,4),%eax
c010cafe:	ff e0                	jmp    *%eax

        // flag to pad on the right
        case '-':
            padc = '-';
c010cb00:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
            goto reswitch;
c010cb04:	eb d6                	jmp    c010cadc <vprintfmt+0x54>

        // flag to pad with 0's instead of spaces
        case '0':
            padc = '0';
c010cb06:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
            goto reswitch;
c010cb0a:	eb d0                	jmp    c010cadc <vprintfmt+0x54>

        // width field
        case '1' ... '9':
            for (precision = 0; ; ++ fmt) {
c010cb0c:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
                precision = precision * 10 + ch - '0';
c010cb13:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010cb16:	89 d0                	mov    %edx,%eax
c010cb18:	c1 e0 02             	shl    $0x2,%eax
c010cb1b:	01 d0                	add    %edx,%eax
c010cb1d:	01 c0                	add    %eax,%eax
c010cb1f:	01 d8                	add    %ebx,%eax
c010cb21:	83 e8 30             	sub    $0x30,%eax
c010cb24:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                ch = *fmt;
c010cb27:	8b 45 10             	mov    0x10(%ebp),%eax
c010cb2a:	0f b6 00             	movzbl (%eax),%eax
c010cb2d:	0f be d8             	movsbl %al,%ebx
                if (ch < '0' || ch > '9') {
c010cb30:	83 fb 2f             	cmp    $0x2f,%ebx
c010cb33:	7e 0b                	jle    c010cb40 <vprintfmt+0xb8>
c010cb35:	83 fb 39             	cmp    $0x39,%ebx
c010cb38:	7f 06                	jg     c010cb40 <vprintfmt+0xb8>
            padc = '0';
            goto reswitch;

        // width field
        case '1' ... '9':
            for (precision = 0; ; ++ fmt) {
c010cb3a:	83 45 10 01          	addl   $0x1,0x10(%ebp)
                precision = precision * 10 + ch - '0';
                ch = *fmt;
                if (ch < '0' || ch > '9') {
                    break;
                }
            }
c010cb3e:	eb d3                	jmp    c010cb13 <vprintfmt+0x8b>
            goto process_precision;
c010cb40:	eb 33                	jmp    c010cb75 <vprintfmt+0xed>

        case '*':
            precision = va_arg(ap, int);
c010cb42:	8b 45 14             	mov    0x14(%ebp),%eax
c010cb45:	8d 50 04             	lea    0x4(%eax),%edx
c010cb48:	89 55 14             	mov    %edx,0x14(%ebp)
c010cb4b:	8b 00                	mov    (%eax),%eax
c010cb4d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            goto process_precision;
c010cb50:	eb 23                	jmp    c010cb75 <vprintfmt+0xed>

        case '.':
            if (width < 0)
c010cb52:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010cb56:	79 0c                	jns    c010cb64 <vprintfmt+0xdc>
                width = 0;
c010cb58:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
            goto reswitch;
c010cb5f:	e9 78 ff ff ff       	jmp    c010cadc <vprintfmt+0x54>
c010cb64:	e9 73 ff ff ff       	jmp    c010cadc <vprintfmt+0x54>

        case '#':
            altflag = 1;
c010cb69:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
            goto reswitch;
c010cb70:	e9 67 ff ff ff       	jmp    c010cadc <vprintfmt+0x54>

        process_precision:
            if (width < 0)
c010cb75:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010cb79:	79 12                	jns    c010cb8d <vprintfmt+0x105>
                width = precision, precision = -1;
c010cb7b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010cb7e:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010cb81:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
            goto reswitch;
c010cb88:	e9 4f ff ff ff       	jmp    c010cadc <vprintfmt+0x54>
c010cb8d:	e9 4a ff ff ff       	jmp    c010cadc <vprintfmt+0x54>

        // long flag (doubled for long long)
        case 'l':
            lflag ++;
c010cb92:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
            goto reswitch;
c010cb96:	e9 41 ff ff ff       	jmp    c010cadc <vprintfmt+0x54>

        // character
        case 'c':
            putch(va_arg(ap, int), putdat);
c010cb9b:	8b 45 14             	mov    0x14(%ebp),%eax
c010cb9e:	8d 50 04             	lea    0x4(%eax),%edx
c010cba1:	89 55 14             	mov    %edx,0x14(%ebp)
c010cba4:	8b 00                	mov    (%eax),%eax
c010cba6:	8b 55 0c             	mov    0xc(%ebp),%edx
c010cba9:	89 54 24 04          	mov    %edx,0x4(%esp)
c010cbad:	89 04 24             	mov    %eax,(%esp)
c010cbb0:	8b 45 08             	mov    0x8(%ebp),%eax
c010cbb3:	ff d0                	call   *%eax
            break;
c010cbb5:	e9 ac 02 00 00       	jmp    c010ce66 <vprintfmt+0x3de>

        // error message
        case 'e':
            err = va_arg(ap, int);
c010cbba:	8b 45 14             	mov    0x14(%ebp),%eax
c010cbbd:	8d 50 04             	lea    0x4(%eax),%edx
c010cbc0:	89 55 14             	mov    %edx,0x14(%ebp)
c010cbc3:	8b 18                	mov    (%eax),%ebx
            if (err < 0) {
c010cbc5:	85 db                	test   %ebx,%ebx
c010cbc7:	79 02                	jns    c010cbcb <vprintfmt+0x143>
                err = -err;
c010cbc9:	f7 db                	neg    %ebx
            }
            if (err > MAXERROR || (p = error_string[err]) == NULL) {
c010cbcb:	83 fb 18             	cmp    $0x18,%ebx
c010cbce:	7f 0b                	jg     c010cbdb <vprintfmt+0x153>
c010cbd0:	8b 34 9d c0 fd 10 c0 	mov    -0x3fef0240(,%ebx,4),%esi
c010cbd7:	85 f6                	test   %esi,%esi
c010cbd9:	75 23                	jne    c010cbfe <vprintfmt+0x176>
                printfmt(putch, putdat, "error %d", err);
c010cbdb:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c010cbdf:	c7 44 24 08 35 fe 10 	movl   $0xc010fe35,0x8(%esp)
c010cbe6:	c0 
c010cbe7:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cbea:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cbee:	8b 45 08             	mov    0x8(%ebp),%eax
c010cbf1:	89 04 24             	mov    %eax,(%esp)
c010cbf4:	e8 61 fe ff ff       	call   c010ca5a <printfmt>
            }
            else {
                printfmt(putch, putdat, "%s", p);
            }
            break;
c010cbf9:	e9 68 02 00 00       	jmp    c010ce66 <vprintfmt+0x3de>
            }
            if (err > MAXERROR || (p = error_string[err]) == NULL) {
                printfmt(putch, putdat, "error %d", err);
            }
            else {
                printfmt(putch, putdat, "%s", p);
c010cbfe:	89 74 24 0c          	mov    %esi,0xc(%esp)
c010cc02:	c7 44 24 08 3e fe 10 	movl   $0xc010fe3e,0x8(%esp)
c010cc09:	c0 
c010cc0a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cc0d:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cc11:	8b 45 08             	mov    0x8(%ebp),%eax
c010cc14:	89 04 24             	mov    %eax,(%esp)
c010cc17:	e8 3e fe ff ff       	call   c010ca5a <printfmt>
            }
            break;
c010cc1c:	e9 45 02 00 00       	jmp    c010ce66 <vprintfmt+0x3de>

        // string
        case 's':
            if ((p = va_arg(ap, char *)) == NULL) {
c010cc21:	8b 45 14             	mov    0x14(%ebp),%eax
c010cc24:	8d 50 04             	lea    0x4(%eax),%edx
c010cc27:	89 55 14             	mov    %edx,0x14(%ebp)
c010cc2a:	8b 30                	mov    (%eax),%esi
c010cc2c:	85 f6                	test   %esi,%esi
c010cc2e:	75 05                	jne    c010cc35 <vprintfmt+0x1ad>
                p = "(null)";
c010cc30:	be 41 fe 10 c0       	mov    $0xc010fe41,%esi
            }
            if (width > 0 && padc != '-') {
c010cc35:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010cc39:	7e 3e                	jle    c010cc79 <vprintfmt+0x1f1>
c010cc3b:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
c010cc3f:	74 38                	je     c010cc79 <vprintfmt+0x1f1>
                for (width -= strnlen(p, precision); width > 0; width --) {
c010cc41:	8b 5d e8             	mov    -0x18(%ebp),%ebx
c010cc44:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010cc47:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cc4b:	89 34 24             	mov    %esi,(%esp)
c010cc4e:	e8 ed 03 00 00       	call   c010d040 <strnlen>
c010cc53:	29 c3                	sub    %eax,%ebx
c010cc55:	89 d8                	mov    %ebx,%eax
c010cc57:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010cc5a:	eb 17                	jmp    c010cc73 <vprintfmt+0x1eb>
                    putch(padc, putdat);
c010cc5c:	0f be 45 db          	movsbl -0x25(%ebp),%eax
c010cc60:	8b 55 0c             	mov    0xc(%ebp),%edx
c010cc63:	89 54 24 04          	mov    %edx,0x4(%esp)
c010cc67:	89 04 24             	mov    %eax,(%esp)
c010cc6a:	8b 45 08             	mov    0x8(%ebp),%eax
c010cc6d:	ff d0                	call   *%eax
        case 's':
            if ((p = va_arg(ap, char *)) == NULL) {
                p = "(null)";
            }
            if (width > 0 && padc != '-') {
                for (width -= strnlen(p, precision); width > 0; width --) {
c010cc6f:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
c010cc73:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010cc77:	7f e3                	jg     c010cc5c <vprintfmt+0x1d4>
                    putch(padc, putdat);
                }
            }
            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
c010cc79:	eb 38                	jmp    c010ccb3 <vprintfmt+0x22b>
                if (altflag && (ch < ' ' || ch > '~')) {
c010cc7b:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c010cc7f:	74 1f                	je     c010cca0 <vprintfmt+0x218>
c010cc81:	83 fb 1f             	cmp    $0x1f,%ebx
c010cc84:	7e 05                	jle    c010cc8b <vprintfmt+0x203>
c010cc86:	83 fb 7e             	cmp    $0x7e,%ebx
c010cc89:	7e 15                	jle    c010cca0 <vprintfmt+0x218>
                    putch('?', putdat);
c010cc8b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cc8e:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cc92:	c7 04 24 3f 00 00 00 	movl   $0x3f,(%esp)
c010cc99:	8b 45 08             	mov    0x8(%ebp),%eax
c010cc9c:	ff d0                	call   *%eax
c010cc9e:	eb 0f                	jmp    c010ccaf <vprintfmt+0x227>
                }
                else {
                    putch(ch, putdat);
c010cca0:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cca3:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cca7:	89 1c 24             	mov    %ebx,(%esp)
c010ccaa:	8b 45 08             	mov    0x8(%ebp),%eax
c010ccad:	ff d0                	call   *%eax
            if (width > 0 && padc != '-') {
                for (width -= strnlen(p, precision); width > 0; width --) {
                    putch(padc, putdat);
                }
            }
            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
c010ccaf:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
c010ccb3:	89 f0                	mov    %esi,%eax
c010ccb5:	8d 70 01             	lea    0x1(%eax),%esi
c010ccb8:	0f b6 00             	movzbl (%eax),%eax
c010ccbb:	0f be d8             	movsbl %al,%ebx
c010ccbe:	85 db                	test   %ebx,%ebx
c010ccc0:	74 10                	je     c010ccd2 <vprintfmt+0x24a>
c010ccc2:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010ccc6:	78 b3                	js     c010cc7b <vprintfmt+0x1f3>
c010ccc8:	83 6d e4 01          	subl   $0x1,-0x1c(%ebp)
c010cccc:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010ccd0:	79 a9                	jns    c010cc7b <vprintfmt+0x1f3>
                }
                else {
                    putch(ch, putdat);
                }
            }
            for (; width > 0; width --) {
c010ccd2:	eb 17                	jmp    c010cceb <vprintfmt+0x263>
                putch(' ', putdat);
c010ccd4:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ccd7:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ccdb:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
c010cce2:	8b 45 08             	mov    0x8(%ebp),%eax
c010cce5:	ff d0                	call   *%eax
                }
                else {
                    putch(ch, putdat);
                }
            }
            for (; width > 0; width --) {
c010cce7:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
c010cceb:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010ccef:	7f e3                	jg     c010ccd4 <vprintfmt+0x24c>
                putch(' ', putdat);
            }
            break;
c010ccf1:	e9 70 01 00 00       	jmp    c010ce66 <vprintfmt+0x3de>

        // (signed) decimal
        case 'd':
            num = getint(&ap, lflag);
c010ccf6:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010ccf9:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ccfd:	8d 45 14             	lea    0x14(%ebp),%eax
c010cd00:	89 04 24             	mov    %eax,(%esp)
c010cd03:	e8 0b fd ff ff       	call   c010ca13 <getint>
c010cd08:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010cd0b:	89 55 f4             	mov    %edx,-0xc(%ebp)
            if ((long long)num < 0) {
c010cd0e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cd11:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010cd14:	85 d2                	test   %edx,%edx
c010cd16:	79 26                	jns    c010cd3e <vprintfmt+0x2b6>
                putch('-', putdat);
c010cd18:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cd1b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cd1f:	c7 04 24 2d 00 00 00 	movl   $0x2d,(%esp)
c010cd26:	8b 45 08             	mov    0x8(%ebp),%eax
c010cd29:	ff d0                	call   *%eax
                num = -(long long)num;
c010cd2b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cd2e:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010cd31:	f7 d8                	neg    %eax
c010cd33:	83 d2 00             	adc    $0x0,%edx
c010cd36:	f7 da                	neg    %edx
c010cd38:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010cd3b:	89 55 f4             	mov    %edx,-0xc(%ebp)
            }
            base = 10;
c010cd3e:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
            goto number;
c010cd45:	e9 a8 00 00 00       	jmp    c010cdf2 <vprintfmt+0x36a>

        // unsigned decimal
        case 'u':
            num = getuint(&ap, lflag);
c010cd4a:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010cd4d:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cd51:	8d 45 14             	lea    0x14(%ebp),%eax
c010cd54:	89 04 24             	mov    %eax,(%esp)
c010cd57:	e8 68 fc ff ff       	call   c010c9c4 <getuint>
c010cd5c:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010cd5f:	89 55 f4             	mov    %edx,-0xc(%ebp)
            base = 10;
c010cd62:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
            goto number;
c010cd69:	e9 84 00 00 00       	jmp    c010cdf2 <vprintfmt+0x36a>

        // (unsigned) octal
        case 'o':
            num = getuint(&ap, lflag);
c010cd6e:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010cd71:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cd75:	8d 45 14             	lea    0x14(%ebp),%eax
c010cd78:	89 04 24             	mov    %eax,(%esp)
c010cd7b:	e8 44 fc ff ff       	call   c010c9c4 <getuint>
c010cd80:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010cd83:	89 55 f4             	mov    %edx,-0xc(%ebp)
            base = 8;
c010cd86:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
            goto number;
c010cd8d:	eb 63                	jmp    c010cdf2 <vprintfmt+0x36a>

        // pointer
        case 'p':
            putch('0', putdat);
c010cd8f:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cd92:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cd96:	c7 04 24 30 00 00 00 	movl   $0x30,(%esp)
c010cd9d:	8b 45 08             	mov    0x8(%ebp),%eax
c010cda0:	ff d0                	call   *%eax
            putch('x', putdat);
c010cda2:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cda5:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cda9:	c7 04 24 78 00 00 00 	movl   $0x78,(%esp)
c010cdb0:	8b 45 08             	mov    0x8(%ebp),%eax
c010cdb3:	ff d0                	call   *%eax
            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
c010cdb5:	8b 45 14             	mov    0x14(%ebp),%eax
c010cdb8:	8d 50 04             	lea    0x4(%eax),%edx
c010cdbb:	89 55 14             	mov    %edx,0x14(%ebp)
c010cdbe:	8b 00                	mov    (%eax),%eax
c010cdc0:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010cdc3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
            base = 16;
c010cdca:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
            goto number;
c010cdd1:	eb 1f                	jmp    c010cdf2 <vprintfmt+0x36a>

        // (unsigned) hexadecimal
        case 'x':
            num = getuint(&ap, lflag);
c010cdd3:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010cdd6:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cdda:	8d 45 14             	lea    0x14(%ebp),%eax
c010cddd:	89 04 24             	mov    %eax,(%esp)
c010cde0:	e8 df fb ff ff       	call   c010c9c4 <getuint>
c010cde5:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010cde8:	89 55 f4             	mov    %edx,-0xc(%ebp)
            base = 16;
c010cdeb:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
        number:
            printnum(putch, putdat, num, base, width, padc);
c010cdf2:	0f be 55 db          	movsbl -0x25(%ebp),%edx
c010cdf6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010cdf9:	89 54 24 18          	mov    %edx,0x18(%esp)
c010cdfd:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010ce00:	89 54 24 14          	mov    %edx,0x14(%esp)
c010ce04:	89 44 24 10          	mov    %eax,0x10(%esp)
c010ce08:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ce0b:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010ce0e:	89 44 24 08          	mov    %eax,0x8(%esp)
c010ce12:	89 54 24 0c          	mov    %edx,0xc(%esp)
c010ce16:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ce19:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ce1d:	8b 45 08             	mov    0x8(%ebp),%eax
c010ce20:	89 04 24             	mov    %eax,(%esp)
c010ce23:	e8 97 fa ff ff       	call   c010c8bf <printnum>
            break;
c010ce28:	eb 3c                	jmp    c010ce66 <vprintfmt+0x3de>

        // escaped '%' character
        case '%':
            putch(ch, putdat);
c010ce2a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ce2d:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ce31:	89 1c 24             	mov    %ebx,(%esp)
c010ce34:	8b 45 08             	mov    0x8(%ebp),%eax
c010ce37:	ff d0                	call   *%eax
            break;
c010ce39:	eb 2b                	jmp    c010ce66 <vprintfmt+0x3de>

        // unrecognized escape sequence - just print it literally
        default:
            putch('%', putdat);
c010ce3b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ce3e:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ce42:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
c010ce49:	8b 45 08             	mov    0x8(%ebp),%eax
c010ce4c:	ff d0                	call   *%eax
            for (fmt --; fmt[-1] != '%'; fmt --)
c010ce4e:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
c010ce52:	eb 04                	jmp    c010ce58 <vprintfmt+0x3d0>
c010ce54:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
c010ce58:	8b 45 10             	mov    0x10(%ebp),%eax
c010ce5b:	83 e8 01             	sub    $0x1,%eax
c010ce5e:	0f b6 00             	movzbl (%eax),%eax
c010ce61:	3c 25                	cmp    $0x25,%al
c010ce63:	75 ef                	jne    c010ce54 <vprintfmt+0x3cc>
                /* do nothing */;
            break;
c010ce65:	90                   	nop
        }
    }
c010ce66:	90                   	nop
    register int ch, err;
    unsigned long long num;
    int base, width, precision, lflag, altflag;

    while (1) {
        while ((ch = *(unsigned char *)fmt ++) != '%') {
c010ce67:	e9 3e fc ff ff       	jmp    c010caaa <vprintfmt+0x22>
            for (fmt --; fmt[-1] != '%'; fmt --)
                /* do nothing */;
            break;
        }
    }
}
c010ce6c:	83 c4 40             	add    $0x40,%esp
c010ce6f:	5b                   	pop    %ebx
c010ce70:	5e                   	pop    %esi
c010ce71:	5d                   	pop    %ebp
c010ce72:	c3                   	ret    

c010ce73 <sprintputch>:
 * sprintputch - 'print' a single character in a buffer
 * @ch:         the character will be printed
 * @b:          the buffer to place the character @ch
 * */
static void
sprintputch(int ch, struct sprintbuf *b) {
c010ce73:	55                   	push   %ebp
c010ce74:	89 e5                	mov    %esp,%ebp
    b->cnt ++;
c010ce76:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ce79:	8b 40 08             	mov    0x8(%eax),%eax
c010ce7c:	8d 50 01             	lea    0x1(%eax),%edx
c010ce7f:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ce82:	89 50 08             	mov    %edx,0x8(%eax)
    if (b->buf < b->ebuf) {
c010ce85:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ce88:	8b 10                	mov    (%eax),%edx
c010ce8a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ce8d:	8b 40 04             	mov    0x4(%eax),%eax
c010ce90:	39 c2                	cmp    %eax,%edx
c010ce92:	73 12                	jae    c010cea6 <sprintputch+0x33>
        *b->buf ++ = ch;
c010ce94:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ce97:	8b 00                	mov    (%eax),%eax
c010ce99:	8d 48 01             	lea    0x1(%eax),%ecx
c010ce9c:	8b 55 0c             	mov    0xc(%ebp),%edx
c010ce9f:	89 0a                	mov    %ecx,(%edx)
c010cea1:	8b 55 08             	mov    0x8(%ebp),%edx
c010cea4:	88 10                	mov    %dl,(%eax)
    }
}
c010cea6:	5d                   	pop    %ebp
c010cea7:	c3                   	ret    

c010cea8 <snprintf>:
 * @str:        the buffer to place the result into
 * @size:       the size of buffer, including the trailing null space
 * @fmt:        the format string to use
 * */
int
snprintf(char *str, size_t size, const char *fmt, ...) {
c010cea8:	55                   	push   %ebp
c010cea9:	89 e5                	mov    %esp,%ebp
c010ceab:	83 ec 28             	sub    $0x28,%esp
    va_list ap;
    int cnt;
    va_start(ap, fmt);
c010ceae:	8d 45 14             	lea    0x14(%ebp),%eax
c010ceb1:	89 45 f0             	mov    %eax,-0x10(%ebp)
    cnt = vsnprintf(str, size, fmt, ap);
c010ceb4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ceb7:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010cebb:	8b 45 10             	mov    0x10(%ebp),%eax
c010cebe:	89 44 24 08          	mov    %eax,0x8(%esp)
c010cec2:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cec5:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cec9:	8b 45 08             	mov    0x8(%ebp),%eax
c010cecc:	89 04 24             	mov    %eax,(%esp)
c010cecf:	e8 08 00 00 00       	call   c010cedc <vsnprintf>
c010ced4:	89 45 f4             	mov    %eax,-0xc(%ebp)
    va_end(ap);
    return cnt;
c010ced7:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010ceda:	c9                   	leave  
c010cedb:	c3                   	ret    

c010cedc <vsnprintf>:
 *
 * Call this function if you are already dealing with a va_list.
 * Or you probably want snprintf() instead.
 * */
int
vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
c010cedc:	55                   	push   %ebp
c010cedd:	89 e5                	mov    %esp,%ebp
c010cedf:	83 ec 28             	sub    $0x28,%esp
    struct sprintbuf b = {str, str + size - 1, 0};
c010cee2:	8b 45 08             	mov    0x8(%ebp),%eax
c010cee5:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010cee8:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ceeb:	8d 50 ff             	lea    -0x1(%eax),%edx
c010ceee:	8b 45 08             	mov    0x8(%ebp),%eax
c010cef1:	01 d0                	add    %edx,%eax
c010cef3:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010cef6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    if (str == NULL || b.buf > b.ebuf) {
c010cefd:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010cf01:	74 0a                	je     c010cf0d <vsnprintf+0x31>
c010cf03:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010cf06:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cf09:	39 c2                	cmp    %eax,%edx
c010cf0b:	76 07                	jbe    c010cf14 <vsnprintf+0x38>
        return -E_INVAL;
c010cf0d:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010cf12:	eb 2a                	jmp    c010cf3e <vsnprintf+0x62>
    }
    // print the string to the buffer
    vprintfmt((void*)sprintputch, &b, fmt, ap);
c010cf14:	8b 45 14             	mov    0x14(%ebp),%eax
c010cf17:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010cf1b:	8b 45 10             	mov    0x10(%ebp),%eax
c010cf1e:	89 44 24 08          	mov    %eax,0x8(%esp)
c010cf22:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010cf25:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cf29:	c7 04 24 73 ce 10 c0 	movl   $0xc010ce73,(%esp)
c010cf30:	e8 53 fb ff ff       	call   c010ca88 <vprintfmt>
    // null terminate the buffer
    *b.buf = '\0';
c010cf35:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010cf38:	c6 00 00             	movb   $0x0,(%eax)
    return b.cnt;
c010cf3b:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010cf3e:	c9                   	leave  
c010cf3f:	c3                   	ret    

c010cf40 <rand>:
 * rand - returns a pseudo-random integer
 *
 * The rand() function return a value in the range [0, RAND_MAX].
 * */
int
rand(void) {
c010cf40:	55                   	push   %ebp
c010cf41:	89 e5                	mov    %esp,%ebp
c010cf43:	57                   	push   %edi
c010cf44:	56                   	push   %esi
c010cf45:	53                   	push   %ebx
c010cf46:	83 ec 24             	sub    $0x24,%esp
    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
c010cf49:	a1 20 eb 12 c0       	mov    0xc012eb20,%eax
c010cf4e:	8b 15 24 eb 12 c0    	mov    0xc012eb24,%edx
c010cf54:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
c010cf5a:	6b f0 05             	imul   $0x5,%eax,%esi
c010cf5d:	01 f7                	add    %esi,%edi
c010cf5f:	be 6d e6 ec de       	mov    $0xdeece66d,%esi
c010cf64:	f7 e6                	mul    %esi
c010cf66:	8d 34 17             	lea    (%edi,%edx,1),%esi
c010cf69:	89 f2                	mov    %esi,%edx
c010cf6b:	83 c0 0b             	add    $0xb,%eax
c010cf6e:	83 d2 00             	adc    $0x0,%edx
c010cf71:	89 c7                	mov    %eax,%edi
c010cf73:	83 e7 ff             	and    $0xffffffff,%edi
c010cf76:	89 f9                	mov    %edi,%ecx
c010cf78:	0f b7 da             	movzwl %dx,%ebx
c010cf7b:	89 0d 20 eb 12 c0    	mov    %ecx,0xc012eb20
c010cf81:	89 1d 24 eb 12 c0    	mov    %ebx,0xc012eb24
    unsigned long long result = (next >> 12);
c010cf87:	a1 20 eb 12 c0       	mov    0xc012eb20,%eax
c010cf8c:	8b 15 24 eb 12 c0    	mov    0xc012eb24,%edx
c010cf92:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
c010cf96:	c1 ea 0c             	shr    $0xc,%edx
c010cf99:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010cf9c:	89 55 e4             	mov    %edx,-0x1c(%ebp)
    return (int)do_div(result, RAND_MAX + 1);
c010cf9f:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
c010cfa6:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010cfa9:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010cfac:	89 45 d8             	mov    %eax,-0x28(%ebp)
c010cfaf:	89 55 e8             	mov    %edx,-0x18(%ebp)
c010cfb2:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010cfb5:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010cfb8:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010cfbc:	74 1c                	je     c010cfda <rand+0x9a>
c010cfbe:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010cfc1:	ba 00 00 00 00       	mov    $0x0,%edx
c010cfc6:	f7 75 dc             	divl   -0x24(%ebp)
c010cfc9:	89 55 ec             	mov    %edx,-0x14(%ebp)
c010cfcc:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010cfcf:	ba 00 00 00 00       	mov    $0x0,%edx
c010cfd4:	f7 75 dc             	divl   -0x24(%ebp)
c010cfd7:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010cfda:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010cfdd:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010cfe0:	f7 75 dc             	divl   -0x24(%ebp)
c010cfe3:	89 45 d8             	mov    %eax,-0x28(%ebp)
c010cfe6:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c010cfe9:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010cfec:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010cfef:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010cff2:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c010cff5:	8b 45 d4             	mov    -0x2c(%ebp),%eax
}
c010cff8:	83 c4 24             	add    $0x24,%esp
c010cffb:	5b                   	pop    %ebx
c010cffc:	5e                   	pop    %esi
c010cffd:	5f                   	pop    %edi
c010cffe:	5d                   	pop    %ebp
c010cfff:	c3                   	ret    

c010d000 <srand>:
/* *
 * srand - seed the random number generator with the given number
 * @seed:   the required seed number
 * */
void
srand(unsigned int seed) {
c010d000:	55                   	push   %ebp
c010d001:	89 e5                	mov    %esp,%ebp
    next = seed;
c010d003:	8b 45 08             	mov    0x8(%ebp),%eax
c010d006:	ba 00 00 00 00       	mov    $0x0,%edx
c010d00b:	a3 20 eb 12 c0       	mov    %eax,0xc012eb20
c010d010:	89 15 24 eb 12 c0    	mov    %edx,0xc012eb24
}
c010d016:	5d                   	pop    %ebp
c010d017:	c3                   	ret    

c010d018 <strlen>:
 * @s:      the input string
 *
 * The strlen() function returns the length of string @s.
 * */
size_t
strlen(const char *s) {
c010d018:	55                   	push   %ebp
c010d019:	89 e5                	mov    %esp,%ebp
c010d01b:	83 ec 10             	sub    $0x10,%esp
    size_t cnt = 0;
c010d01e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    while (*s ++ != '\0') {
c010d025:	eb 04                	jmp    c010d02b <strlen+0x13>
        cnt ++;
c010d027:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
 * The strlen() function returns the length of string @s.
 * */
size_t
strlen(const char *s) {
    size_t cnt = 0;
    while (*s ++ != '\0') {
c010d02b:	8b 45 08             	mov    0x8(%ebp),%eax
c010d02e:	8d 50 01             	lea    0x1(%eax),%edx
c010d031:	89 55 08             	mov    %edx,0x8(%ebp)
c010d034:	0f b6 00             	movzbl (%eax),%eax
c010d037:	84 c0                	test   %al,%al
c010d039:	75 ec                	jne    c010d027 <strlen+0xf>
        cnt ++;
    }
    return cnt;
c010d03b:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c010d03e:	c9                   	leave  
c010d03f:	c3                   	ret    

c010d040 <strnlen>:
 * The return value is strlen(s), if that is less than @len, or
 * @len if there is no '\0' character among the first @len characters
 * pointed by @s.
 * */
size_t
strnlen(const char *s, size_t len) {
c010d040:	55                   	push   %ebp
c010d041:	89 e5                	mov    %esp,%ebp
c010d043:	83 ec 10             	sub    $0x10,%esp
    size_t cnt = 0;
c010d046:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    while (cnt < len && *s ++ != '\0') {
c010d04d:	eb 04                	jmp    c010d053 <strnlen+0x13>
        cnt ++;
c010d04f:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
 * pointed by @s.
 * */
size_t
strnlen(const char *s, size_t len) {
    size_t cnt = 0;
    while (cnt < len && *s ++ != '\0') {
c010d053:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010d056:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010d059:	73 10                	jae    c010d06b <strnlen+0x2b>
c010d05b:	8b 45 08             	mov    0x8(%ebp),%eax
c010d05e:	8d 50 01             	lea    0x1(%eax),%edx
c010d061:	89 55 08             	mov    %edx,0x8(%ebp)
c010d064:	0f b6 00             	movzbl (%eax),%eax
c010d067:	84 c0                	test   %al,%al
c010d069:	75 e4                	jne    c010d04f <strnlen+0xf>
        cnt ++;
    }
    return cnt;
c010d06b:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c010d06e:	c9                   	leave  
c010d06f:	c3                   	ret    

c010d070 <strcpy>:
 * To avoid overflows, the size of array pointed by @dst should be long enough to
 * contain the same string as @src (including the terminating null character), and
 * should not overlap in memory with @src.
 * */
char *
strcpy(char *dst, const char *src) {
c010d070:	55                   	push   %ebp
c010d071:	89 e5                	mov    %esp,%ebp
c010d073:	57                   	push   %edi
c010d074:	56                   	push   %esi
c010d075:	83 ec 20             	sub    $0x20,%esp
c010d078:	8b 45 08             	mov    0x8(%ebp),%eax
c010d07b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010d07e:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d081:	89 45 f0             	mov    %eax,-0x10(%ebp)
#ifndef __HAVE_ARCH_STRCPY
#define __HAVE_ARCH_STRCPY
static inline char *
__strcpy(char *dst, const char *src) {
    int d0, d1, d2;
    asm volatile (
c010d084:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010d087:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d08a:	89 d1                	mov    %edx,%ecx
c010d08c:	89 c2                	mov    %eax,%edx
c010d08e:	89 ce                	mov    %ecx,%esi
c010d090:	89 d7                	mov    %edx,%edi
c010d092:	ac                   	lods   %ds:(%esi),%al
c010d093:	aa                   	stos   %al,%es:(%edi)
c010d094:	84 c0                	test   %al,%al
c010d096:	75 fa                	jne    c010d092 <strcpy+0x22>
c010d098:	89 fa                	mov    %edi,%edx
c010d09a:	89 f1                	mov    %esi,%ecx
c010d09c:	89 4d ec             	mov    %ecx,-0x14(%ebp)
c010d09f:	89 55 e8             	mov    %edx,-0x18(%ebp)
c010d0a2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        "stosb;"
        "testb %%al, %%al;"
        "jne 1b;"
        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
        : "0" (src), "1" (dst) : "memory");
    return dst;
c010d0a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
    char *p = dst;
    while ((*p ++ = *src ++) != '\0')
        /* nothing */;
    return dst;
#endif /* __HAVE_ARCH_STRCPY */
}
c010d0a8:	83 c4 20             	add    $0x20,%esp
c010d0ab:	5e                   	pop    %esi
c010d0ac:	5f                   	pop    %edi
c010d0ad:	5d                   	pop    %ebp
c010d0ae:	c3                   	ret    

c010d0af <strncpy>:
 * @len:    maximum number of characters to be copied from @src
 *
 * The return value is @dst
 * */
char *
strncpy(char *dst, const char *src, size_t len) {
c010d0af:	55                   	push   %ebp
c010d0b0:	89 e5                	mov    %esp,%ebp
c010d0b2:	83 ec 10             	sub    $0x10,%esp
    char *p = dst;
c010d0b5:	8b 45 08             	mov    0x8(%ebp),%eax
c010d0b8:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while (len > 0) {
c010d0bb:	eb 21                	jmp    c010d0de <strncpy+0x2f>
        if ((*p = *src) != '\0') {
c010d0bd:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d0c0:	0f b6 10             	movzbl (%eax),%edx
c010d0c3:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010d0c6:	88 10                	mov    %dl,(%eax)
c010d0c8:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010d0cb:	0f b6 00             	movzbl (%eax),%eax
c010d0ce:	84 c0                	test   %al,%al
c010d0d0:	74 04                	je     c010d0d6 <strncpy+0x27>
            src ++;
c010d0d2:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
        }
        p ++, len --;
c010d0d6:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c010d0da:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
 * The return value is @dst
 * */
char *
strncpy(char *dst, const char *src, size_t len) {
    char *p = dst;
    while (len > 0) {
c010d0de:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010d0e2:	75 d9                	jne    c010d0bd <strncpy+0xe>
        if ((*p = *src) != '\0') {
            src ++;
        }
        p ++, len --;
    }
    return dst;
c010d0e4:	8b 45 08             	mov    0x8(%ebp),%eax
}
c010d0e7:	c9                   	leave  
c010d0e8:	c3                   	ret    

c010d0e9 <strcmp>:
 * - A value greater than zero indicates that the first character that does
 *   not match has a greater value in @s1 than in @s2;
 * - And a value less than zero indicates the opposite.
 * */
int
strcmp(const char *s1, const char *s2) {
c010d0e9:	55                   	push   %ebp
c010d0ea:	89 e5                	mov    %esp,%ebp
c010d0ec:	57                   	push   %edi
c010d0ed:	56                   	push   %esi
c010d0ee:	83 ec 20             	sub    $0x20,%esp
c010d0f1:	8b 45 08             	mov    0x8(%ebp),%eax
c010d0f4:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010d0f7:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d0fa:	89 45 f0             	mov    %eax,-0x10(%ebp)
#ifndef __HAVE_ARCH_STRCMP
#define __HAVE_ARCH_STRCMP
static inline int
__strcmp(const char *s1, const char *s2) {
    int d0, d1, ret;
    asm volatile (
c010d0fd:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010d100:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d103:	89 d1                	mov    %edx,%ecx
c010d105:	89 c2                	mov    %eax,%edx
c010d107:	89 ce                	mov    %ecx,%esi
c010d109:	89 d7                	mov    %edx,%edi
c010d10b:	ac                   	lods   %ds:(%esi),%al
c010d10c:	ae                   	scas   %es:(%edi),%al
c010d10d:	75 08                	jne    c010d117 <strcmp+0x2e>
c010d10f:	84 c0                	test   %al,%al
c010d111:	75 f8                	jne    c010d10b <strcmp+0x22>
c010d113:	31 c0                	xor    %eax,%eax
c010d115:	eb 04                	jmp    c010d11b <strcmp+0x32>
c010d117:	19 c0                	sbb    %eax,%eax
c010d119:	0c 01                	or     $0x1,%al
c010d11b:	89 fa                	mov    %edi,%edx
c010d11d:	89 f1                	mov    %esi,%ecx
c010d11f:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010d122:	89 4d e8             	mov    %ecx,-0x18(%ebp)
c010d125:	89 55 e4             	mov    %edx,-0x1c(%ebp)
        "orb $1, %%al;"
        "3:"
        : "=a" (ret), "=&S" (d0), "=&D" (d1)
        : "1" (s1), "2" (s2)
        : "memory");
    return ret;
c010d128:	8b 45 ec             	mov    -0x14(%ebp),%eax
    while (*s1 != '\0' && *s1 == *s2) {
        s1 ++, s2 ++;
    }
    return (int)((unsigned char)*s1 - (unsigned char)*s2);
#endif /* __HAVE_ARCH_STRCMP */
}
c010d12b:	83 c4 20             	add    $0x20,%esp
c010d12e:	5e                   	pop    %esi
c010d12f:	5f                   	pop    %edi
c010d130:	5d                   	pop    %ebp
c010d131:	c3                   	ret    

c010d132 <strncmp>:
 * they are equal to each other, it continues with the following pairs until
 * the characters differ, until a terminating null-character is reached, or
 * until @n characters match in both strings, whichever happens first.
 * */
int
strncmp(const char *s1, const char *s2, size_t n) {
c010d132:	55                   	push   %ebp
c010d133:	89 e5                	mov    %esp,%ebp
    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
c010d135:	eb 0c                	jmp    c010d143 <strncmp+0x11>
        n --, s1 ++, s2 ++;
c010d137:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
c010d13b:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010d13f:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
 * the characters differ, until a terminating null-character is reached, or
 * until @n characters match in both strings, whichever happens first.
 * */
int
strncmp(const char *s1, const char *s2, size_t n) {
    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
c010d143:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010d147:	74 1a                	je     c010d163 <strncmp+0x31>
c010d149:	8b 45 08             	mov    0x8(%ebp),%eax
c010d14c:	0f b6 00             	movzbl (%eax),%eax
c010d14f:	84 c0                	test   %al,%al
c010d151:	74 10                	je     c010d163 <strncmp+0x31>
c010d153:	8b 45 08             	mov    0x8(%ebp),%eax
c010d156:	0f b6 10             	movzbl (%eax),%edx
c010d159:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d15c:	0f b6 00             	movzbl (%eax),%eax
c010d15f:	38 c2                	cmp    %al,%dl
c010d161:	74 d4                	je     c010d137 <strncmp+0x5>
        n --, s1 ++, s2 ++;
    }
    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
c010d163:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010d167:	74 18                	je     c010d181 <strncmp+0x4f>
c010d169:	8b 45 08             	mov    0x8(%ebp),%eax
c010d16c:	0f b6 00             	movzbl (%eax),%eax
c010d16f:	0f b6 d0             	movzbl %al,%edx
c010d172:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d175:	0f b6 00             	movzbl (%eax),%eax
c010d178:	0f b6 c0             	movzbl %al,%eax
c010d17b:	29 c2                	sub    %eax,%edx
c010d17d:	89 d0                	mov    %edx,%eax
c010d17f:	eb 05                	jmp    c010d186 <strncmp+0x54>
c010d181:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010d186:	5d                   	pop    %ebp
c010d187:	c3                   	ret    

c010d188 <strchr>:
 *
 * The strchr() function returns a pointer to the first occurrence of
 * character in @s. If the value is not found, the function returns 'NULL'.
 * */
char *
strchr(const char *s, char c) {
c010d188:	55                   	push   %ebp
c010d189:	89 e5                	mov    %esp,%ebp
c010d18b:	83 ec 04             	sub    $0x4,%esp
c010d18e:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d191:	88 45 fc             	mov    %al,-0x4(%ebp)
    while (*s != '\0') {
c010d194:	eb 14                	jmp    c010d1aa <strchr+0x22>
        if (*s == c) {
c010d196:	8b 45 08             	mov    0x8(%ebp),%eax
c010d199:	0f b6 00             	movzbl (%eax),%eax
c010d19c:	3a 45 fc             	cmp    -0x4(%ebp),%al
c010d19f:	75 05                	jne    c010d1a6 <strchr+0x1e>
            return (char *)s;
c010d1a1:	8b 45 08             	mov    0x8(%ebp),%eax
c010d1a4:	eb 13                	jmp    c010d1b9 <strchr+0x31>
        }
        s ++;
c010d1a6:	83 45 08 01          	addl   $0x1,0x8(%ebp)
 * The strchr() function returns a pointer to the first occurrence of
 * character in @s. If the value is not found, the function returns 'NULL'.
 * */
char *
strchr(const char *s, char c) {
    while (*s != '\0') {
c010d1aa:	8b 45 08             	mov    0x8(%ebp),%eax
c010d1ad:	0f b6 00             	movzbl (%eax),%eax
c010d1b0:	84 c0                	test   %al,%al
c010d1b2:	75 e2                	jne    c010d196 <strchr+0xe>
        if (*s == c) {
            return (char *)s;
        }
        s ++;
    }
    return NULL;
c010d1b4:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010d1b9:	c9                   	leave  
c010d1ba:	c3                   	ret    

c010d1bb <strfind>:
 * The strfind() function is like strchr() except that if @c is
 * not found in @s, then it returns a pointer to the null byte at the
 * end of @s, rather than 'NULL'.
 * */
char *
strfind(const char *s, char c) {
c010d1bb:	55                   	push   %ebp
c010d1bc:	89 e5                	mov    %esp,%ebp
c010d1be:	83 ec 04             	sub    $0x4,%esp
c010d1c1:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d1c4:	88 45 fc             	mov    %al,-0x4(%ebp)
    while (*s != '\0') {
c010d1c7:	eb 11                	jmp    c010d1da <strfind+0x1f>
        if (*s == c) {
c010d1c9:	8b 45 08             	mov    0x8(%ebp),%eax
c010d1cc:	0f b6 00             	movzbl (%eax),%eax
c010d1cf:	3a 45 fc             	cmp    -0x4(%ebp),%al
c010d1d2:	75 02                	jne    c010d1d6 <strfind+0x1b>
            break;
c010d1d4:	eb 0e                	jmp    c010d1e4 <strfind+0x29>
        }
        s ++;
c010d1d6:	83 45 08 01          	addl   $0x1,0x8(%ebp)
 * not found in @s, then it returns a pointer to the null byte at the
 * end of @s, rather than 'NULL'.
 * */
char *
strfind(const char *s, char c) {
    while (*s != '\0') {
c010d1da:	8b 45 08             	mov    0x8(%ebp),%eax
c010d1dd:	0f b6 00             	movzbl (%eax),%eax
c010d1e0:	84 c0                	test   %al,%al
c010d1e2:	75 e5                	jne    c010d1c9 <strfind+0xe>
        if (*s == c) {
            break;
        }
        s ++;
    }
    return (char *)s;
c010d1e4:	8b 45 08             	mov    0x8(%ebp),%eax
}
c010d1e7:	c9                   	leave  
c010d1e8:	c3                   	ret    

c010d1e9 <strtol>:
 * an optional "0x" or "0X" prefix.
 *
 * The strtol() function returns the converted integral number as a long int value.
 * */
long
strtol(const char *s, char **endptr, int base) {
c010d1e9:	55                   	push   %ebp
c010d1ea:	89 e5                	mov    %esp,%ebp
c010d1ec:	83 ec 10             	sub    $0x10,%esp
    int neg = 0;
c010d1ef:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    long val = 0;
c010d1f6:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

    // gobble initial whitespace
    while (*s == ' ' || *s == '\t') {
c010d1fd:	eb 04                	jmp    c010d203 <strtol+0x1a>
        s ++;
c010d1ff:	83 45 08 01          	addl   $0x1,0x8(%ebp)
strtol(const char *s, char **endptr, int base) {
    int neg = 0;
    long val = 0;

    // gobble initial whitespace
    while (*s == ' ' || *s == '\t') {
c010d203:	8b 45 08             	mov    0x8(%ebp),%eax
c010d206:	0f b6 00             	movzbl (%eax),%eax
c010d209:	3c 20                	cmp    $0x20,%al
c010d20b:	74 f2                	je     c010d1ff <strtol+0x16>
c010d20d:	8b 45 08             	mov    0x8(%ebp),%eax
c010d210:	0f b6 00             	movzbl (%eax),%eax
c010d213:	3c 09                	cmp    $0x9,%al
c010d215:	74 e8                	je     c010d1ff <strtol+0x16>
        s ++;
    }

    // plus/minus sign
    if (*s == '+') {
c010d217:	8b 45 08             	mov    0x8(%ebp),%eax
c010d21a:	0f b6 00             	movzbl (%eax),%eax
c010d21d:	3c 2b                	cmp    $0x2b,%al
c010d21f:	75 06                	jne    c010d227 <strtol+0x3e>
        s ++;
c010d221:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010d225:	eb 15                	jmp    c010d23c <strtol+0x53>
    }
    else if (*s == '-') {
c010d227:	8b 45 08             	mov    0x8(%ebp),%eax
c010d22a:	0f b6 00             	movzbl (%eax),%eax
c010d22d:	3c 2d                	cmp    $0x2d,%al
c010d22f:	75 0b                	jne    c010d23c <strtol+0x53>
        s ++, neg = 1;
c010d231:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010d235:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
    }

    // hex or octal base prefix
    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
c010d23c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010d240:	74 06                	je     c010d248 <strtol+0x5f>
c010d242:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
c010d246:	75 24                	jne    c010d26c <strtol+0x83>
c010d248:	8b 45 08             	mov    0x8(%ebp),%eax
c010d24b:	0f b6 00             	movzbl (%eax),%eax
c010d24e:	3c 30                	cmp    $0x30,%al
c010d250:	75 1a                	jne    c010d26c <strtol+0x83>
c010d252:	8b 45 08             	mov    0x8(%ebp),%eax
c010d255:	83 c0 01             	add    $0x1,%eax
c010d258:	0f b6 00             	movzbl (%eax),%eax
c010d25b:	3c 78                	cmp    $0x78,%al
c010d25d:	75 0d                	jne    c010d26c <strtol+0x83>
        s += 2, base = 16;
c010d25f:	83 45 08 02          	addl   $0x2,0x8(%ebp)
c010d263:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
c010d26a:	eb 2a                	jmp    c010d296 <strtol+0xad>
    }
    else if (base == 0 && s[0] == '0') {
c010d26c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010d270:	75 17                	jne    c010d289 <strtol+0xa0>
c010d272:	8b 45 08             	mov    0x8(%ebp),%eax
c010d275:	0f b6 00             	movzbl (%eax),%eax
c010d278:	3c 30                	cmp    $0x30,%al
c010d27a:	75 0d                	jne    c010d289 <strtol+0xa0>
        s ++, base = 8;
c010d27c:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010d280:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
c010d287:	eb 0d                	jmp    c010d296 <strtol+0xad>
    }
    else if (base == 0) {
c010d289:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010d28d:	75 07                	jne    c010d296 <strtol+0xad>
        base = 10;
c010d28f:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)

    // digits
    while (1) {
        int dig;

        if (*s >= '0' && *s <= '9') {
c010d296:	8b 45 08             	mov    0x8(%ebp),%eax
c010d299:	0f b6 00             	movzbl (%eax),%eax
c010d29c:	3c 2f                	cmp    $0x2f,%al
c010d29e:	7e 1b                	jle    c010d2bb <strtol+0xd2>
c010d2a0:	8b 45 08             	mov    0x8(%ebp),%eax
c010d2a3:	0f b6 00             	movzbl (%eax),%eax
c010d2a6:	3c 39                	cmp    $0x39,%al
c010d2a8:	7f 11                	jg     c010d2bb <strtol+0xd2>
            dig = *s - '0';
c010d2aa:	8b 45 08             	mov    0x8(%ebp),%eax
c010d2ad:	0f b6 00             	movzbl (%eax),%eax
c010d2b0:	0f be c0             	movsbl %al,%eax
c010d2b3:	83 e8 30             	sub    $0x30,%eax
c010d2b6:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010d2b9:	eb 48                	jmp    c010d303 <strtol+0x11a>
        }
        else if (*s >= 'a' && *s <= 'z') {
c010d2bb:	8b 45 08             	mov    0x8(%ebp),%eax
c010d2be:	0f b6 00             	movzbl (%eax),%eax
c010d2c1:	3c 60                	cmp    $0x60,%al
c010d2c3:	7e 1b                	jle    c010d2e0 <strtol+0xf7>
c010d2c5:	8b 45 08             	mov    0x8(%ebp),%eax
c010d2c8:	0f b6 00             	movzbl (%eax),%eax
c010d2cb:	3c 7a                	cmp    $0x7a,%al
c010d2cd:	7f 11                	jg     c010d2e0 <strtol+0xf7>
            dig = *s - 'a' + 10;
c010d2cf:	8b 45 08             	mov    0x8(%ebp),%eax
c010d2d2:	0f b6 00             	movzbl (%eax),%eax
c010d2d5:	0f be c0             	movsbl %al,%eax
c010d2d8:	83 e8 57             	sub    $0x57,%eax
c010d2db:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010d2de:	eb 23                	jmp    c010d303 <strtol+0x11a>
        }
        else if (*s >= 'A' && *s <= 'Z') {
c010d2e0:	8b 45 08             	mov    0x8(%ebp),%eax
c010d2e3:	0f b6 00             	movzbl (%eax),%eax
c010d2e6:	3c 40                	cmp    $0x40,%al
c010d2e8:	7e 3d                	jle    c010d327 <strtol+0x13e>
c010d2ea:	8b 45 08             	mov    0x8(%ebp),%eax
c010d2ed:	0f b6 00             	movzbl (%eax),%eax
c010d2f0:	3c 5a                	cmp    $0x5a,%al
c010d2f2:	7f 33                	jg     c010d327 <strtol+0x13e>
            dig = *s - 'A' + 10;
c010d2f4:	8b 45 08             	mov    0x8(%ebp),%eax
c010d2f7:	0f b6 00             	movzbl (%eax),%eax
c010d2fa:	0f be c0             	movsbl %al,%eax
c010d2fd:	83 e8 37             	sub    $0x37,%eax
c010d300:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }
        else {
            break;
        }
        if (dig >= base) {
c010d303:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d306:	3b 45 10             	cmp    0x10(%ebp),%eax
c010d309:	7c 02                	jl     c010d30d <strtol+0x124>
            break;
c010d30b:	eb 1a                	jmp    c010d327 <strtol+0x13e>
        }
        s ++, val = (val * base) + dig;
c010d30d:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010d311:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010d314:	0f af 45 10          	imul   0x10(%ebp),%eax
c010d318:	89 c2                	mov    %eax,%edx
c010d31a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d31d:	01 d0                	add    %edx,%eax
c010d31f:	89 45 f8             	mov    %eax,-0x8(%ebp)
        // we don't properly detect overflow!
    }
c010d322:	e9 6f ff ff ff       	jmp    c010d296 <strtol+0xad>

    if (endptr) {
c010d327:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010d32b:	74 08                	je     c010d335 <strtol+0x14c>
        *endptr = (char *) s;
c010d32d:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d330:	8b 55 08             	mov    0x8(%ebp),%edx
c010d333:	89 10                	mov    %edx,(%eax)
    }
    return (neg ? -val : val);
c010d335:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c010d339:	74 07                	je     c010d342 <strtol+0x159>
c010d33b:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010d33e:	f7 d8                	neg    %eax
c010d340:	eb 03                	jmp    c010d345 <strtol+0x15c>
c010d342:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
c010d345:	c9                   	leave  
c010d346:	c3                   	ret    

c010d347 <memset>:
 * @n:      number of bytes to be set to the value
 *
 * The memset() function returns @s.
 * */
void *
memset(void *s, char c, size_t n) {
c010d347:	55                   	push   %ebp
c010d348:	89 e5                	mov    %esp,%ebp
c010d34a:	57                   	push   %edi
c010d34b:	83 ec 24             	sub    $0x24,%esp
c010d34e:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d351:	88 45 d8             	mov    %al,-0x28(%ebp)
#ifdef __HAVE_ARCH_MEMSET
    return __memset(s, c, n);
c010d354:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
c010d358:	8b 55 08             	mov    0x8(%ebp),%edx
c010d35b:	89 55 f8             	mov    %edx,-0x8(%ebp)
c010d35e:	88 45 f7             	mov    %al,-0x9(%ebp)
c010d361:	8b 45 10             	mov    0x10(%ebp),%eax
c010d364:	89 45 f0             	mov    %eax,-0x10(%ebp)
#ifndef __HAVE_ARCH_MEMSET
#define __HAVE_ARCH_MEMSET
static inline void *
__memset(void *s, char c, size_t n) {
    int d0, d1;
    asm volatile (
c010d367:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c010d36a:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c010d36e:	8b 55 f8             	mov    -0x8(%ebp),%edx
c010d371:	89 d7                	mov    %edx,%edi
c010d373:	f3 aa                	rep stos %al,%es:(%edi)
c010d375:	89 fa                	mov    %edi,%edx
c010d377:	89 4d ec             	mov    %ecx,-0x14(%ebp)
c010d37a:	89 55 e8             	mov    %edx,-0x18(%ebp)
        "rep; stosb;"
        : "=&c" (d0), "=&D" (d1)
        : "0" (n), "a" (c), "1" (s)
        : "memory");
    return s;
c010d37d:	8b 45 f8             	mov    -0x8(%ebp),%eax
    while (n -- > 0) {
        *p ++ = c;
    }
    return s;
#endif /* __HAVE_ARCH_MEMSET */
}
c010d380:	83 c4 24             	add    $0x24,%esp
c010d383:	5f                   	pop    %edi
c010d384:	5d                   	pop    %ebp
c010d385:	c3                   	ret    

c010d386 <memmove>:
 * @n:      number of bytes to copy
 *
 * The memmove() function returns @dst.
 * */
void *
memmove(void *dst, const void *src, size_t n) {
c010d386:	55                   	push   %ebp
c010d387:	89 e5                	mov    %esp,%ebp
c010d389:	57                   	push   %edi
c010d38a:	56                   	push   %esi
c010d38b:	53                   	push   %ebx
c010d38c:	83 ec 30             	sub    $0x30,%esp
c010d38f:	8b 45 08             	mov    0x8(%ebp),%eax
c010d392:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010d395:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d398:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010d39b:	8b 45 10             	mov    0x10(%ebp),%eax
c010d39e:	89 45 e8             	mov    %eax,-0x18(%ebp)

#ifndef __HAVE_ARCH_MEMMOVE
#define __HAVE_ARCH_MEMMOVE
static inline void *
__memmove(void *dst, const void *src, size_t n) {
    if (dst < src) {
c010d3a1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d3a4:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c010d3a7:	73 42                	jae    c010d3eb <memmove+0x65>
c010d3a9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d3ac:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010d3af:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d3b2:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010d3b5:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d3b8:	89 45 dc             	mov    %eax,-0x24(%ebp)
        "andl $3, %%ecx;"
        "jz 1f;"
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
c010d3bb:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010d3be:	c1 e8 02             	shr    $0x2,%eax
c010d3c1:	89 c1                	mov    %eax,%ecx
#ifndef __HAVE_ARCH_MEMCPY
#define __HAVE_ARCH_MEMCPY
static inline void *
__memcpy(void *dst, const void *src, size_t n) {
    int d0, d1, d2;
    asm volatile (
c010d3c3:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010d3c6:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010d3c9:	89 d7                	mov    %edx,%edi
c010d3cb:	89 c6                	mov    %eax,%esi
c010d3cd:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
c010d3cf:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c010d3d2:	83 e1 03             	and    $0x3,%ecx
c010d3d5:	74 02                	je     c010d3d9 <memmove+0x53>
c010d3d7:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
c010d3d9:	89 f0                	mov    %esi,%eax
c010d3db:	89 fa                	mov    %edi,%edx
c010d3dd:	89 4d d8             	mov    %ecx,-0x28(%ebp)
c010d3e0:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c010d3e3:	89 45 d0             	mov    %eax,-0x30(%ebp)
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
        : "memory");
    return dst;
c010d3e6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010d3e9:	eb 36                	jmp    c010d421 <memmove+0x9b>
    asm volatile (
        "std;"
        "rep; movsb;"
        "cld;"
        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
c010d3eb:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d3ee:	8d 50 ff             	lea    -0x1(%eax),%edx
c010d3f1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d3f4:	01 c2                	add    %eax,%edx
c010d3f6:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d3f9:	8d 48 ff             	lea    -0x1(%eax),%ecx
c010d3fc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d3ff:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
__memmove(void *dst, const void *src, size_t n) {
    if (dst < src) {
        return __memcpy(dst, src, n);
    }
    int d0, d1, d2;
    asm volatile (
c010d402:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d405:	89 c1                	mov    %eax,%ecx
c010d407:	89 d8                	mov    %ebx,%eax
c010d409:	89 d6                	mov    %edx,%esi
c010d40b:	89 c7                	mov    %eax,%edi
c010d40d:	fd                   	std    
c010d40e:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
c010d410:	fc                   	cld    
c010d411:	89 f8                	mov    %edi,%eax
c010d413:	89 f2                	mov    %esi,%edx
c010d415:	89 4d cc             	mov    %ecx,-0x34(%ebp)
c010d418:	89 55 c8             	mov    %edx,-0x38(%ebp)
c010d41b:	89 45 c4             	mov    %eax,-0x3c(%ebp)
        "rep; movsb;"
        "cld;"
        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
        : "memory");
    return dst;
c010d41e:	8b 45 f0             	mov    -0x10(%ebp),%eax
            *d ++ = *s ++;
        }
    }
    return dst;
#endif /* __HAVE_ARCH_MEMMOVE */
}
c010d421:	83 c4 30             	add    $0x30,%esp
c010d424:	5b                   	pop    %ebx
c010d425:	5e                   	pop    %esi
c010d426:	5f                   	pop    %edi
c010d427:	5d                   	pop    %ebp
c010d428:	c3                   	ret    

c010d429 <memcpy>:
 * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
 * by both @src and @dst, should be at least @n bytes, and should not overlap
 * (for overlapping memory area, memmove is a safer approach).
 * */
void *
memcpy(void *dst, const void *src, size_t n) {
c010d429:	55                   	push   %ebp
c010d42a:	89 e5                	mov    %esp,%ebp
c010d42c:	57                   	push   %edi
c010d42d:	56                   	push   %esi
c010d42e:	83 ec 20             	sub    $0x20,%esp
c010d431:	8b 45 08             	mov    0x8(%ebp),%eax
c010d434:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010d437:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d43a:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010d43d:	8b 45 10             	mov    0x10(%ebp),%eax
c010d440:	89 45 ec             	mov    %eax,-0x14(%ebp)
        "andl $3, %%ecx;"
        "jz 1f;"
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
c010d443:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d446:	c1 e8 02             	shr    $0x2,%eax
c010d449:	89 c1                	mov    %eax,%ecx
#ifndef __HAVE_ARCH_MEMCPY
#define __HAVE_ARCH_MEMCPY
static inline void *
__memcpy(void *dst, const void *src, size_t n) {
    int d0, d1, d2;
    asm volatile (
c010d44b:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010d44e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d451:	89 d7                	mov    %edx,%edi
c010d453:	89 c6                	mov    %eax,%esi
c010d455:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
c010d457:	8b 4d ec             	mov    -0x14(%ebp),%ecx
c010d45a:	83 e1 03             	and    $0x3,%ecx
c010d45d:	74 02                	je     c010d461 <memcpy+0x38>
c010d45f:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
c010d461:	89 f0                	mov    %esi,%eax
c010d463:	89 fa                	mov    %edi,%edx
c010d465:	89 4d e8             	mov    %ecx,-0x18(%ebp)
c010d468:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c010d46b:	89 45 e0             	mov    %eax,-0x20(%ebp)
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
        : "memory");
    return dst;
c010d46e:	8b 45 f4             	mov    -0xc(%ebp),%eax
    while (n -- > 0) {
        *d ++ = *s ++;
    }
    return dst;
#endif /* __HAVE_ARCH_MEMCPY */
}
c010d471:	83 c4 20             	add    $0x20,%esp
c010d474:	5e                   	pop    %esi
c010d475:	5f                   	pop    %edi
c010d476:	5d                   	pop    %ebp
c010d477:	c3                   	ret    

c010d478 <memcmp>:
 *   match in both memory blocks has a greater value in @v1 than in @v2
 *   as if evaluated as unsigned char values;
 * - And a value less than zero indicates the opposite.
 * */
int
memcmp(const void *v1, const void *v2, size_t n) {
c010d478:	55                   	push   %ebp
c010d479:	89 e5                	mov    %esp,%ebp
c010d47b:	83 ec 10             	sub    $0x10,%esp
    const char *s1 = (const char *)v1;
c010d47e:	8b 45 08             	mov    0x8(%ebp),%eax
c010d481:	89 45 fc             	mov    %eax,-0x4(%ebp)
    const char *s2 = (const char *)v2;
c010d484:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d487:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (n -- > 0) {
c010d48a:	eb 30                	jmp    c010d4bc <memcmp+0x44>
        if (*s1 != *s2) {
c010d48c:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010d48f:	0f b6 10             	movzbl (%eax),%edx
c010d492:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010d495:	0f b6 00             	movzbl (%eax),%eax
c010d498:	38 c2                	cmp    %al,%dl
c010d49a:	74 18                	je     c010d4b4 <memcmp+0x3c>
            return (int)((unsigned char)*s1 - (unsigned char)*s2);
c010d49c:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010d49f:	0f b6 00             	movzbl (%eax),%eax
c010d4a2:	0f b6 d0             	movzbl %al,%edx
c010d4a5:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010d4a8:	0f b6 00             	movzbl (%eax),%eax
c010d4ab:	0f b6 c0             	movzbl %al,%eax
c010d4ae:	29 c2                	sub    %eax,%edx
c010d4b0:	89 d0                	mov    %edx,%eax
c010d4b2:	eb 1a                	jmp    c010d4ce <memcmp+0x56>
        }
        s1 ++, s2 ++;
c010d4b4:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c010d4b8:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
 * */
int
memcmp(const void *v1, const void *v2, size_t n) {
    const char *s1 = (const char *)v1;
    const char *s2 = (const char *)v2;
    while (n -- > 0) {
c010d4bc:	8b 45 10             	mov    0x10(%ebp),%eax
c010d4bf:	8d 50 ff             	lea    -0x1(%eax),%edx
c010d4c2:	89 55 10             	mov    %edx,0x10(%ebp)
c010d4c5:	85 c0                	test   %eax,%eax
c010d4c7:	75 c3                	jne    c010d48c <memcmp+0x14>
        if (*s1 != *s2) {
            return (int)((unsigned char)*s1 - (unsigned char)*s2);
        }
        s1 ++, s2 ++;
    }
    return 0;
c010d4c9:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010d4ce:	c9                   	leave  
c010d4cf:	c3                   	ret    
